fof('thm.cmlPEG.sumID_def|split|0', axiom, ![V_27A_27]: ![V_27x_27]: s(V_27A_27,'const.cmlPEG.sumID_1'(s('type.sum.sum'(V_27A_27,V_27A_27),'const.sum.INL_1'(s(V_27A_27,V_27x_27))))) = s(V_27A_27,V_27x_27)).
fof('thm.cmlPEG.sumID_def|split|1', axiom, ![V_27A_27]: ![V_27y_27]: s(V_27A_27,'const.cmlPEG.sumID_1'(s('type.sum.sum'(V_27A_27,V_27A_27),'const.sum.INR_1'(s(V_27A_27,V_27y_27))))) = s(V_27A_27,V_27y_27)).
fof('thm.cmlPEG.cmlPEG_2_prove_ltb', axiom, ![V_27A_27,V_27B_27]: ![V_27a_27]: ((?[V_27tgt_27, V_27acc_27]: s('type.pair.prod'('type.sum.sum'(V_27B_27,'type.num.num'),'type.pair.prod'('type.grammar.parsetree'(V_27A_27,V_27B_27),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)))),V_27a_27) = s('type.pair.prod'('type.sum.sum'(V_27B_27,'type.num.num'),'type.pair.prod'('type.grammar.parsetree'(V_27A_27,V_27B_27),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)))),'const.pair.,_2'(s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27),s('type.pair.prod'('type.grammar.parsetree'(V_27A_27,V_27B_27),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27))),'const.pair.,_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27acc_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.NIL_0'))))) | (?[V_27tgt_27, V_27acc_27, V_27t_27]: s('type.pair.prod'('type.sum.sum'(V_27B_27,'type.num.num'),'type.pair.prod'('type.grammar.parsetree'(V_27A_27,V_27B_27),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)))),V_27a_27) = s('type.pair.prod'('type.sum.sum'(V_27B_27,'type.num.num'),'type.pair.prod'('type.grammar.parsetree'(V_27A_27,V_27B_27),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)))),'const.pair.,_2'(s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27),s('type.pair.prod'('type.grammar.parsetree'(V_27A_27,V_27B_27),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27))),'const.pair.,_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27acc_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27t_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.NIL_0'))))))) | ?[V_27tgt_27, V_27acc_27, V_27opt_27, V_27t_27, V_27rest_27]: s('type.pair.prod'('type.sum.sum'(V_27B_27,'type.num.num'),'type.pair.prod'('type.grammar.parsetree'(V_27A_27,V_27B_27),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)))),V_27a_27) = s('type.pair.prod'('type.sum.sum'(V_27B_27,'type.num.num'),'type.pair.prod'('type.grammar.parsetree'(V_27A_27,V_27B_27),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)))),'const.pair.,_2'(s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27),s('type.pair.prod'('type.grammar.parsetree'(V_27A_27,V_27B_27),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27))),'const.pair.,_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27acc_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27opt_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27t_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),V_27rest_27))))))))))) => (?[V_27tgt_27, V_27acc_27]: s('type.pair.prod'('type.sum.sum'(V_27B_27,'type.num.num'),'type.pair.prod'('type.grammar.parsetree'(V_27A_27,V_27B_27),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)))),V_27a_27) = s('type.pair.prod'('type.sum.sum'(V_27B_27,'type.num.num'),'type.pair.prod'('type.grammar.parsetree'(V_27A_27,V_27B_27),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)))),'const.pair.,_2'(s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27),s('type.pair.prod'('type.grammar.parsetree'(V_27A_27,V_27B_27),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27))),'const.pair.,_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27acc_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.NIL_0'))))) | (?[V_27tgt_27, V_27acc_27, V_27t_27]: s('type.pair.prod'('type.sum.sum'(V_27B_27,'type.num.num'),'type.pair.prod'('type.grammar.parsetree'(V_27A_27,V_27B_27),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)))),V_27a_27) = s('type.pair.prod'('type.sum.sum'(V_27B_27,'type.num.num'),'type.pair.prod'('type.grammar.parsetree'(V_27A_27,V_27B_27),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)))),'const.pair.,_2'(s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27),s('type.pair.prod'('type.grammar.parsetree'(V_27A_27,V_27B_27),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27))),'const.pair.,_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27acc_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27t_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.NIL_0'))))))) | ?[V_27tgt_27, V_27acc_27, V_27opt_27, V_27t_27, V_27rest_27]: s('type.pair.prod'('type.sum.sum'(V_27B_27,'type.num.num'),'type.pair.prod'('type.grammar.parsetree'(V_27A_27,V_27B_27),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)))),V_27a_27) = s('type.pair.prod'('type.sum.sum'(V_27B_27,'type.num.num'),'type.pair.prod'('type.grammar.parsetree'(V_27A_27,V_27B_27),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)))),'const.pair.,_2'(s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27),s('type.pair.prod'('type.grammar.parsetree'(V_27A_27,V_27B_27),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27))),'const.pair.,_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27acc_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27opt_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27t_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),V_27rest_27))))))))))))).
fof('thm.cmlPEG.mk_linfix_ind', axiom, ![V_27A_27,V_27B_27]: ![V_27P_27]: ((![V_27tgt_27, V_27acc_27]: p(s('bool','happ'(s('fun'('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'bool'),'happ'(s('fun'('type.grammar.parsetree'(V_27A_27,V_27B_27),'fun'('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'bool')),'happ'(s('fun'('type.sum.sum'(V_27B_27,'type.num.num'),'fun'('type.grammar.parsetree'(V_27A_27,V_27B_27),'fun'('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'bool'))),V_27P_27),s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27))),s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27acc_27))),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.NIL_0')))) & (![V_27tgt_27, V_27acc_27, V_27t_27]: p(s('bool','happ'(s('fun'('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'bool'),'happ'(s('fun'('type.grammar.parsetree'(V_27A_27,V_27B_27),'fun'('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'bool')),'happ'(s('fun'('type.sum.sum'(V_27B_27,'type.num.num'),'fun'('type.grammar.parsetree'(V_27A_27,V_27B_27),'fun'('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'bool'))),V_27P_27),s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27))),s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27acc_27))),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27t_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.NIL_0')))))) & ![V_27tgt_27, V_27acc_27, V_27opt_27, V_27t_27, V_27rest_27]: (p(s('bool','happ'(s('fun'('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'bool'),'happ'(s('fun'('type.grammar.parsetree'(V_27A_27,V_27B_27),'fun'('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'bool')),'happ'(s('fun'('type.sum.sum'(V_27B_27,'type.num.num'),'fun'('type.grammar.parsetree'(V_27A_27,V_27B_27),'fun'('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'bool'))),V_27P_27),s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27))),s('type.grammar.parsetree'(V_27A_27,V_27B_27),'const.grammar.Nd_2'(s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27acc_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27opt_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27t_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.NIL_0'))))))))))),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),V_27rest_27)))) => p(s('bool','happ'(s('fun'('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'bool'),'happ'(s('fun'('type.grammar.parsetree'(V_27A_27,V_27B_27),'fun'('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'bool')),'happ'(s('fun'('type.sum.sum'(V_27B_27,'type.num.num'),'fun'('type.grammar.parsetree'(V_27A_27,V_27B_27),'fun'('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'bool'))),V_27P_27),s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27))),s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27acc_27))),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27opt_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27t_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),V_27rest_27))))))))))) => ![V_27v_27, V_27v_7c49_7c_27, V_27v2_27]: p(s('bool','happ'(s('fun'('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'bool'),'happ'(s('fun'('type.grammar.parsetree'(V_27A_27,V_27B_27),'fun'('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'bool')),'happ'(s('fun'('type.sum.sum'(V_27B_27,'type.num.num'),'fun'('type.grammar.parsetree'(V_27A_27,V_27B_27),'fun'('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'bool'))),V_27P_27),s('type.sum.sum'(V_27B_27,'type.num.num'),V_27v_27))),s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27v_7c49_7c_27))),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),V_27v2_27)))))).
fof('thm.cmlPEG.mk_linfix_def|split|0', axiom, ![V_27A_27,V_27B_27]: ![V_27tgt_27, V_27acc_27]: s('type.grammar.parsetree'(V_27A_27,V_27B_27),'const.cmlPEG.mk_linfix_3'(s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27),s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27acc_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.NIL_0'))) = s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27acc_27)).
fof('thm.cmlPEG.mk_linfix_def|split|1', axiom, ![V_27A_27,V_27B_27]: ![V_27tgt_27, V_27t_27, V_27acc_27]: s('type.grammar.parsetree'(V_27A_27,V_27B_27),'const.cmlPEG.mk_linfix_3'(s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27),s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27acc_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27t_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.NIL_0'))))) = s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27acc_27)).
fof('thm.cmlPEG.mk_linfix_def|split|2', axiom, ![V_27A_27,V_27B_27]: ![V_27tgt_27, V_27t_27, V_27rest_27, V_27opt_27, V_27acc_27]: s('type.grammar.parsetree'(V_27A_27,V_27B_27),'const.cmlPEG.mk_linfix_3'(s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27),s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27acc_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27opt_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27t_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),V_27rest_27))))))) = s('type.grammar.parsetree'(V_27A_27,V_27B_27),'const.cmlPEG.mk_linfix_3'(s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27),s('type.grammar.parsetree'(V_27A_27,V_27B_27),'const.grammar.Nd_2'(s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27acc_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27opt_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27t_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.NIL_0'))))))))),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),V_27rest_27)))).
fof('thm.cmlPEG.cmlPEG_7_prove_ltb', axiom, ![V_27A_27,V_27B_27]: ![V_27a_27]: ((?[V_27tgt_27]: s('type.pair.prod'('type.sum.sum'(V_27B_27,'type.num.num'),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27))),V_27a_27) = s('type.pair.prod'('type.sum.sum'(V_27B_27,'type.num.num'),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27))),'const.pair.,_2'(s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.NIL_0'))) | (?[V_27tgt_27, V_27t_27]: s('type.pair.prod'('type.sum.sum'(V_27B_27,'type.num.num'),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27))),V_27a_27) = s('type.pair.prod'('type.sum.sum'(V_27B_27,'type.num.num'),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27))),'const.pair.,_2'(s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27t_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.NIL_0'))))) | ?[V_27tgt_27, V_27t_27, V_27opt_27, V_27rest_27]: s('type.pair.prod'('type.sum.sum'(V_27B_27,'type.num.num'),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27))),V_27a_27) = s('type.pair.prod'('type.sum.sum'(V_27B_27,'type.num.num'),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27))),'const.pair.,_2'(s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27t_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27opt_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),V_27rest_27))))))))) => (?[V_27tgt_27]: s('type.pair.prod'('type.sum.sum'(V_27B_27,'type.num.num'),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27))),V_27a_27) = s('type.pair.prod'('type.sum.sum'(V_27B_27,'type.num.num'),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27))),'const.pair.,_2'(s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.NIL_0'))) | (?[V_27tgt_27, V_27t_27]: s('type.pair.prod'('type.sum.sum'(V_27B_27,'type.num.num'),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27))),V_27a_27) = s('type.pair.prod'('type.sum.sum'(V_27B_27,'type.num.num'),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27))),'const.pair.,_2'(s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27t_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.NIL_0'))))) | ?[V_27tgt_27, V_27t_27, V_27opt_27, V_27rest_27]: s('type.pair.prod'('type.sum.sum'(V_27B_27,'type.num.num'),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27))),V_27a_27) = s('type.pair.prod'('type.sum.sum'(V_27B_27,'type.num.num'),'type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27))),'const.pair.,_2'(s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27t_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27opt_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),V_27rest_27))))))))))).
fof('thm.cmlPEG.mk_rinfix_ind', axiom, ![V_27A_27,V_27B_27]: ![V_27P_27]: ((![V_27tgt_27]: p(s('bool','happ'(s('fun'('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'bool'),'happ'(s('fun'('type.sum.sum'(V_27B_27,'type.num.num'),'fun'('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'bool')),V_27P_27),s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27))),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.NIL_0')))) & (![V_27tgt_27, V_27t_27]: p(s('bool','happ'(s('fun'('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'bool'),'happ'(s('fun'('type.sum.sum'(V_27B_27,'type.num.num'),'fun'('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'bool')),V_27P_27),s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27))),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27t_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.NIL_0')))))) & ![V_27tgt_27, V_27t_27, V_27opt_27, V_27rest_27]: (p(s('bool','happ'(s('fun'('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'bool'),'happ'(s('fun'('type.sum.sum'(V_27B_27,'type.num.num'),'fun'('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'bool')),V_27P_27),s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27))),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),V_27rest_27)))) => p(s('bool','happ'(s('fun'('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'bool'),'happ'(s('fun'('type.sum.sum'(V_27B_27,'type.num.num'),'fun'('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'bool')),V_27P_27),s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27))),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27t_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27opt_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),V_27rest_27))))))))))) => ![V_27v_27, V_27v_7c49_7c_27]: p(s('bool','happ'(s('fun'('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'bool'),'happ'(s('fun'('type.sum.sum'(V_27B_27,'type.num.num'),'fun'('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'bool')),V_27P_27),s('type.sum.sum'(V_27B_27,'type.num.num'),V_27v_27))),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),V_27v_7c49_7c_27)))))).
fof('thm.cmlPEG.mk_rinfix_def|split|0', axiom, ![V_27A_27,V_27B_27]: ![V_27tgt_27]: s('type.grammar.parsetree'(V_27A_27,V_27B_27),'const.cmlPEG.mk_rinfix_2'(s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.NIL_0'))) = s('type.grammar.parsetree'(V_27A_27,V_27B_27),'const.grammar.Nd_2'(s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.NIL_0')))).
fof('thm.cmlPEG.mk_rinfix_def|split|1', axiom, ![V_27A_27,V_27B_27]: ![V_27tgt_27, V_27t_27]: s('type.grammar.parsetree'(V_27A_27,V_27B_27),'const.cmlPEG.mk_rinfix_2'(s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27t_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.NIL_0'))))) = s('type.grammar.parsetree'(V_27A_27,V_27B_27),'const.grammar.Nd_2'(s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27t_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.NIL_0')))))).
fof('thm.cmlPEG.mk_rinfix_def|split|2', axiom, ![V_27A_27,V_27B_27]: ![V_27tgt_27, V_27t_27, V_27rest_27, V_27opt_27]: s('type.grammar.parsetree'(V_27A_27,V_27B_27),'const.cmlPEG.mk_rinfix_2'(s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27t_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27opt_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),V_27rest_27))))))) = s('type.grammar.parsetree'(V_27A_27,V_27B_27),'const.grammar.Nd_2'(s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27t_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27opt_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),'const.cmlPEG.mk_rinfix_2'(s('type.sum.sum'(V_27B_27,'type.num.num'),V_27tgt_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),V_27rest_27))),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.list.NIL_0')))))))))).
fof('ARITY_1_2_const.grammar.Nd', axiom, ![V_27A_27,V_27B_27]: ![VV0, VV1]: s('type.grammar.parsetree'(V_27A_27,V_27B_27),'happ'(s('fun'('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'type.grammar.parsetree'(V_27A_27,V_27B_27)),'const.grammar.Nd_1'(s('type.sum.sum'(V_27B_27,'type.num.num'),VV0))),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),VV1))) = s('type.grammar.parsetree'(V_27A_27,V_27B_27),'const.grammar.Nd_2'(s('type.sum.sum'(V_27B_27,'type.num.num'),VV0),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),VV1)))).
fof('ARITY_1_3_const.cmlPEG.mk_linfix', axiom, ![V_27A_27,V_27B_27]: ![VV0, VV1, VV2]: s('type.grammar.parsetree'(V_27A_27,V_27B_27),'happ'(s('fun'('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'type.grammar.parsetree'(V_27A_27,V_27B_27)),'happ'(s('fun'('type.grammar.parsetree'(V_27A_27,V_27B_27),'fun'('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),'type.grammar.parsetree'(V_27A_27,V_27B_27))),'const.cmlPEG.mk_linfix_1'(s('type.sum.sum'(V_27B_27,'type.num.num'),VV0))),s('type.grammar.parsetree'(V_27A_27,V_27B_27),VV1))),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),VV2))) = s('type.grammar.parsetree'(V_27A_27,V_27B_27),'const.cmlPEG.mk_linfix_3'(s('type.sum.sum'(V_27B_27,'type.num.num'),VV0),s('type.grammar.parsetree'(V_27A_27,V_27B_27),VV1),s('type.list.list'('type.grammar.parsetree'(V_27A_27,V_27B_27)),VV2)))).
fof('thm.cmlPEG.peg_linfix_def', axiom, ![V_27A_27,V_27B_27,V_27C_27,V_27D_27]: ![V_27tgtnt_27, V_27rptsym_27, V_27opsym_27]: s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'(V_27D_27,'type.num.num'),V_27tgtnt_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27))),V_27rptsym_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27))),V_27opsym_27))) = s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27))),'const.peg.seq_3'(s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27))),V_27rptsym_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27))),'const.peg.rpt_2'(s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27))),'const.peg.seq_3'(s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27))),V_27opsym_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27))),V_27rptsym_27),s('fun'('type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27)),'fun'('type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27)),'type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27)))),'const.list.APPEND_0'))),s('fun'('type.list.list'('type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27))),'type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27))),'const.list.FLAT_0'))),s('fun'('type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27)),'fun'('type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27)),'type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27)))),'_dst_x00x10x00x01_4'(s('fun'('type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27)),'fun'('type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27)),'fun'('fun'('type.grammar.parsetree'(V_27C_27,V_27D_27),'fun'('type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27)),'type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27)))),'type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27))))),'const.list.list_CASE_0'),s('fun'('type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27)),'type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27))),'_i_0_0'),s('type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27)),'const.list.NIL_0'),s('fun'('type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27)),'fun'('type.grammar.parsetree'(V_27C_27,V_27D_27),'fun'('type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27)),'type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27))))),'_dst_x000x110x000_3'(s('fun'('type.grammar.parsetree'(V_27C_27,V_27D_27),'fun'('type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27)),'type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27)))),'const.list.CONS_0'),s('fun'('type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27)),'fun'('type.grammar.parsetree'(V_27C_27,V_27D_27),'type.grammar.parsetree'(V_27C_27,V_27D_27))),'_dst_x00x01x10_3'(s('fun'('type.grammar.parsetree'(V_27C_27,V_27D_27),'fun'('type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27)),'type.grammar.parsetree'(V_27C_27,V_27D_27))),'const.cmlPEG.mk_linfix_1'(s('type.sum.sum'(V_27D_27,'type.num.num'),V_27tgtnt_27))),s('fun'('type.grammar.parsetree'(V_27C_27,V_27D_27),'type.grammar.parsetree'(V_27C_27,V_27D_27)),'_dst_x0x1_2'(s('fun'('type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27)),'type.grammar.parsetree'(V_27C_27,V_27D_27)),'const.grammar.Nd_1'(s('type.sum.sum'(V_27D_27,'type.num.num'),V_27tgtnt_27))),s('fun'('type.grammar.parsetree'(V_27C_27,V_27D_27),'type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27))),'_dst_x1x0_2'(s('fun'('type.grammar.parsetree'(V_27C_27,V_27D_27),'fun'('type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27)),'type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27)))),'const.list.CONS_0'),s('type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27)),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27)),'type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27))),'_i_0_0'))),s('type.list.list'('type.grammar.parsetree'(V_27C_27,V_27D_27)),'const.list.NIL_0')))))))).
fof('ARITY_0_1_const.cmlPEG.mktokLf', axiom, ![VV0]: s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'),s('type.tokens.token',VV0))) = s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.cmlPEG.mktokLf_1'(s('type.tokens.token',VV0)))).
fof('thm.cmlPEG.mktokLf_def', axiom, ![V_27t_27]: s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.cmlPEG.mktokLf_1'(s('type.tokens.token',V_27t_27))) = s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token',V_27t_27))))),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))).
fof('ARITY_1_2_const.cmlPEG.bindNT', axiom, ![V_27A_27]: ![VV0, VV1]: s('type.list.list'('type.grammar.parsetree'(V_27A_27,'type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.parsetree'(V_27A_27,'type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'(V_27A_27,'type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT',VV0))),s('type.list.list'('type.grammar.parsetree'(V_27A_27,'type.gram.MMLnonT')),VV1))) = s('type.list.list'('type.grammar.parsetree'(V_27A_27,'type.gram.MMLnonT')),'const.cmlPEG.bindNT_2'(s('type.gram.MMLnonT',VV0),s('type.list.list'('type.grammar.parsetree'(V_27A_27,'type.gram.MMLnonT')),VV1)))).
fof('thm.cmlPEG.bindNT_def', axiom, ![V_27A_27]: ![V_27ntnm_27, V_27l_27]: s('type.list.list'('type.grammar.parsetree'(V_27A_27,'type.gram.MMLnonT')),'const.cmlPEG.bindNT_2'(s('type.gram.MMLnonT',V_27ntnm_27),s('type.list.list'('type.grammar.parsetree'(V_27A_27,'type.gram.MMLnonT')),V_27l_27))) = s('type.list.list'('type.grammar.parsetree'(V_27A_27,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(V_27A_27,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT',V_27ntnm_27))),s('type.list.list'('type.grammar.parsetree'(V_27A_27,'type.gram.MMLnonT')),V_27l_27))),s('type.list.list'('type.grammar.parsetree'(V_27A_27,'type.gram.MMLnonT')),'const.list.NIL_0')))).
fof('thm.cmlPEG.choicel_def|split|0', axiom, ![V_27A_27,V_27B_27,V_27C_27]: s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27))),'const.list.NIL_0'))) = s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),'const.peg.not_2'(s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),'const.peg.empty_1'(s('type.list.list'(V_27C_27),'const.list.NIL_0'))),s('type.list.list'(V_27C_27),'const.list.NIL_0')))).
fof('ARITY_0_1_const.cmlPEG.sumID', axiom, ![V_27A_27]: ![VV0]: s(V_27A_27,'happ'(s('fun'('type.sum.sum'(V_27A_27,V_27A_27),V_27A_27),'const.cmlPEG.sumID_0'),s('type.sum.sum'(V_27A_27,V_27A_27),VV0))) = s(V_27A_27,'const.cmlPEG.sumID_1'(s('type.sum.sum'(V_27A_27,V_27A_27),VV0)))).
fof('thm.cmlPEG.choicel_def|split|1', axiom, ![V_27A_27,V_27B_27,V_27C_27]: ![V_27h_27, V_27t_27]: s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27))),'const.list.CONS_2'(s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),V_27h_27),s('type.list.list'('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27))),V_27t_27))))) = s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),'const.peg.choice_3'(s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),V_27h_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27))),V_27t_27))),s('fun'('type.sum.sum'('type.list.list'(V_27C_27),'type.list.list'(V_27C_27)),'type.list.list'(V_27C_27)),'const.cmlPEG.sumID_0')))).
fof('thm.cmlPEG.pegf_def', axiom, ![V_27A_27,V_27B_27,V_27C_27]: ![V_27sym_27, V_27f_27]: s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),V_27sym_27),s('fun'('type.list.list'(V_27C_27),'type.list.list'(V_27C_27)),V_27f_27))) = s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),'const.peg.seq_3'(s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),V_27sym_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),'const.peg.empty_1'(s('type.list.list'(V_27C_27),'const.list.NIL_0'))),s('fun'('type.list.list'(V_27C_27),'fun'('type.list.list'(V_27C_27),'type.list.list'(V_27C_27))),'_dst_x00x10_2'(s('fun'('type.list.list'(V_27C_27),'type.list.list'(V_27C_27)),V_27f_27),s('fun'('type.list.list'(V_27C_27),'type.list.list'(V_27C_27)),'_i_0_0')))))).
fof('thm.cmlPEG.seql_def', axiom, ![V_27A_27,V_27B_27,V_27C_27]: ![V_27l_27, V_27f_27]: s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27))),V_27l_27),s('fun'('type.list.list'(V_27C_27),'type.list.list'(V_27C_27)),V_27f_27))) = s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),'const.list.FOLDR_3'(s('fun'('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),'fun'('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),'type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)))),'_dst_x11x00_2'(s('fun'('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),'fun'('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),'fun'('fun'('type.list.list'(V_27C_27),'fun'('type.list.list'(V_27C_27),'type.list.list'(V_27C_27))),'type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27))))),'const.peg.seq_0'),s('fun'('type.list.list'(V_27C_27),'fun'('type.list.list'(V_27C_27),'type.list.list'(V_27C_27))),'const.list.APPEND_0'))),s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),'const.peg.empty_1'(s('type.list.list'(V_27C_27),'const.list.NIL_0'))),s('type.list.list'('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27))),V_27l_27))),s('fun'('type.list.list'(V_27C_27),'type.list.list'(V_27C_27)),V_27f_27)))).
fof('thm.cmlPEG.peg_nonfix_def', axiom, ![V_27A_27,V_27B_27,V_27C_27]: ![V_27tgtnt_27, V_27argsym_27, V_27opsym_27]: s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'('type.grammar.parsetree'(V_27C_27,'type.gram.MMLnonT'))),'const.cmlPEG.peg_nonfix_3'(s('type.gram.MMLnonT',V_27tgtnt_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'('type.grammar.parsetree'(V_27C_27,'type.gram.MMLnonT'))),V_27argsym_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'('type.grammar.parsetree'(V_27C_27,'type.gram.MMLnonT'))),V_27opsym_27))) = s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'('type.grammar.parsetree'(V_27C_27,'type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'('type.grammar.parsetree'(V_27C_27,'type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'('type.grammar.parsetree'(V_27C_27,'type.gram.MMLnonT'))),V_27argsym_27),s('type.list.list'('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'('type.grammar.parsetree'(V_27C_27,'type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'('type.grammar.parsetree'(V_27C_27,'type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'('type.grammar.parsetree'(V_27C_27,'type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'('type.grammar.parsetree'(V_27C_27,'type.gram.MMLnonT'))),'const.peg.seq_3'(s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'('type.grammar.parsetree'(V_27C_27,'type.gram.MMLnonT'))),V_27opsym_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'('type.grammar.parsetree'(V_27C_27,'type.gram.MMLnonT'))),V_27argsym_27),s('fun'('type.list.list'('type.grammar.parsetree'(V_27C_27,'type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'(V_27C_27,'type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'(V_27C_27,'type.gram.MMLnonT')))),'const.list.APPEND_0'))),s('type.list.list'('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'('type.grammar.parsetree'(V_27C_27,'type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'('type.grammar.parsetree'(V_27C_27,'type.gram.MMLnonT'))),'const.peg.empty_1'(s('type.list.list'('type.grammar.parsetree'(V_27C_27,'type.gram.MMLnonT')),'const.list.NIL_0'))),s('type.list.list'('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'('type.grammar.parsetree'(V_27C_27,'type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('type.list.list'('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'('type.grammar.parsetree'(V_27C_27,'type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'(V_27C_27,'type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'(V_27C_27,'type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT',V_27tgtnt_27)))))).
fof('thm.cmlPEG.try_def', axiom, ![V_27A_27,V_27B_27,V_27C_27]: ![V_27sym_27]: s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),'const.cmlPEG.try_1'(s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),V_27sym_27))) = s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27))),'const.list.CONS_2'(s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),V_27sym_27),s('type.list.list'('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27))),'const.list.CONS_2'(s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),'const.peg.empty_1'(s('type.list.list'(V_27C_27),'const.list.NIL_0'))),s('type.list.list'('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27))),'const.list.NIL_0')))))))).
fof('thm.cmlPEG.tokeq_def', axiom, ![V_27A_27]: ![V_27t_27]: s('type.peg.pegsym'('type.tokens.token',V_27A_27,'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token',V_27t_27))) = s('type.peg.pegsym'('type.tokens.token',V_27A_27,'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'|dollar|equals_1'(s('type.tokens.token',V_27t_27))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0')))).
fof('thm.cmlPEG.pnt_def', axiom, ![V_27A_27,V_27B_27]: ![V_27ntsym_27]: s('type.peg.pegsym'(V_27A_27,'type.gram.MMLnonT',V_27B_27),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT',V_27ntsym_27))) = s('type.peg.pegsym'(V_27A_27,'type.gram.MMLnonT',V_27B_27),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT',V_27ntsym_27))),s('fun'(V_27B_27,V_27B_27),'const.combin.I_0')))).
fof('thm.cmlPEG.peg_UQConstructorName_def', axiom, ![V_27A_27]: s('type.peg.pegsym'('type.tokens.token',V_27A_27,'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_UQConstructorName_0') = s('type.peg.pegsym'('type.tokens.token',V_27A_27,'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.one.one'),'fun'('type.option.option'('type.one.one'),'bool')),'=_0'),s('fun'('type.tokens.token','type.option.option'('type.one.one')),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.list.list'('type.string.char')),'fun'('fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one')),'type.option.option'('type.one.one'))),'const.option.OPTION_BIND_0'),s('fun'('type.tokens.token','type.option.option'('type.list.list'('type.string.char'))),'const.tokenUtils.destAlphaT_0'),s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one')),'_dst_x0x1_2'(s('fun'('bool','type.option.option'('type.one.one')),'const.option.OPTION_GUARD_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|bslash||slash|_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'=_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('type.string.char','bool'),'const.string.isUpper_0'),s('fun'('type.list.list'('type.string.char'),'type.string.char'),'const.list.HD_0'))))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('fun'('type.list.list'('type.string.char'),'bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.EMPTY_0'))))))))))))))))),s('type.option.option'('type.one.one'),'const.option.SOME_1'(s('type.one.one','const.one.one_0'))))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nUQConstructorName_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0')))))).
fof('thm.cmlPEG.peg_TypeDec_def', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_TypeDec_0') = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.seq_3'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.DatatypeT_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeDecls_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDtypeDecl_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.AndT_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_dst_x00x11x00_3'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.Nd_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeDec_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.APPEND_0'))),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))).
fof('thm.cmlPEG.peg_V_def', axiom, ![V_27A_27]: s('type.peg.pegsym'('type.tokens.token',V_27A_27,'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_V_0') = s('type.peg.pegsym'('type.tokens.token',V_27A_27,'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token',V_27A_27,'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token',V_27A_27,'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.one.one'),'fun'('type.option.option'('type.one.one'),'bool')),'=_0'),s('fun'('type.tokens.token','type.option.option'('type.one.one')),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.list.list'('type.string.char')),'fun'('fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one')),'type.option.option'('type.one.one'))),'const.option.OPTION_BIND_0'),s('fun'('type.tokens.token','type.option.option'('type.list.list'('type.string.char'))),'const.tokenUtils.destAlphaT_0'),s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one')),'_dst_x0x1_2'(s('fun'('bool','type.option.option'('type.one.one')),'const.option.OPTION_GUARD_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('fun'('type.list.list'('type.string.char'),'bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.EMPTY_0'))))))))))))))))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'=_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('type.string.char','bool'),'const.string.isUpper_0'),s('fun'('type.list.list'('type.string.char'),'type.string.char'),'const.list.HD_0'))))))))))))),s('type.option.option'('type.one.one'),'const.option.SOME_1'(s('type.one.one','const.one.one_0'))))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nV_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token',V_27A_27,'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token',V_27A_27,'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.one.one'),'fun'('type.option.option'('type.one.one'),'bool')),'=_0'),s('fun'('type.tokens.token','type.option.option'('type.one.one')),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.list.list'('type.string.char')),'fun'('fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one')),'type.option.option'('type.one.one'))),'const.option.OPTION_BIND_0'),s('fun'('type.tokens.token','type.option.option'('type.list.list'('type.string.char'))),'const.tokenUtils.destSymbolT_0'),s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one')),'_dst_x0x1_2'(s('fun'('bool','type.option.option'('type.one.one')),'const.option.OPTION_GUARD_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('fun'('type.list.list'('type.string.char'),'bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.EMPTY_0'))))))))))))))))))))))))))))))))),s('type.option.option'('type.one.one'),'const.option.SOME_1'(s('type.one.one','const.one.one_0'))))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nV_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token',V_27A_27,'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0')))))))).
fof('thm.cmlPEG.peg_longV_def', axiom, ![V_27A_27]: s('type.peg.pegsym'('type.tokens.token',V_27A_27,'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_longV_0') = s('type.peg.pegsym'('type.tokens.token',V_27A_27,'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.one.one'),'fun'('type.option.option'('type.one.one'),'bool')),'=_0'),s('fun'('type.tokens.token','type.option.option'('type.one.one')),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'fun'('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.one.one')),'type.option.option'('type.one.one'))),'const.option.OPTION_BIND_0'),s('fun'('type.tokens.token','type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')))),'const.tokenUtils.destLongidT_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.one.one')),'const.pair.UNCURRY_1'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one'))),'_dst_x0_1'(s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one')),'_dst_x0x1_2'(s('fun'('bool','type.option.option'('type.one.one')),'const.option.OPTION_GUARD_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'=_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('type.string.char','bool'),'const.string.isAlpha_0'),s('fun'('type.list.list'('type.string.char'),'type.string.char'),'const.list.HD_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('type.string.char','bool'),'const.string.isUpper_0'),s('fun'('type.list.list'('type.string.char'),'type.string.char'),'const.list.HD_0'))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('fun'('type.list.list'('type.string.char'),'bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.EMPTY_0'))))))))))))))))))))))))),s('type.option.option'('type.one.one'),'const.option.SOME_1'(s('type.one.one','const.one.one_0'))))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nFQV_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0')))))).
fof('thm.cmlPEG.peg_EbaseParenFn_def', axiom, ![V_27l_27]: s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.cmlPEG.peg_EbaseParenFn_1'(s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),V_27l_27))) = s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'const.list.list_CASE_0'),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),V_27l_27))),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_dst_x01x00x10_3'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'const.list.list_CASE_0'),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_dst_x001x000x110_3'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'const.list.list_CASE_0'),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'_dst_x0001x1110x1110_3'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'const.list.list_CASE_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_dst_x000x111x000_3'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_dst_x000x111_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.Nd_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_dst_x000x100x011_3'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'_i_0_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_dst_x00x10x01_3'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'_dst_x0x1_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.Nd_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x1x0_2'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x1x0_2'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))))),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'_dst_x00001x00000x11110_3'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'const.list.list_CASE_0'),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))))),'_dst_x000001x111110x000000_3'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'const.list.list_CASE_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'_dst_x00000x00100x11111x11111_4'(s('fun'('bool','fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'const.bool.COND_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'bool'),'_dst_x1x0_2'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'bool')),'=_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.CommaT_0'))))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'_dst_x00000x11111x00000_3'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'_dst_x00000x11111_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.Nd_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'_dst_x00000x11111x00000_3'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'_dst_x00000x11111_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.Nd_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEtuple_0'))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'_dst_x00000x10000x01111_3'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'_i_0_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'_dst_x0000x1110x0001_3'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_dst_x000x111_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.Nd_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist2_0'))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_dst_x000x100x011_3'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'_i_0_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_dst_x00x10x01_3'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'_i_0_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x1x0_2'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x1x0_2'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))))),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'_dst_x00000x11111x00000_3'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'_dst_x00000x11111_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.Nd_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'_dst_x00000x10000x01111_3'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'_i_0_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'_dst_x0000x1110x0001_3'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_dst_x000x111_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.Nd_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_dst_x000x100x011_3'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'_i_0_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_dst_x00x10x01_3'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'_i_0_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x1x0_2'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x1x0_2'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))))),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_dst_x0_1'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x0_1'(s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))))))))))))).
fof('ARITY_0_1_const.cmlPEG.peg_EbaseParenFn', axiom, ![VV0]: s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_EbaseParenFn_0'),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),VV0))) = s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.cmlPEG.peg_EbaseParenFn_1'(s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),VV0)))).
fof('thm.cmlPEG.peg_EbaseParen_def', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_EbaseParen_0') = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.LparT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.RparT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.CommaT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.RparT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.SemicolonT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.RparT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_EbaseParenFn_0')))).
fof('thm.cmlPEG.peg_StructName_def', axiom, ![V_27A_27]: s('type.peg.pegsym'('type.tokens.token',V_27A_27,'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_StructName_0') = s('type.peg.pegsym'('type.tokens.token',V_27A_27,'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.one.one'),'fun'('type.option.option'('type.one.one'),'bool')),'=_0'),s('fun'('type.tokens.token','type.option.option'('type.one.one')),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.list.list'('type.string.char')),'fun'('fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one')),'type.option.option'('type.one.one'))),'const.option.OPTION_BIND_0'),s('fun'('type.tokens.token','type.option.option'('type.list.list'('type.string.char'))),'const.tokenUtils.destAlphaT_0'),s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one')),'_dst_x0x1_2'(s('fun'('bool','type.option.option'('type.one.one')),'const.option.OPTION_GUARD_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'=_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.option.option'('type.one.one'),'const.option.SOME_1'(s('type.one.one','const.one.one_0'))))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nStructName_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0')))))).
fof('ARITY_0_1_const.cmlPEG.tokeq', axiom, ![V_27A_27]: ![VV0]: s('type.peg.pegsym'('type.tokens.token',V_27A_27,'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token',V_27A_27,'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token',VV0))) = s('type.peg.pegsym'('type.tokens.token',V_27A_27,'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token',VV0)))).
fof('thm.cmlPEG.cmlPEG_def', axiom, s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0') = s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.peg_start_fupd_2'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.combin.K_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))))),s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.peg_rules_fupd_2'(s('fun'('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'const.combin.K_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nV_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_V_0'))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyvarN_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isTyvarT_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTyvarN_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFQV_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nV_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nFQV_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_longV_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEapp_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.rpt_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))),s('fun'('type.list.list'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.list.FLAT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x1x0x0_3'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'const.list.list_CASE_0'),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_dst_x00x11x00_3'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x0x1_2'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.list.FOLDL_1'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.Nd_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEapp_0'))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_dst_x00x10x01_3'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'_i_0_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x1x0_2'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'_dst_x0x1_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.Nd_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEapp_0'))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x1x0_2'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.CommaT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nMultOps_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.MAP_2'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.list.list'('type.tokens.token'),'happ'(s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'happ'(s('fun'('type.tokens.token','fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'const.list.CONS_0'),s('type.tokens.token','const.tokens.StarT_0'))),s('type.list.list'('type.tokens.token'),'happ'(s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'happ'(s('fun'('type.tokens.token','fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'const.list.CONS_0'),s('type.tokens.token','happ'(s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.SymbolT_0'),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'('type.tokens.token'),'happ'(s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'happ'(s('fun'('type.tokens.token','fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'const.list.CONS_0'),s('type.tokens.token','const.tokens.AlphaT_1'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.tokens.token'),'happ'(s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'happ'(s('fun'('type.tokens.token','fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'const.list.CONS_0'),s('type.tokens.token','const.tokens.AlphaT_1'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.tokens.token'),'const.list.NIL_0'))))))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nMultOps_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAddOps_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','happ'(s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.SymbolT_0'),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','happ'(s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.SymbolT_0'),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nAddOps_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nRelOps_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'|dollar|equals_1'(s('type.tokens.token','const.tokens.EqualsT_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.MAP_2'(s('fun'('type.list.list'('type.string.char'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.combin.o_2'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.SymbolT_0'))),s('type.list.list'('type.list.list'('type.string.char')),'happ'(s('fun'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.list.list'('type.string.char'))),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.list.list'('type.string.char')))),'const.list.CONS_0'),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.list.list'('type.string.char')),'happ'(s('fun'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.list.list'('type.string.char'))),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.list.list'('type.string.char')))),'const.list.CONS_0'),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.list.list'('type.string.char')),'happ'(s('fun'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.list.list'('type.string.char'))),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.list.list'('type.string.char')))),'const.list.CONS_0'),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'('type.list.list'('type.string.char')),'happ'(s('fun'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.list.list'('type.string.char'))),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.list.list'('type.string.char')))),'const.list.CONS_0'),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'('type.list.list'('type.string.char')),'happ'(s('fun'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.list.list'('type.string.char'))),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.list.list'('type.string.char')))),'const.list.CONS_0'),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))))))))))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nRelOps_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nListOps_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.MAP_2'(s('fun'('type.list.list'('type.string.char'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.combin.o_2'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.SymbolT_0'))),s('type.list.list'('type.list.list'('type.string.char')),'happ'(s('fun'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.list.list'('type.string.char'))),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.list.list'('type.string.char')))),'const.list.CONS_0'),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'('type.list.list'('type.string.char')),'happ'(s('fun'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.list.list'('type.string.char'))),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.list.list'('type.string.char')))),'const.list.CONS_0'),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nListOps_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nCompOps_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','happ'(s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.SymbolT_0'),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.AlphaT_1'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nCompOps_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nOpID_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.one.one'),'fun'('type.option.option'('type.one.one'),'bool')),'=_0'),s('fun'('type.tokens.token','type.option.option'('type.one.one')),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'fun'('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.one.one')),'type.option.option'('type.one.one'))),'const.option.OPTION_BIND_0'),s('fun'('type.tokens.token','type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')))),'const.tokenUtils.destLongidT_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.one.one')),'const.pair.UNCURRY_1'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one'))),'_dst_x0_1'(s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one')),'_dst_x0x1_2'(s('fun'('bool','type.option.option'('type.one.one')),'const.option.OPTION_GUARD_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'=_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))),s('type.option.option'('type.one.one'),'const.option.SOME_1'(s('type.one.one','const.one.one_0'))))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nOpID_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.one.one'),'fun'('type.option.option'('type.one.one'),'bool')),'=_0'),s('fun'('type.tokens.token','type.option.option'('type.one.one')),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.list.list'('type.string.char')),'fun'('fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one')),'type.option.option'('type.one.one'))),'const.option.OPTION_BIND_0'),s('fun'('type.tokens.token','type.option.option'('type.list.list'('type.string.char'))),'const.tokenUtils.destSymbolT_0'),s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one')),'_dst_x0x1_2'(s('fun'('bool','type.option.option'('type.one.one')),'const.option.OPTION_GUARD_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'=_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.option.option'('type.one.one'),'const.option.SOME_1'(s('type.one.one','const.one.one_0'))))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nOpID_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.one.one'),'fun'('type.option.option'('type.one.one'),'bool')),'=_0'),s('fun'('type.tokens.token','type.option.option'('type.one.one')),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.list.list'('type.string.char')),'fun'('fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one')),'type.option.option'('type.one.one'))),'const.option.OPTION_BIND_0'),s('fun'('type.tokens.token','type.option.option'('type.list.list'('type.string.char'))),'const.tokenUtils.destAlphaT_0'),s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one')),'_dst_x0x1_2'(s('fun'('bool','type.option.option'('type.one.one')),'const.option.OPTION_GUARD_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'=_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.option.option'('type.one.one'),'const.option.SOME_1'(s('type.one.one','const.one.one_0'))))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nOpID_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.StarT_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nOpID_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isInt_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isString_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isCharT_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.LparT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.RparT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_EbaseParen_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.LbrackT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.RbrackT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.LetT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.InT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.EndT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nFQV_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.OpT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nOpID_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))))))))))))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.SemicolonT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEmult_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEmult_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEapp_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nMultOps_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEadd_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEadd_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEmult_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nAddOps_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElistop_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEadd_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nListOps_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElistop_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nElistop_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nErel_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nErel_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElistop_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nRelOps_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEcomp_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEcomp_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nErel_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nCompOps_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbefore_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbefore_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEcomp_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.AlphaT_1'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEtyped_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEbefore_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.ColonT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nType_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEtyped_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEtyped_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.AndalsoT_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.OrelseT_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEhandle_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.HandleT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEhandle_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.RaiseT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEhandle_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.IfT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.ThenT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.ElseT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.FnT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.DarrowT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.CaseT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.OfT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.RaiseT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.IfT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.ThenT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.ElseT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPE|39|_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.BarT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPE_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.DarrowT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPE_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE|39|_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.DarrowT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPE|39|_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.AndT_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nV_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPbaseList|49|_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.EqualsT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPbaseList|49|_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPbase_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPbaseList|49|_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPbaseList|49|_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nType_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPType_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.ArrowT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nType_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nType_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDType_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTbase_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.rpt_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTyOp_0'))),s('fun'('type.list.list'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.list.FLAT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x1x0x0_3'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'const.list.list_CASE_0'),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_dst_x00x11x00_3'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x0x1_2'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.list.FOLDL_1'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.Nd_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDType_0'))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_dst_x00x10x01_3'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'_i_0_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x1x0_2'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'_dst_x0x1_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.Nd_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDType_0'))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x1x0_2'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTbase_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.LparT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nType_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.RparT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTbase_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.LparT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeList2_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.RparT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTyOp_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTbase_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isTyvarT_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTbase_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTyOp_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTbase_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeList2_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nType_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.CommaT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeList|49|_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTypeList2_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeList|49|_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nType_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.CommaT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeList|49|_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTypeList|49|_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyOp_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isLongidT_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTyOp_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isAlphaSym_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPType_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDType_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.StarT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPType_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPType_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.LparT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTyVarList_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.RparT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isTyvarT_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyVarList_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyVarList_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTyvarN_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.CommaT_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeDec_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_TypeDec_0'))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeDecl_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.EqualsT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeCons_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDconstructor_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.BarT_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDtypeDecl_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDconstructor_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nUQConstructorName_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.OfT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nType_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDconstructor_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nUQConstructorName_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_UQConstructorName_0'))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nUQConstructorName_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.one.one'),'fun'('type.option.option'('type.one.one'),'bool')),'=_0'),s('fun'('type.tokens.token','type.option.option'('type.one.one')),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'fun'('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.one.one')),'type.option.option'('type.one.one'))),'const.option.OPTION_BIND_0'),s('fun'('type.tokens.token','type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')))),'const.tokenUtils.destLongidT_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.one.one')),'const.pair.UNCURRY_1'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one'))),'_dst_x0_1'(s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one')),'_dst_x0x1_2'(s('fun'('bool','type.option.option'('type.one.one')),'const.option.OPTION_GUARD_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|bslash||slash|_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'=_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('type.string.char','bool'),'const.string.isAlpha_0'),s('fun'('type.list.list'('type.string.char'),'type.string.char'),'const.list.HD_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('type.string.char','bool'),'const.string.isUpper_0'),s('fun'('type.list.list'('type.string.char'),'type.string.char'),'const.list.HD_0'))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('fun'('type.list.list'('type.string.char'),'bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.EMPTY_0'))))))))))))))))))))),s('type.option.option'('type.one.one'),'const.option.SOME_1'(s('type.one.one','const.one.one_0'))))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPbase_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nV_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isInt_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isString_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isCharT_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPtuple_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.UnderbarT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.LbrackT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPatternList_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.RbrackT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPbase_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPapp_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPbase_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPapp_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPbase_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPapp_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPapp_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','happ'(s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.SymbolT_0'),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPatternList_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.CommaT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPatternList_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPatternList_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPtuple_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.LparT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.RparT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPtuple_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.LparT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPatternList_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.RparT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPtuple_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.ValT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nV_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.EqualsT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.FunT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.SemicolonT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.empty_1'(s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.ValT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.EqualsT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.FunT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.ExceptionT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDconstructor_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeDec_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeAbbrevDec_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeAbbrevDec_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.TypeT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.EqualsT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nType_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTypeAbbrevDec_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.SemicolonT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.empty_1'(s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nOptTypEqn_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.EqualsT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nType_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nOptTypEqn_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.empty_1'(s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nOptTypEqn_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSpecLine_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.ValT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nV_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.ColonT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nType_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nSpecLine_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.TypeT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nOptTypEqn_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nSpecLine_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.ExceptionT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDconstructor_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nSpecLine_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeDec_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nSpecLine_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nSpecLine_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.SemicolonT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.empty_1'(s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSignatureValue_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.SigT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.EndT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nSignatureValue_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nOptionalSignatureAscription_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.SealT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nSignatureValue_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nOptionalSignatureAscription_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nStructName_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_StructName_0'))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nStructure_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.StructureT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nStructName_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nOptionalSignatureAscription_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.EqualsT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.StructT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.EndT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nStructure_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDec_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nStructure_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDec_0'))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.SemicolonT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDec_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nNonETopLevelDecs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.SemicolonT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.empty_1'(s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.CONS_0'),s('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pair.,_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nNonETopLevelDecs_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDec_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nNonETopLevelDecs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nNonETopLevelDecs_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.tokens.token','const.tokens.SemicolonT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nNonETopLevelDecs_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.empty_1'(s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nNonETopLevelDecs_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'const.list.NIL_0'))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))),s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.bool.ARB_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|0', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nV_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_V_0')).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|1', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isAlphaSym_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|2', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nUQConstructorName_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_UQConstructorName_0')).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|3', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyvarN_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isTyvarT_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTyvarN_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|4', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.LparT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTyVarList_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.RparT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isTyvarT_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0')))))))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|5', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeList2_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nType_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.CommaT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeList|49|_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTypeList2_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|6', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeList|49|_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nType_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.CommaT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeList|49|_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTypeList|49|_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|7', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeDec_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_TypeDec_0')).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|8', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeAbbrevDec_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.TypeT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.EqualsT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nType_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTypeAbbrevDec_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|9', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nType_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPType_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.ArrowT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nType_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nType_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|10', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyVarList_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyVarList_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTyvarN_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.CommaT_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|11', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyOp_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isLongidT_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTyOp_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|12', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.SemicolonT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDec_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nNonETopLevelDecs_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.SemicolonT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.empty_1'(s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0')))))))))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|13', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDec_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nStructure_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDec_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|14', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTbase_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.LparT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nType_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.RparT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTbase_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.LparT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeList2_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.RparT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTyOp_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTbase_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isTyvarT_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTbase_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTyOp_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTbase_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0')))))))))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|15', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nStructure_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.StructureT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nStructName_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nOptionalSignatureAscription_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.EqualsT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.StructT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.EndT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nStructure_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|16', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nStructName_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_StructName_0')).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|17', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nSpecLine_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.SemicolonT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.empty_1'(s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0')))))))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|18', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSpecLine_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.ValT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nV_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.ColonT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nType_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nSpecLine_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.TypeT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nOptTypEqn_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nSpecLine_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.ExceptionT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDconstructor_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nSpecLine_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeDec_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nSpecLine_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0')))))))))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|19', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSignatureValue_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.SigT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.EndT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nSignatureValue_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|20', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nRelOps_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'|dollar|equals_1'(s('type.tokens.token','const.tokens.EqualsT_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.MAP_2'(s('fun'('type.list.list'('type.string.char'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.combin.o_2'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.SymbolT_0'))),s('type.list.list'('type.list.list'('type.string.char')),'const.list.CONS_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),'const.list.CONS_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),'const.list.CONS_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.list.list'('type.string.char')),'const.list.CONS_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.list.list'('type.string.char')),'const.list.CONS_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))))))))))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nRelOps_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|21', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPtuple_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.LparT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.RparT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPtuple_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.LparT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPatternList_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.RparT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPtuple_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0')))))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|22', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPbaseList|49|_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPbase_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPbaseList|49|_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPbaseList|49|_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|23', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPbase_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nV_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isInt_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isString_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isCharT_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPtuple_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.UnderbarT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.LbrackT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPatternList_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.RbrackT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPbase_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|24', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPatternList_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.CommaT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPatternList_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPatternList_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|25', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPapp_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.SymbolT_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPattern_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|26', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPapp_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPbase_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPapp_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPbase_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPapp_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0')))))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|27', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPType_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDType_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.StarT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPType_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPType_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|28', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPE|39|_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.BarT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPE_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0')))))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|29', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE|39|_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.DarrowT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPE|39|_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|30', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.DarrowT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPE_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|31', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nOptionalSignatureAscription_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.SealT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nSignatureValue_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nOptionalSignatureAscription_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|32', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nOptTypEqn_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.EqualsT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nType_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nOptTypEqn_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.empty_1'(s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nOptTypEqn_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0')))))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|33', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nOpID_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.one.one'),'fun'('type.option.option'('type.one.one'),'bool')),'=_0'),s('fun'('type.tokens.token','type.option.option'('type.one.one')),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'fun'('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.one.one')),'type.option.option'('type.one.one'))),'const.option.OPTION_BIND_0'),s('fun'('type.tokens.token','type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')))),'const.tokenUtils.destLongidT_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.one.one')),'const.pair.UNCURRY_1'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one'))),'_dst_x0_1'(s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one')),'_dst_x0x1_2'(s('fun'('bool','type.option.option'('type.one.one')),'const.option.OPTION_GUARD_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'=_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))),s('type.option.option'('type.one.one'),'const.option.SOME_1'(s('type.one.one','const.one.one_0'))))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nOpID_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.one.one'),'fun'('type.option.option'('type.one.one'),'bool')),'=_0'),s('fun'('type.tokens.token','type.option.option'('type.one.one')),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.list.list'('type.string.char')),'fun'('fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one')),'type.option.option'('type.one.one'))),'const.option.OPTION_BIND_0'),s('fun'('type.tokens.token','type.option.option'('type.list.list'('type.string.char'))),'const.tokenUtils.destSymbolT_0'),s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one')),'_dst_x0x1_2'(s('fun'('bool','type.option.option'('type.one.one')),'const.option.OPTION_GUARD_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'=_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.option.option'('type.one.one'),'const.option.SOME_1'(s('type.one.one','const.one.one_0'))))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nOpID_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.one.one'),'fun'('type.option.option'('type.one.one'),'bool')),'=_0'),s('fun'('type.tokens.token','type.option.option'('type.one.one')),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.list.list'('type.string.char')),'fun'('fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one')),'type.option.option'('type.one.one'))),'const.option.OPTION_BIND_0'),s('fun'('type.tokens.token','type.option.option'('type.list.list'('type.string.char'))),'const.tokenUtils.destAlphaT_0'),s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one')),'_dst_x0x1_2'(s('fun'('bool','type.option.option'('type.one.one')),'const.option.OPTION_GUARD_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'=_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.option.option'('type.one.one'),'const.option.SOME_1'(s('type.one.one','const.one.one_0'))))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nOpID_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.StarT_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nOpID_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0')))))))))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|34', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nNonETopLevelDecs_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDec_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nNonETopLevelDecs_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nNonETopLevelDecs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.SemicolonT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nNonETopLevelDecs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.empty_1'(s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nNonETopLevelDecs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0')))))))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|35', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nMultOps_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.MAP_2'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token','const.tokens.StarT_0'),s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token','const.tokens.SymbolT_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token','const.tokens.AlphaT_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token','const.tokens.AlphaT_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.tokens.token'),'const.list.NIL_0'))))))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nMultOps_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|36', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nListOps_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.MAP_2'(s('fun'('type.list.list'('type.string.char'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.combin.o_2'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.SymbolT_0'))),s('type.list.list'('type.list.list'('type.string.char')),'const.list.CONS_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.list.list'('type.string.char')),'const.list.CONS_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nListOps_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|37', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.SemicolonT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.empty_1'(s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0')))))))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|38', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.ValT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nV_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.EqualsT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.FunT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0')))))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|39', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFQV_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nV_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nFQV_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_longV_0'),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0')))))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|40', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nV_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPbaseList|49|_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.EqualsT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|41', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEtyped_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEbefore_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.ColonT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nType_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEtyped_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|42', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEtuple_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.finite_map.FEMPTY_0'),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEtuple_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|43', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.SemicolonT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEseq_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|44', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nErel_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nErel_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElistop_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nRelOps_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|45', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEmult_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEmult_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEapp_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nMultOps_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|46', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.OrelseT_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|47', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEtyped_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.AndalsoT_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|48', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElistop_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEadd_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nListOps_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElistop_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nElistop_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|49', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist2_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.finite_map.FEMPTY_0'),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist2_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|50', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.CommaT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|51', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEhandle_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.HandleT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEhandle_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|52', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEcomp_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEcomp_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nErel_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nCompOps_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|53', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbefore_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbefore_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEcomp_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.AlphaT_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|54', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isInt_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isString_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isCharT_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.LparT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.RparT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_EbaseParen_0'),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.LbrackT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.RbrackT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.LetT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.InT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.EndT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nFQV_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.OpT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nOpID_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0')))))))))))))))))))))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|55', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEapp_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.rpt_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))),s('fun'('type.list.list'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.list.FLAT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x1x0x0_3'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'const.list.list_CASE_0'),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_dst_x00x11x00_3'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x0x1_2'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.list.FOLDL_1'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.Nd_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEapp_0'))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_dst_x00x10x01_3'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'_i_0_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x1x0_2'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'_dst_x0x1_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.Nd_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEapp_0'))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x1x0_2'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|56', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEadd_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEadd_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEmult_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nAddOps_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|57', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.RaiseT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.IfT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.ThenT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.ElseT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0')))))))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|58', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.RaiseT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEhandle_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.IfT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.ThenT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.ElseT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.FnT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.DarrowT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.CaseT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.OfT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0')))))))))))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|59', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeDecls_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.finite_map.FEMPTY_0'),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeDecls_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|60', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeDecl_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.EqualsT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeCons_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDconstructor_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.BarT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDtypeDecl_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|61', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeCons_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.finite_map.FEMPTY_0'),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeCons_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|62', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.SemicolonT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.empty_1'(s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0')))))))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|63', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.ValT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.EqualsT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.FunT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.ExceptionT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDconstructor_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeDec_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeAbbrevDec_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0')))))))))))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|64', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDconstructor_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nUQConstructorName_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.OfT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nType_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDconstructor_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|65', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDType_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTbase_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.rpt_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTyOp_0'))),s('fun'('type.list.list'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.list.FLAT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x1x0x0_3'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'const.list.list_CASE_0'),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_dst_x00x11x00_3'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x0x1_2'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.list.FOLDL_1'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.Nd_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDType_0'))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_dst_x00x10x01_3'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'_i_0_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x1x0_2'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'_dst_x0x1_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.Nd_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDType_0'))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x1x0_2'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|66', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nUQConstructorName_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.one.one'),'fun'('type.option.option'('type.one.one'),'bool')),'=_0'),s('fun'('type.tokens.token','type.option.option'('type.one.one')),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'fun'('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.one.one')),'type.option.option'('type.one.one'))),'const.option.OPTION_BIND_0'),s('fun'('type.tokens.token','type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')))),'const.tokenUtils.destLongidT_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.one.one')),'const.pair.UNCURRY_1'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one'))),'_dst_x0_1'(s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one')),'_dst_x0x1_2'(s('fun'('bool','type.option.option'('type.one.one')),'const.option.OPTION_GUARD_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|bslash||slash|_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'=_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('type.string.char','bool'),'const.string.isAlpha_0'),s('fun'('type.list.list'('type.string.char'),'type.string.char'),'const.list.HD_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('type.string.char','bool'),'const.string.isUpper_0'),s('fun'('type.list.list'('type.string.char'),'type.string.char'),'const.list.HD_0'))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('fun'('type.list.list'('type.string.char'),'bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.EMPTY_0'))))))))))))))))))))),s('type.option.option'('type.one.one'),'const.option.SOME_1'(s('type.one.one','const.one.one_0'))))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0')))))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|67', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nCompOps_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.SymbolT_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.AlphaT_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nCompOps_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|68', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.AndT_0')))))).
fof('thm.cmlPEG.cmlpeg_rules_applied|split|69', axiom, s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAddOps_0'))))) = s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.SymbolT_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.SymbolT_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nAddOps_0')))))).
fof('thm.cmlPEG.FDOM_cmlPEG', axiom, s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))) = s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nNonETopLevelDecs_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDec_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nStructure_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nStructName_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nOptionalSignatureAscription_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSignatureValue_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSpecLine_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nOptTypEqn_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeAbbrevDec_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPtuple_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPatternList_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPapp_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPbase_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nUQConstructorName_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDconstructor_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeDecl_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeDec_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyVarList_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPType_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyOp_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeList|49|_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeList2_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTbase_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDType_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nType_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPbaseList|49|_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE|39|_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEhandle_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEtyped_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbefore_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEcomp_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nErel_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElistop_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEadd_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEmult_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nOpID_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nCompOps_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nListOps_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nRelOps_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAddOps_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nMultOps_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEapp_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFQV_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyvarN_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nV_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.EMPTY_0')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|0', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nV_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_V_0'),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|1', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isAlphaSym_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|2', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nUQConstructorName_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_UQConstructorName_0'),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|3', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyvarN_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isTyvarT_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTyvarN_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|4', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.LparT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTyVarList_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.RparT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isTyvarT_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|5', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeList2_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nType_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.CommaT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeList|49|_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTypeList2_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|6', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeList|49|_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nType_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.CommaT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeList|49|_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTypeList|49|_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|7', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeDec_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_TypeDec_0'),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|8', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeAbbrevDec_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.TypeT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.EqualsT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nType_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTypeAbbrevDec_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|9', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nType_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPType_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.ArrowT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nType_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nType_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|10', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyVarList_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyVarList_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTyvarN_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.CommaT_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|11', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyOp_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isLongidT_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTyOp_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|12', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.SemicolonT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDec_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nNonETopLevelDecs_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.SemicolonT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.empty_1'(s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|13', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDec_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nStructure_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDec_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|14', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTbase_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.LparT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nType_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.RparT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTbase_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.LparT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeList2_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.RparT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTyOp_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTbase_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isTyvarT_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTbase_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTyOp_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nTbase_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|15', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nStructure_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.StructureT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nStructName_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nOptionalSignatureAscription_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.EqualsT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.StructT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.EndT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nStructure_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|16', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nStructName_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_StructName_0'),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|17', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nSpecLine_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.SemicolonT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.empty_1'(s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|18', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSpecLine_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.ValT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nV_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.ColonT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nType_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nSpecLine_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.TypeT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nOptTypEqn_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nSpecLine_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.ExceptionT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDconstructor_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nSpecLine_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeDec_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nSpecLine_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|19', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSignatureValue_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.SigT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.EndT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nSignatureValue_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|20', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nRelOps_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'|dollar|equals_1'(s('type.tokens.token','const.tokens.EqualsT_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.MAP_2'(s('fun'('type.list.list'('type.string.char'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.combin.o_2'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.SymbolT_0'))),s('type.list.list'('type.list.list'('type.string.char')),'const.list.CONS_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),'const.list.CONS_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),'const.list.CONS_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.list.list'('type.string.char')),'const.list.CONS_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.list.list'('type.string.char')),'const.list.CONS_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))))))))))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nRelOps_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|21', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPtuple_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.LparT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.RparT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPtuple_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.LparT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPatternList_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.RparT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPtuple_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|22', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPbaseList|49|_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPbase_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPbaseList|49|_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPbaseList|49|_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|23', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPbase_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nV_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isInt_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isString_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isCharT_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPtuple_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.UnderbarT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.LbrackT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPatternList_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.RbrackT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPbase_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|24', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPatternList_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.CommaT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPatternList_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPatternList_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|25', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPapp_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.SymbolT_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|26', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPapp_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPbase_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPapp_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPbase_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPapp_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|27', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPType_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDType_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.StarT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPType_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPType_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|28', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPE|39|_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.BarT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPE_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|29', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE|39|_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.DarrowT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPE|39|_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|30', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.DarrowT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nPE_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|31', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nOptionalSignatureAscription_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.SealT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nSignatureValue_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nOptionalSignatureAscription_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|32', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nOptTypEqn_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.EqualsT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nType_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nOptTypEqn_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.empty_1'(s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nOptTypEqn_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|33', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nOpID_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.one.one'),'fun'('type.option.option'('type.one.one'),'bool')),'=_0'),s('fun'('type.tokens.token','type.option.option'('type.one.one')),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'fun'('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.one.one')),'type.option.option'('type.one.one'))),'const.option.OPTION_BIND_0'),s('fun'('type.tokens.token','type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')))),'const.tokenUtils.destLongidT_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.one.one')),'const.pair.UNCURRY_1'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one'))),'_dst_x0_1'(s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one')),'_dst_x0x1_2'(s('fun'('bool','type.option.option'('type.one.one')),'const.option.OPTION_GUARD_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'=_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))),s('type.option.option'('type.one.one'),'const.option.SOME_1'(s('type.one.one','const.one.one_0'))))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nOpID_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.one.one'),'fun'('type.option.option'('type.one.one'),'bool')),'=_0'),s('fun'('type.tokens.token','type.option.option'('type.one.one')),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.list.list'('type.string.char')),'fun'('fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one')),'type.option.option'('type.one.one'))),'const.option.OPTION_BIND_0'),s('fun'('type.tokens.token','type.option.option'('type.list.list'('type.string.char'))),'const.tokenUtils.destSymbolT_0'),s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one')),'_dst_x0x1_2'(s('fun'('bool','type.option.option'('type.one.one')),'const.option.OPTION_GUARD_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'=_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.option.option'('type.one.one'),'const.option.SOME_1'(s('type.one.one','const.one.one_0'))))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nOpID_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.one.one'),'fun'('type.option.option'('type.one.one'),'bool')),'=_0'),s('fun'('type.tokens.token','type.option.option'('type.one.one')),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.list.list'('type.string.char')),'fun'('fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one')),'type.option.option'('type.one.one'))),'const.option.OPTION_BIND_0'),s('fun'('type.tokens.token','type.option.option'('type.list.list'('type.string.char'))),'const.tokenUtils.destAlphaT_0'),s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one')),'_dst_x0x1_2'(s('fun'('bool','type.option.option'('type.one.one')),'const.option.OPTION_GUARD_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'=_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.option.option'('type.one.one'),'const.option.SOME_1'(s('type.one.one','const.one.one_0'))))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nOpID_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.StarT_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nOpID_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|34', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nNonETopLevelDecs_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDec_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nNonETopLevelDecs_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nNonETopLevelDecs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.SemicolonT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nNonETopLevelDecs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.empty_1'(s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nNonETopLevelDecs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|35', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nMultOps_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.MAP_2'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token','const.tokens.StarT_0'),s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token','const.tokens.SymbolT_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token','const.tokens.AlphaT_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token','const.tokens.AlphaT_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.tokens.token'),'const.list.NIL_0'))))))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nMultOps_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|36', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nListOps_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.MAP_2'(s('fun'('type.list.list'('type.string.char'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.combin.o_2'(s('fun'('type.tokens.token','type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.cmlPEG.tokeq_0'),s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.SymbolT_0'))),s('type.list.list'('type.list.list'('type.string.char')),'const.list.CONS_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.list.list'('type.string.char')),'const.list.CONS_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nListOps_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|37', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.SemicolonT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.empty_1'(s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|38', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.ValT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nV_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.EqualsT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.FunT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|39', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFQV_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nV_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nFQV_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_longV_0'),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|40', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nV_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPbaseList|49|_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.EqualsT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|41', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEtyped_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEbefore_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.ColonT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nType_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEtyped_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|42', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEtuple_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.Result_1'(s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.option.NONE_0')))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|43', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.SemicolonT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|44', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nErel_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nErel_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElistop_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nRelOps_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|45', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEmult_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEmult_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEapp_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nMultOps_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|46', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.OrelseT_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|47', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEtyped_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.AndalsoT_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|48', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElistop_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEadd_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nListOps_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElistop_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nElistop_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|49', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist2_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.Result_1'(s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.option.NONE_0')))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|50', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.CommaT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|51', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEhandle_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.HandleT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEhandle_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|52', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEcomp_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEcomp_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nErel_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nCompOps_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|53', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbefore_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbefore_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEcomp_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.AlphaT_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|54', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isInt_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isString_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'const.tokenUtils.isCharT_0'),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.LparT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.RparT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_EbaseParen_0'),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.LbrackT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.RbrackT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.LetT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.InT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.EndT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nFQV_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.OpT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nOpID_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))))))))))))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|55', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEapp_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.rpt_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))),s('fun'('type.list.list'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.list.FLAT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x1x0x0_3'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'const.list.list_CASE_0'),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_dst_x00x11x00_3'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x0x1_2'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.list.FOLDL_1'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.Nd_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEapp_0'))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_dst_x00x10x01_3'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'_i_0_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x1x0_2'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'_dst_x0x1_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.Nd_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEapp_0'))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x1x0_2'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|56', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEadd_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEadd_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEmult_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nAddOps_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|57', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.RaiseT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.IfT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.ThenT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.ElseT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|58', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.RaiseT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEhandle_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.IfT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.ThenT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.ElseT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.FnT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.DarrowT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.CaseT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.OfT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|59', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeDecls_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.Result_1'(s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.option.NONE_0')))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|60', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeDecl_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.EqualsT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeCons_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDconstructor_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.BarT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDtypeDecl_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|61', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeCons_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.Result_1'(s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.option.NONE_0')))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|62', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.SemicolonT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.empty_1'(s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|63', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.ValT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.EqualsT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.FunT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.ExceptionT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDconstructor_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeDec_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeAbbrevDec_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))))))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|64', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDconstructor_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nUQConstructorName_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.try_1'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.OfT_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nType_0'))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nDconstructor_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|65', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDType_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTbase_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.rpt_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTyOp_0'))),s('fun'('type.list.list'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.list.FLAT_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x1x0x0_3'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'const.list.list_CASE_0'),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_dst_x00x11x00_3'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x0x1_2'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.list.FOLDL_1'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.Nd_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDType_0'))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_dst_x00x10x01_3'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'_i_0_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x1x0_2'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'_dst_x0x1_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.Nd_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDType_0'))))),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x1x0_2'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|66', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nUQConstructorName_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.tok_2'(s('fun'('type.tokens.token','bool'),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.one.one'),'fun'('type.option.option'('type.one.one'),'bool')),'=_0'),s('fun'('type.tokens.token','type.option.option'('type.one.one')),'_dst_x0x1x0_3'(s('fun'('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'fun'('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.one.one')),'type.option.option'('type.one.one'))),'const.option.OPTION_BIND_0'),s('fun'('type.tokens.token','type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')))),'const.tokenUtils.destLongidT_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.one.one')),'const.pair.UNCURRY_1'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one'))),'_dst_x0_1'(s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.one.one')),'_dst_x0x1_2'(s('fun'('bool','type.option.option'('type.one.one')),'const.option.OPTION_GUARD_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|bslash||slash|_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'=_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('type.string.char','bool'),'const.string.isAlpha_0'),s('fun'('type.list.list'('type.string.char'),'type.string.char'),'const.list.HD_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('type.string.char','bool'),'const.string.isUpper_0'),s('fun'('type.list.list'('type.string.char'),'type.string.char'),'const.list.HD_0'))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('fun'('type.list.list'('type.string.char'),'bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.EMPTY_0'))))))))))))))))))))),s('type.option.option'('type.one.one'),'const.option.SOME_1'(s('type.one.one','const.one.one_0'))))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.o_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))),s('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.mktokLf_0'))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|67', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nCompOps_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.SymbolT_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.AlphaT_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nCompOps_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|68', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.peg_linfix_3'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0'))),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.AndT_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_exec_thm|split|69', axiom, ![V_27r_27, V_27nfn_27, V_27k_27, V_27i_27, V_27fk_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAddOps_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.SymbolT_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token','const.tokens.SymbolT_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.bindNT_1'(s('type.gram.MMLnonT','const.gram.nAddOps_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.appf|49|_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27nfn_27),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27k_27))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27fk_27)))).
fof('thm.cmlPEG.cmlPEG_32_prove_ltb', axiom, ![V_27B_27,V_27A_27]: ![V_27fm_27]: s('fun'(V_27A_27,'bool'),'const.finite_map.FRANGE_1'(s('type.finite_map.fmap'(V_27B_27,V_27A_27),V_27fm_27))) = s('fun'(V_27A_27,'bool'),'const.pred_set.IMAGE_2'(s('fun'(V_27B_27,V_27A_27),'const.finite_map.FAPPLY_1'(s('type.finite_map.fmap'(V_27B_27,V_27A_27),V_27fm_27))),s('fun'(V_27B_27,'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(V_27B_27,V_27A_27),V_27fm_27)))))).
fof('thm.cmlPEG.cmlPEG_33_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeDec_0')))))))).
fof('thm.cmlPEG.peg|48|_nTypeDec', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeDec_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_35_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeAbbrevDec_0')))))))).
fof('thm.cmlPEG.peg|48|_nTypeAbbrevDec', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeAbbrevDec_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_37_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nOpID_0')))))))).
fof('thm.cmlPEG.peg|48|_nOpID', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nOpID_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_39_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDecl_0')))))))).
fof('thm.cmlPEG.peg|48|_nDecl', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_4|49|_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nV_0')))))))).
fof('thm.cmlPEG.peg|48|_nV', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nV_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_43_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0')))))))).
fof('thm.cmlPEG.peg|48|_nUQTyOp', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_45_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nUQConstructorName_0')))))))).
fof('thm.cmlPEG.peg|48|_nUQConstructorName', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nUQConstructorName_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_47_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nStructName_0')))))))).
fof('thm.cmlPEG.peg|48|_nStructName', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nStructName_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_49_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0')))))))).
fof('thm.cmlPEG.peg|48|_nConstructorName', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_5|49|_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0')))))))).
fof('thm.cmlPEG.peg|48|_nTypeName', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_53_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDtypeDecl_0')))))))).
fof('thm.cmlPEG.peg|48|_nDtypeDecl', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeDecl_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_55_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDconstructor_0')))))))).
fof('thm.cmlPEG.peg|48|_nDconstructor', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDconstructor_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_57_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0')))))))).
fof('thm.cmlPEG.peg|48|_nFDecl', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_59_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTyvarN_0')))))))).
fof('thm.cmlPEG.peg|48|_nTyvarN', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyvarN_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_6|49|_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTyOp_0')))))))).
fof('thm.cmlPEG.peg|48|_nTyOp', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyOp_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_63_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTbase_0')))))))).
fof('thm.cmlPEG.peg|48|_nTbase', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTbase_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_65_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDType_0')))))))).
fof('thm.cmlPEG.peg|48|_nDType', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDType_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_67_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPType_0')))))))).
fof('thm.cmlPEG.peg|48|_nPType', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPType_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_69_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nType_0')))))))).
fof('thm.cmlPEG.peg|48|_nType', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nType_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_7|49|_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeList|49|_0')))))))).
fof('thm.cmlPEG.peg|48|_nTypeList|49|', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeList|49|_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_73_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeList2_0')))))))).
fof('thm.cmlPEG.peg|48|_nTypeList2', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeList2_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_75_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nRelOps_0')))))))).
fof('thm.cmlPEG.peg|48|_nRelOps', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nRelOps_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_77_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPtuple_0')))))))).
fof('thm.cmlPEG.peg|48|_nPtuple', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPtuple_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_79_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPbase_0')))))))).
fof('thm.cmlPEG.peg|48|_nPbase', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPbase_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_8|49|_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPapp_0')))))))).
fof('thm.cmlPEG.peg|48|_nPapp', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPapp_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_83_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPattern_0')))))))).
fof('thm.cmlPEG.peg|48|_nPattern', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_85_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPatternList_0')))))))).
fof('thm.cmlPEG.peg|48|_nPatternList', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPatternList_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_87_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPbaseList|49|_0')))))))).
fof('thm.cmlPEG.peg|48|_nPbaseList|49|', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPbaseList|49|_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_89_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0')))))))).
fof('thm.cmlPEG.peg|48|_nLetDec', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_9|49|_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nMultOps_0')))))))).
fof('thm.cmlPEG.peg|48|_nMultOps', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nMultOps_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_93_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nListOps_0')))))))).
fof('thm.cmlPEG.peg|48|_nListOps', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nListOps_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_95_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nFQV_0')))))))).
fof('thm.cmlPEG.peg|48|_nFQV', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFQV_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_97_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nAddOps_0')))))))).
fof('thm.cmlPEG.peg|48|_nAddOps', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAddOps_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_99_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nCompOps_0')))))))).
fof('thm.cmlPEG.peg|48|_nCompOps', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nCompOps_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_|49||48||49|_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEbase_0')))))))).
fof('thm.cmlPEG.peg|48|_nEbase', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_|49||48|3_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEapp_0')))))))).
fof('thm.cmlPEG.peg|48|_nEapp', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEapp_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_|49||48|5_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEmult_0')))))))).
fof('thm.cmlPEG.peg|48|_nEmult', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEmult_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_|49||48|7_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEadd_0')))))))).
fof('thm.cmlPEG.peg|48|_nEadd', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEadd_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_|49||48|9_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElistop_0')))))))).
fof('thm.cmlPEG.peg|48|_nElistop', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElistop_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_|49||49||49|_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nErel_0')))))))).
fof('thm.cmlPEG.peg|48|_nErel', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nErel_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_|49||49|3_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEcomp_0')))))))).
fof('thm.cmlPEG.peg|48|_nEcomp', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEcomp_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_|49||49|5_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEbefore_0')))))))).
fof('thm.cmlPEG.peg|48|_nEbefore', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbefore_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_|49||49|7_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEtyped_0')))))))).
fof('thm.cmlPEG.peg|48|_nEtyped', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEtyped_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_|49||49|9_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElogicAND_0')))))))).
fof('thm.cmlPEG.peg|48|_nElogicAND', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_|49|2|49|_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElogicOR_0')))))))).
fof('thm.cmlPEG.peg|48|_nElogicOR', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_|49|23_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEhandle_0')))))))).
fof('thm.cmlPEG.peg|48|_nEhandle', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEhandle_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_|49|25_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0')))))))).
fof('thm.cmlPEG.peg|48|_nE', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_|49|27_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0')))))))).
fof('thm.cmlPEG.peg|48|_nE|39|', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_|49|29_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0')))))))).
fof('thm.cmlPEG.peg|48|_nElist|49|', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_|49|3|49|_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nSpecLine_0')))))))).
fof('thm.cmlPEG.peg|48|_nSpecLine', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSpecLine_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_|49|33_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nStructure_0')))))))).
fof('thm.cmlPEG.peg|48|_nStructure', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nStructure_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.cmlPEG_|49|35_prove_ltb', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDec_0')))))))).
fof('thm.cmlPEG.peg|48|_nTopLevelDec', axiom, ~ (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDec_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0')))))))).
fof('thm.cmlPEG.pegfail_empty', axiom, ![V_27A_27,V_27B_27,V_27C_27]: ![V_27r_27, V_27G_27]: s('bool','const.peg.pegfail_2'(s('type.peg.peg'(V_27A_27,V_27B_27,V_27C_27),V_27G_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,V_27C_27),'const.peg.empty_1'(s(V_27C_27,V_27r_27))))) = s('bool','F_0')).
fof('thm.cmlPEG.peg|48|_empty', axiom, ![V_27A_27,V_27B_27,V_27C_27]: ![V_27r_27, V_27G_27]: s('bool','const.peg.peg|48|_2'(s('type.peg.peg'(V_27A_27,V_27B_27,V_27C_27),V_27G_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,V_27C_27),'const.peg.empty_1'(s(V_27C_27,V_27r_27))))) = s('bool','T_0')).
fof('thm.cmlPEG.peg|48|_not', axiom, ![V_27A_27,V_27B_27,V_27C_27]: ![V_27s_27, V_27r_27, V_27G_27]: s('bool','const.peg.peg|48|_2'(s('type.peg.peg'(V_27A_27,V_27B_27,V_27C_27),V_27G_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,V_27C_27),'const.peg.not_2'(s('type.peg.pegsym'(V_27A_27,V_27B_27,V_27C_27),V_27s_27),s(V_27C_27,V_27r_27))))) = s('bool','const.peg.pegfail_2'(s('type.peg.peg'(V_27A_27,V_27B_27,V_27C_27),V_27G_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,V_27C_27),V_27s_27)))).
fof('thm.cmlPEG.peg|48|_choice', axiom, ![V_27A_27,V_27B_27,V_27C_27]: ![V_27s2_27, V_27s_7c49_7c_27, V_27f_27, V_27G_27]: (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'(V_27A_27,V_27B_27,V_27C_27),V_27G_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,V_27C_27),'const.peg.choice_3'(s('type.peg.pegsym'(V_27A_27,V_27B_27,V_27C_27),V_27s_7c49_7c_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,V_27C_27),V_27s2_27),s('fun'('type.sum.sum'(V_27C_27,V_27C_27),V_27C_27),V_27f_27)))))) <=> (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'(V_27A_27,V_27B_27,V_27C_27),V_27G_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,V_27C_27),V_27s_7c49_7c_27)))) | (p(s('bool','const.peg.pegfail_2'(s('type.peg.peg'(V_27A_27,V_27B_27,V_27C_27),V_27G_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,V_27C_27),V_27s_7c49_7c_27)))) & p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'(V_27A_27,V_27B_27,V_27C_27),V_27G_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,V_27C_27),V_27s2_27)))))))).
fof('thm.cmlPEG.peg|48|_choicel|split|0', axiom, ![V_27A_27,V_27B_27,V_27C_27]: ![V_27G_27]: s('bool','const.peg.peg|48|_2'(s('type.peg.peg'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),V_27G_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27))),'const.list.NIL_0'))))) = s('bool','F_0')).
fof('thm.cmlPEG.peg|48|_choicel|split|1', axiom, ![V_27A_27,V_27B_27,V_27C_27]: ![V_27t_27, V_27h_27, V_27G_27]: (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),V_27G_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27))),'const.list.CONS_2'(s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),V_27h_27),s('type.list.list'('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27))),V_27t_27)))))))) <=> (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),V_27G_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),V_27h_27)))) | (p(s('bool','const.peg.pegfail_2'(s('type.peg.peg'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),V_27G_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),V_27h_27)))) & p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),V_27G_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),'const.cmlPEG.choicel_1'(s('type.list.list'('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27))),V_27t_27)))))))))).
fof('thm.cmlPEG.peg|48|_seq', axiom, ![V_27A_27,V_27B_27,V_27C_27]: ![V_27s2_27, V_27s_7c49_7c_27, V_27f_27, V_27G_27]: (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'(V_27A_27,V_27B_27,V_27C_27),V_27G_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,V_27C_27),'const.peg.seq_3'(s('type.peg.pegsym'(V_27A_27,V_27B_27,V_27C_27),V_27s_7c49_7c_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,V_27C_27),V_27s2_27),s('fun'(V_27C_27,'fun'(V_27C_27,V_27C_27)),V_27f_27)))))) <=> (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'(V_27A_27,V_27B_27,V_27C_27),V_27G_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,V_27C_27),V_27s_7c49_7c_27)))) & p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'(V_27A_27,V_27B_27,V_27C_27),V_27G_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,V_27C_27),V_27s2_27))))))).
fof('thm.cmlPEG.peg|48|_pegf', axiom, ![V_27A_27,V_27B_27,V_27C_27]: ![V_27s_27, V_27f_27, V_27G_27]: s('bool','const.peg.peg|48|_2'(s('type.peg.peg'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),V_27G_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),'const.cmlPEG.pegf_2'(s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),V_27s_27),s('fun'('type.list.list'(V_27C_27),'type.list.list'(V_27C_27)),V_27f_27))))) = s('bool','const.peg.peg|48|_2'(s('type.peg.peg'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),V_27G_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),V_27s_27)))).
fof('thm.cmlPEG.peg|48|_seql|split|0', axiom, ![V_27A_27,V_27B_27,V_27C_27]: ![V_27f_27, V_27G_27]: s('bool','const.peg.peg|48|_2'(s('type.peg.peg'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),V_27G_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27))),'const.list.NIL_0'),s('fun'('type.list.list'(V_27C_27),'type.list.list'(V_27C_27)),V_27f_27))))) = s('bool','T_0')).
fof('thm.cmlPEG.peg|48|_seql|split|1', axiom, ![V_27A_27,V_27B_27,V_27C_27]: ![V_27t_27, V_27h_27, V_27f_27, V_27G_27]: (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),V_27G_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27))),'const.list.CONS_2'(s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),V_27h_27),s('type.list.list'('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27))),V_27t_27))),s('fun'('type.list.list'(V_27C_27),'type.list.list'(V_27C_27)),V_27f_27)))))) <=> (p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),V_27G_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),V_27h_27)))) & p(s('bool','const.peg.peg|48|_2'(s('type.peg.peg'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),V_27G_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27)),'const.cmlPEG.seql_2'(s('type.list.list'('type.peg.pegsym'(V_27A_27,V_27B_27,'type.list.list'(V_27C_27))),V_27t_27),s('fun'('type.list.list'(V_27C_27),'type.list.list'(V_27C_27)),'const.combin.I_0'))))))))).
fof('thm.cmlPEG.peg|48|_tok', axiom, ![V_27B_27,V_27A_27,V_27C_27]: ![V_27f_27, V_27P_27, V_27G_27]: s('bool','const.peg.peg|48|_2'(s('type.peg.peg'(V_27A_27,V_27B_27,V_27C_27),V_27G_27),s('type.peg.pegsym'(V_27A_27,V_27B_27,V_27C_27),'const.peg.tok_2'(s('fun'(V_27A_27,'bool'),V_27P_27),s('fun'(V_27A_27,V_27C_27),V_27f_27))))) = s('bool','F_0')).
fof('thm.cmlPEG.peg|48|_tokeq', axiom, ![V_27A_27]: ![V_27t_27, V_27G_27]: s('bool','const.peg.peg|48|_2'(s('type.peg.peg'('type.tokens.token',V_27A_27,'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),V_27G_27),s('type.peg.pegsym'('type.tokens.token',V_27A_27,'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.tokeq_1'(s('type.tokens.token',V_27t_27))))) = s('bool','F_0')).
fof('thm.cmlPEG.cmlPEG_|49|47_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nV_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|48_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTyvarN_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|49_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeDec_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|5|48|_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeAbbrevDec_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|5|49|_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|52_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|53_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nUQConstructorName_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|54_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nStructName_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|55_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|56_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTyVarList_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|57_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|58_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTyOp_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|59_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTbase_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|6|48|_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDType_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|6|49|_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPType_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|62_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nListOps_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|63_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nRelOps_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|64_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPtuple_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|65_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPbase_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|66_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPapp_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|67_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|68_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPatternList_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|69_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPbaseList|49|_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|7|48|_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPE_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|7|49|_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPE|39|_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|72_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|73_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nMultOps_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|74_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|75_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|76_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nFQV_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|77_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|78_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nAddOps_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|79_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nCompOps_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|8|48|_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nOpID_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|8|49|_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|82_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEapp_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|83_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEmult_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|84_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEadd_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|85_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElistop_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|86_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nErel_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|87_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEcomp_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|88_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEbefore_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|89_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEtyped_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|9|48|_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|9|49|_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|92_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEhandle_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|93_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|94_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|95_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nType_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|96_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeList|49|_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|97_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTypeList2_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|98_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))))))).
fof('thm.cmlPEG.cmlPEG_|49|99_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))))))).
fof('thm.cmlPEG.cmlPEG_2|48||48|_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDtypeDecl_0'))))))).
fof('thm.cmlPEG.cmlPEG_2|48||49|_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nOptTypEqn_0'))))))).
fof('thm.cmlPEG.cmlPEG_2|48|2_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))))))).
fof('thm.cmlPEG.cmlPEG_2|48|3_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nDconstructor_0'))))))).
fof('thm.cmlPEG.cmlPEG_2|48|4_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))))))).
fof('thm.cmlPEG.cmlPEG_2|48|5_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nSpecLine_0'))))))).
fof('thm.cmlPEG.cmlPEG_2|48|6_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))))))).
fof('thm.cmlPEG.cmlPEG_2|48|7_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nSignatureValue_0'))))))).
fof('thm.cmlPEG.cmlPEG_2|48|8_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nOptionalSignatureAscription_0'))))))).
fof('thm.cmlPEG.cmlPEG_2|48|9_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nStructure_0'))))))).
fof('thm.cmlPEG.cmlPEG_2|49||48|_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDec_0'))))))).
fof('thm.cmlPEG.cmlPEG_2|49||49|_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))))))).
fof('thm.cmlPEG.cmlPEG_2|49|2_prove_ltb', axiom, p(s('bool','const.peg.wfpeg_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nNonETopLevelDecs_0'))))))).
fof('thm.cmlPEG.cmlPEG_2|49|4_prove_ltb', axiom, ![V_27A_27,V_27B_27]: ![V_27n_27]: s('fun'('type.peg.pegsym'(V_27A_27,'type.gram.MMLnonT',V_27B_27),'bool'),'const.peg.subexprs_1'(s('type.peg.pegsym'(V_27A_27,'type.gram.MMLnonT',V_27B_27),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT',V_27n_27))))) = s('fun'('type.peg.pegsym'(V_27A_27,'type.gram.MMLnonT',V_27B_27),'bool'),'const.pred_set.INSERT_2'(s('type.peg.pegsym'(V_27A_27,'type.gram.MMLnonT',V_27B_27),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT',V_27n_27))),s('fun'('type.peg.pegsym'(V_27A_27,'type.gram.MMLnonT',V_27B_27),'bool'),'const.pred_set.EMPTY_0')))).
fof('thm.cmlPEG.PEG_wellformed', axiom, p(s('bool','const.peg.wfG_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))).
fof('thm.cmlPEG.parse_TopLevelDecs_total', axiom, ![V_27i_27]: ?[V_27r_27]: s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.peg_exec_6'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.done_0'),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.failed_0'))) = s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.Result_1'(s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27)))).
fof('thm.cmlPEG.coreloop_TopLevelDecs_total', axiom, ![V_27i_27]: ?[V_27r_27]: s('type.option.option'('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pegexec.coreloop_2'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'),s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.EV_5'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))),s('type.list.list'('type.tokens.token'),V_27i_27),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.done_0'),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.failed_0'))))) = s('type.option.option'('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.option.SOME_1'(s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.Result_1'(s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27)))))).
fof('thm.cmlPEG.owhile_TopLevelDecs_total', axiom, ![V_27i_27]: ?[V_27r_27]: s('type.option.option'('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.while.OWHILE_3'(s('fun'('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'_dst_x1x0x0x0x0_5'(s('fun'('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'))))),'fun'('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'bool'))),'fun'('fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'bool'),'fun'('bool','bool'))))),'const.pegexec.evalcase_CASE_0'),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'))))),'_dst_x0_1'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool')))),'_dst_x0_1'(s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'))),'_dst_x0_1'(s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool')),'_dst_x0_1'(s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'_dst_x0_1'(s('bool','T_0'))))))))))),s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'bool'))),'_dst_x0_1'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'bool')),'_dst_x0_1'(s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'bool'),'_dst_x0_1'(s('bool','T_0'))))))),s('fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'bool'),'_dst_x0_1'(s('bool','F_0'))),s('bool','T_0'))),s('fun'('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_dst_x1x0x0x0x0_5'(s('fun'('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))))),'fun'('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'fun'('fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))))),'const.pegexec.evalcase_CASE_0'),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))))),'_dst_x00000x10000x01110x01111x01111x01111x01111x01111x01110x01111_10'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('fun'('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('fun'('fun'('type.tokens.token','bool'),'fun'('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'fun'('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'fun'('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'fun'('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.sum.sum'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'fun'('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.list.list'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'fun'('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))))))))),'const.peg.pegsym_CASE_0'),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_i_0_0'),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'_dst_x0000x0010x1000x0101_4'(s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.pegexec.AP_0'),s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_i_0_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'),s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'_dst_x00x01x10_3'(s('fun'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.option.SOME_0'),s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_i_0_0'))))),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))))),'_dst_x00000x10000x11010x01101_4'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.tokens.token','fun'('type.list.list'('type.tokens.token'),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.list_CASE_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'_dst_x001x100x010_3'(s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.pegexec.AP_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'),s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_i_0_0'))),s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.tokens.token','fun'('type.list.list'('type.tokens.token'),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))))),'_dst_x01001x10110_2'(s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.pegexec.AP_0'),s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.tokens.token','type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'_dst_x000x011x100_3'(s('fun'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('fun'('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.tokens.token','type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.option.SOME_0'),s('fun'('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_i_0_0'))),s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_i_0_0'))))))),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.tokens.token','bool'),'fun'('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))))),'_dst_x000000x100000x110100x111111_4'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.tokens.token','fun'('type.list.list'('type.tokens.token'),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.list_CASE_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'_dst_x001x100x010_3'(s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.pegexec.AP_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'),s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_i_0_0'))),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.tokens.token','bool'),'fun'('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.tokens.token','fun'('type.list.list'('type.tokens.token'),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))))))),'_dst_x00000000x00001010x01100111x11010000_4'(s('fun'('bool','fun'('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.bool.COND_0'),s('fun'('fun'('type.tokens.token','bool'),'fun'('type.tokens.token','bool')),'_i_0_0'),s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.tokens.token','fun'('type.list.list'('type.tokens.token'),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))))),'_dst_x01001x10110_2'(s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.pegexec.AP_0'),s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.tokens.token','type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'_dst_x000x011x100_3'(s('fun'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('fun'('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.tokens.token','type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.option.SOME_0'),s('fun'('fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.tokens.token','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_i_0_0'))),s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_i_0_0'))))),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'_dst_x001x100x010_3'(s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.pegexec.AP_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'),s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_i_0_0'))))))),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))))),'_dst_x000000x000010x111111x000000_4'(s('fun'('bool','fun'('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.bool.COND_0'),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'_dst_x1x0_2'(s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'bool')),'const.bool.IN_0'),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))))),'_dst_x000000x000010x100000x010000x001001x000100_6'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))))),'const.pegexec.EV_0'),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.finite_map.FAPPLY_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'),s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_i_0_0'),s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_dst_x01x10_2'(s('fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'const.pegexec.appf|49|_0'),s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_i_0_0'))),s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_i_0_0'))),s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pegexec.Result_0'),s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.option.NONE_0'))))),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))))))),'_dst_x0000000x0000100x1000000x0100000x1111011x0001000_6'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))))),'const.pegexec.EV_0'),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_i_0_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'),s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_i_0_0'),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))))),'_dst_x000000x000010x001001x110100_4'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.pegexec.ksym_0'),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_i_0_0'),s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_dst_x01x10_2'(s('fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'const.pegexec.appf2_0'),s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_i_0_0'))),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.pegexec.returnTo_0'))),s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_i_0_0'))),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.sum.sum'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))))))),'_dst_x0000000x0000100x1000000x0100000x0010001x1111011_6'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))))),'const.pegexec.EV_0'),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_i_0_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'),s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_i_0_0'),s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.sum.sum'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_dst_x00x01x10_3'(s('fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'const.pegexec.appf|49|_0'),s('fun'('fun'('type.sum.sum'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_dst_x1x0_2'(s('fun'('fun'('type.sum.sum'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.sum.sum'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'const.combin.o_0'),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.sum.sum'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.sum.INL_0'))),s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_i_0_0'))),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.sum.sum'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))))),'_dst_x000000x100000x010000x001111_4'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.pegexec.returnTo_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'),s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_i_0_0'),s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.sum.sum'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'_dst_x0000x0010x1001x0100_4'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.pegexec.ksym_0'),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_i_0_0'),s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.sum.sum'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_dst_x00x01x10_3'(s('fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'const.pegexec.appf|49|_0'),s('fun'('fun'('type.sum.sum'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_dst_x1x0_2'(s('fun'('fun'('type.sum.sum'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.sum.sum'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'const.combin.o_0'),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.sum.sum'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.sum.INR_0'))),s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_i_0_0'))),s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_i_0_0'))))))),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.list.list'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))))),'_dst_x00000x00010x10000x01000x00111x00101_6'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))))),'const.pegexec.EV_0'),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_i_0_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'),s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.option.NONE_0'))),s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.list.list'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'_dst_x011x100_2'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.list.list'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.pegexec.listsym_0'),s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_i_0_0'))),s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.list.list'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_dst_x01x10_2'(s('fun'('fun'('type.list.list'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'const.pegexec.poplist_0'),s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_i_0_0'))))),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))))),'_dst_x000000x000010x100000x010000x110100x111001_6'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))))),'const.pegexec.EV_0'),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_i_0_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'),s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_i_0_0'),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.pegexec.returnTo_0'),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'_dst_x0000x1000x0101x0010_4'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.pegexec.returnTo_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'),s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'_dst_x00x01x10_3'(s('fun'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.option.SOME_0'),s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_i_0_0'))),s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_i_0_0'))))))),s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'_dst_x000x100x011x011x011x000x011x011x011x000_10'(s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'fun'('fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'fun'('fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'fun'('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'fun'('fun'('fun'('type.list.list'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'fun'('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.list.list'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'fun'('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))))))))),'const.pegexec.kont_CASE_0'),s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_i_0_0'),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))))),'_dst_x001x100x010_3'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))))),'const.pegexec.EV_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'),s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_i_0_0'))),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'_dst_x0000x0100x0000x1011_4'(s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.list_CASE_0'),s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_i_0_0'),s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.Looped_0'),s('fun'('type.list.list'('type.tokens.token'),'fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))))),'_dst_x00000x00010x00000x11101_4'(s('fun'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.option.option_CASE_0'),s('fun'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_i_0_0'),s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.Looped_0'),s('fun'('type.list.list'('type.tokens.token'),'fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))))),'_dst_x00000x00100x10000x01011_4'(s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.pegexec.AP_0'),s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_i_0_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'),s('fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'_dst_x000x101x010_3'(s('fun'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.option.SOME_0'),s('fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_i_0_0'))),s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_i_0_0'))))))))),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'_dst_x0000x0100x0000x1011_4'(s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.list_CASE_0'),s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_i_0_0'),s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.Looped_0'),s('fun'('type.list.list'('type.tokens.token'),'fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))))),'_dst_x00001x00000x11110_3'(s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.list_CASE_0'),s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.Looped_0'),s('fun'('type.list.list'('type.tokens.token'),'fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))))),'_dst_x000000x000010x000000x111101_4'(s('fun'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.option.option_CASE_0'),s('fun'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_i_0_0'),s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.Looped_0'),s('fun'('type.list.list'('type.tokens.token'),'fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))))),'_dst_x000000x000100x000000x111011_4'(s('fun'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.option.option_CASE_0'),s('fun'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_i_0_0'),s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.Looped_0'),s('fun'('type.list.list'('type.tokens.token'),'fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))))),'_dst_x000000x001000x100000x010111_4'(s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.pegexec.AP_0'),s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_i_0_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'),s('fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))))),'_dst_x0000x1011x0100_3'(s('fun'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.list.CONS_0'),s('fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'_dst_x000x111_2'(s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.option.SOME_0'),s('fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_i_0_0'))),s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_i_0_0'))))))))))))),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'_dst_x001x100x010_3'(s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.pegexec.AP_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'),s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_i_0_0'))),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('fun'('type.list.list'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'_dst_x0001x1000x0110_3'(s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.pegexec.AP_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'),s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('fun'('type.list.list'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'_dst_x01x10_2'(s('fun'('fun'('type.list.list'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.pegexec.poplistval_0'),s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_i_0_0'))))),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.list.list'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))))),'_dst_x00000x00100x10000x01000x00111x00011_6'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))))),'const.pegexec.EV_0'),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_i_0_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'),s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_i_0_0'),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('fun'('type.list.list'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'const.pegexec.listsym_0'),s('fun'('fun'('type.list.list'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'const.pegexec.poplist_0'))),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'_dst_x00x11_2'(s('fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pegexec.Result_0'),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'_dst_x01x00x10_3'(s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('fun'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.list.list_CASE_0'),s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.option.NONE_0'),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'_dst_x000x010x000x100_4'(s('fun'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'const.option.option_CASE_0'),s('fun'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'_i_0_0'),s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.option.NONE_0'),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'_dst_x00x11_2'(s('fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'const.option.SOME_0'),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'const.pair.,_0'))))))))),s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pegexec.Result_0'),s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.option.NONE_0'))))),s('fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pegexec.Result_0'),s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.Looped_0'))),s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'happ'(s('fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))),'happ'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))))),'happ'(s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'fun'('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))))))),'const.pegexec.EV_0'),s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.pnt_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))))),s('type.list.list'('type.tokens.token'),V_27i_27))),s('type.list.list'('type.option.option'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.list.NIL_0'))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.done_0'))),s('type.pegexec.kont'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.pegexec.failed_0'))))) = s('type.option.option'('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'happ'(s('fun'('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'type.option.option'('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))))),'const.option.SOME_0'),s('type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'type.pegexec.evalcase'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.pegexec.Result_0'),s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),V_27r_27)))))).
fof('thm.cmlPEG.cmlPEG_22|48|_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nV_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_22|49|_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyvarN_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_222_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFQV_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_223_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEapp_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_224_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_225_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nMultOps_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_226_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAddOps_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_227_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nRelOps_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_228_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nListOps_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_229_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nCompOps_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_23|48|_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nOpID_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_23|49|_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_232_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_233_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEmult_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_234_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEadd_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_235_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElistop_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_236_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nErel_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_237_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEcomp_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_238_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbefore_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_239_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEtyped_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_24|48|_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_24|49|_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_242_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEhandle_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_243_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_244_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_245_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_246_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_247_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE|39|_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_248_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_249_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_25|48|_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPbaseList|49|_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_25|49|_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nType_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_252_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDType_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_253_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTbase_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_254_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeList2_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_255_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeList|49|_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_256_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyOp_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_257_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_258_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPType_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_259_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_26|48|_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyVarList_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_26|49|_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeDec_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_262_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeDecl_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_263_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDconstructor_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_264_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nUQConstructorName_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_265_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_266_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPbase_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_267_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPapp_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_268_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_269_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPatternList_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_27|48|_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPtuple_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_27|49|_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_272_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_273_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_274_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeAbbrevDec_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_275_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_276_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nOptTypEqn_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_277_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSpecLine_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_278_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_279_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSignatureValue_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_28|48|_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nOptionalSignatureAscription_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_28|49|_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nStructName_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_282_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nStructure_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_283_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDec_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_284_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.cmlPEG_285_prove_ltb', axiom, p(s('bool','const.bool.IN_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nNonETopLevelDecs_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')))),'const.peg.peg_rules_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|0', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nV_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|1', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyvarN_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|2', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFQV_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|3', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEapp_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|4', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|5', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nMultOps_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|6', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAddOps_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|7', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nRelOps_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|8', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nListOps_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|9', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nCompOps_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|10', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nOpID_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|11', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|12', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|13', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEmult_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|14', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEadd_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|15', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElistop_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|16', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nErel_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|17', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEcomp_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|18', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbefore_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|19', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEtyped_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|20', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|21', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|22', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEhandle_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|23', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|24', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|25', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|26', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|27', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE|39|_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|28', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|29', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|30', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPbaseList|49|_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|31', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nType_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|32', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDType_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|33', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTbase_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|34', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeList2_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|35', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeList|49|_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|36', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyOp_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|37', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|38', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPType_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|39', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|40', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyVarList_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|41', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeDec_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|42', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeDecl_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|43', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDconstructor_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|44', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nUQConstructorName_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|45', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|46', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPbase_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|47', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPapp_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|48', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|49', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPatternList_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|50', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPtuple_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|51', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|52', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|53', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|54', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeAbbrevDec_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|55', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|56', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nOptTypEqn_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|57', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSpecLine_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|58', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|59', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSignatureValue_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|60', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nOptionalSignatureAscription_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|61', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nStructName_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|62', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nStructure_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|63', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDec_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|64', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
fof('thm.cmlPEG.NTS_in_PEG_exprs|split|65', axiom, p(s('bool','const.bool.IN_2'(s('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.peg.nt_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nNonETopLevelDecs_0'))),s('fun'('type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.combin.I_0'))),s('fun'('type.peg.pegsym'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'bool'),'const.peg.Gexprs_1'(s('type.peg.peg'('type.tokens.token','type.gram.MMLnonT','type.list.list'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'))),'const.cmlPEG.cmlPEG_0'))))))).
