fof('thm.pat_to_clos.string_tag_def', axiom, s('type.num.num','const.pat_to_clos.string_tag_0') = s('type.num.num','const.num.|48|_0')).
fof('thm.pat_to_clos.vector_tag_def', axiom, s('type.num.num','const.pat_to_clos.vector_tag_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))).
fof('ARITY_3_4_const.closLang.Fn', axiom, ![VV0, VV1, VV2, VV3]: s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.closLang.Fn_3'(s('type.option.option'('type.num.num'),VV0),s('type.option.option'('type.list.list'('type.num.num')),VV1),s('type.num.num',VV2))),s('type.closLang.exp',VV3))) = s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),VV0),s('type.option.option'('type.list.list'('type.num.num')),VV1),s('type.num.num',VV2),s('type.closLang.exp',VV3)))).
fof('ARITY_0_5_const.ast.opb_CASE', axiom, ![V_27A_27]: ![VV0, VV1, VV2, VV3, VV4]: s(V_27A_27,'happ'(s('fun'(V_27A_27,V_27A_27),'happ'(s('fun'(V_27A_27,'fun'(V_27A_27,V_27A_27)),'happ'(s('fun'(V_27A_27,'fun'(V_27A_27,'fun'(V_27A_27,V_27A_27))),'happ'(s('fun'(V_27A_27,'fun'(V_27A_27,'fun'(V_27A_27,'fun'(V_27A_27,V_27A_27)))),'happ'(s('fun'('type.ast.opb','fun'(V_27A_27,'fun'(V_27A_27,'fun'(V_27A_27,'fun'(V_27A_27,V_27A_27))))),'const.ast.opb_CASE_0'),s('type.ast.opb',VV0))),s(V_27A_27,VV1))),s(V_27A_27,VV2))),s(V_27A_27,VV3))),s(V_27A_27,VV4))) = s(V_27A_27,'const.ast.opb_CASE_5'(s('type.ast.opb',VV0),s(V_27A_27,VV1),s(V_27A_27,VV2),s(V_27A_27,VV3),s(V_27A_27,VV4)))).
fof('ARITY_2_4_const.closLang.Letrec', axiom, ![VV0, VV1, VV2, VV3]: s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'fun'('type.closLang.exp','type.closLang.exp')),'const.closLang.Letrec_2'(s('type.option.option'('type.num.num'),VV0),s('type.option.option'('type.list.list'('type.num.num')),VV1))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),VV2))),s('type.closLang.exp',VV3))) = s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),VV0),s('type.option.option'('type.list.list'('type.num.num')),VV1),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),VV2),s('type.closLang.exp',VV3)))).
fof('ARITY_0_14_const.patLang.exp_CASE', axiom, ![V_27A_27]: ![VV0, VV1, VV2, VV3, VV4, VV5, VV6, VV7, VV8, VV9, VV10, VV11, VV12, VV13]: s(V_27A_27,'happ'(s('fun'('fun'('type.num.num',V_27A_27),V_27A_27),'happ'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.num.num',V_27A_27),V_27A_27)),'happ'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.num.num',V_27A_27),V_27A_27))),'happ'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.num.num',V_27A_27),V_27A_27)))),'happ'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27))),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.num.num',V_27A_27),V_27A_27))))),'happ'(s('fun'('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),V_27A_27)),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27))),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.num.num',V_27A_27),V_27A_27)))))),'happ'(s('fun'('fun'('type.patLang.exp',V_27A_27),'fun'('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),V_27A_27)),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27))),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.num.num',V_27A_27),V_27A_27))))))),'happ'(s('fun'('fun'('type.num.num',V_27A_27),'fun'('fun'('type.patLang.exp',V_27A_27),'fun'('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),V_27A_27)),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27))),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.num.num',V_27A_27),V_27A_27)))))))),'happ'(s('fun'('fun'('type.num.num',V_27A_27),'fun'('fun'('type.num.num',V_27A_27),'fun'('fun'('type.patLang.exp',V_27A_27),'fun'('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),V_27A_27)),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27))),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.num.num',V_27A_27),V_27A_27))))))))),'happ'(s('fun'('fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),V_27A_27)),'fun'('fun'('type.num.num',V_27A_27),'fun'('fun'('type.num.num',V_27A_27),'fun'('fun'('type.patLang.exp',V_27A_27),'fun'('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),V_27A_27)),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27))),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.num.num',V_27A_27),V_27A_27)))))))))),'happ'(s('fun'('fun'('type.ast.lit',V_27A_27),'fun'('fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),V_27A_27)),'fun'('fun'('type.num.num',V_27A_27),'fun'('fun'('type.num.num',V_27A_27),'fun'('fun'('type.patLang.exp',V_27A_27),'fun'('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),V_27A_27)),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27))),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.num.num',V_27A_27),V_27A_27))))))))))),'happ'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.ast.lit',V_27A_27),'fun'('fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),V_27A_27)),'fun'('fun'('type.num.num',V_27A_27),'fun'('fun'('type.num.num',V_27A_27),'fun'('fun'('type.patLang.exp',V_27A_27),'fun'('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),V_27A_27)),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27))),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.num.num',V_27A_27),V_27A_27)))))))))))),'happ'(s('fun'('fun'('type.patLang.exp',V_27A_27),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.ast.lit',V_27A_27),'fun'('fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),V_27A_27)),'fun'('fun'('type.num.num',V_27A_27),'fun'('fun'('type.num.num',V_27A_27),'fun'('fun'('type.patLang.exp',V_27A_27),'fun'('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),V_27A_27)),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27))),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.num.num',V_27A_27),V_27A_27))))))))))))),'happ'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp',V_27A_27),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.ast.lit',V_27A_27),'fun'('fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),V_27A_27)),'fun'('fun'('type.num.num',V_27A_27),'fun'('fun'('type.num.num',V_27A_27),'fun'('fun'('type.patLang.exp',V_27A_27),'fun'('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),V_27A_27)),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27))),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp',V_27A_27)),'fun'('fun'('type.num.num',V_27A_27),V_27A_27)))))))))))))),'const.patLang.exp_CASE_0'),s('type.patLang.exp',VV0))),s('fun'('type.patLang.exp',V_27A_27),VV1))),s('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),VV2))),s('fun'('type.ast.lit',V_27A_27),VV3))),s('fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),V_27A_27)),VV4))),s('fun'('type.num.num',V_27A_27),VV5))),s('fun'('type.num.num',V_27A_27),VV6))),s('fun'('type.patLang.exp',V_27A_27),VV7))),s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),V_27A_27)),VV8))),s('fun'('type.patLang.exp','fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27))),VV9))),s('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),VV10))),s('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),VV11))),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp',V_27A_27)),VV12))),s('fun'('type.num.num',V_27A_27),VV13))) = s(V_27A_27,'const.patLang.exp_CASE_14'(s('type.patLang.exp',VV0),s('fun'('type.patLang.exp',V_27A_27),VV1),s('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),VV2),s('fun'('type.ast.lit',V_27A_27),VV3),s('fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),V_27A_27)),VV4),s('fun'('type.num.num',V_27A_27),VV5),s('fun'('type.num.num',V_27A_27),VV6),s('fun'('type.patLang.exp',V_27A_27),VV7),s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),V_27A_27)),VV8),s('fun'('type.patLang.exp','fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27))),VV9),s('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),VV10),s('fun'('type.patLang.exp','fun'('type.patLang.exp',V_27A_27)),VV11),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp',V_27A_27)),VV12),s('fun'('type.num.num',V_27A_27),VV13)))).
fof('ARITY_0_3_const.conLang.op_CASE', axiom, ![V_27A_27]: ![VV0, VV1, VV2]: s(V_27A_27,'happ'(s('fun'('fun'('type.num.num',V_27A_27),V_27A_27),'happ'(s('fun'('fun'('type.ast.op',V_27A_27),'fun'('fun'('type.num.num',V_27A_27),V_27A_27)),'happ'(s('fun'('type.conLang.op','fun'('fun'('type.ast.op',V_27A_27),'fun'('fun'('type.num.num',V_27A_27),V_27A_27))),'const.conLang.op_CASE_0'),s('type.conLang.op',VV0))),s('fun'('type.ast.op',V_27A_27),VV1))),s('fun'('type.num.num',V_27A_27),VV2))) = s(V_27A_27,'const.conLang.op_CASE_3'(s('type.conLang.op',VV0),s('fun'('type.ast.op',V_27A_27),VV1),s('fun'('type.num.num',V_27A_27),VV2)))).
fof('ARITY_0_6_const.ast.opn_CASE', axiom, ![V_27A_27]: ![VV0, VV1, VV2, VV3, VV4, VV5]: s(V_27A_27,'happ'(s('fun'(V_27A_27,V_27A_27),'happ'(s('fun'(V_27A_27,'fun'(V_27A_27,V_27A_27)),'happ'(s('fun'(V_27A_27,'fun'(V_27A_27,'fun'(V_27A_27,V_27A_27))),'happ'(s('fun'(V_27A_27,'fun'(V_27A_27,'fun'(V_27A_27,'fun'(V_27A_27,V_27A_27)))),'happ'(s('fun'(V_27A_27,'fun'(V_27A_27,'fun'(V_27A_27,'fun'(V_27A_27,'fun'(V_27A_27,V_27A_27))))),'happ'(s('fun'('type.ast.opn','fun'(V_27A_27,'fun'(V_27A_27,'fun'(V_27A_27,'fun'(V_27A_27,'fun'(V_27A_27,V_27A_27)))))),'const.ast.opn_CASE_0'),s('type.ast.opn',VV0))),s(V_27A_27,VV1))),s(V_27A_27,VV2))),s(V_27A_27,VV3))),s(V_27A_27,VV4))),s(V_27A_27,VV5))) = s(V_27A_27,'const.ast.opn_CASE_6'(s('type.ast.opn',VV0),s(V_27A_27,VV1),s(V_27A_27,VV2),s(V_27A_27,VV3),s(V_27A_27,VV4),s(V_27A_27,VV5)))).
fof('ARITY_0_4_const.patLang.op_CASE', axiom, ![V_27A_27]: ![VV0, VV1, VV2, VV3]: s(V_27A_27,'happ'(s('fun'('fun'('type.num.num',V_27A_27),V_27A_27),'happ'(s('fun'('fun'('type.num.num','fun'('type.num.num',V_27A_27)),'fun'('fun'('type.num.num',V_27A_27),V_27A_27)),'happ'(s('fun'('fun'('type.conLang.op',V_27A_27),'fun'('fun'('type.num.num','fun'('type.num.num',V_27A_27)),'fun'('fun'('type.num.num',V_27A_27),V_27A_27))),'happ'(s('fun'('type.patLang.op','fun'('fun'('type.conLang.op',V_27A_27),'fun'('fun'('type.num.num','fun'('type.num.num',V_27A_27)),'fun'('fun'('type.num.num',V_27A_27),V_27A_27)))),'const.patLang.op_CASE_0'),s('type.patLang.op',VV0))),s('fun'('type.conLang.op',V_27A_27),VV1))),s('fun'('type.num.num','fun'('type.num.num',V_27A_27)),VV2))),s('fun'('type.num.num',V_27A_27),VV3))) = s(V_27A_27,'const.patLang.op_CASE_4'(s('type.patLang.op',VV0),s('fun'('type.conLang.op',V_27A_27),VV1),s('fun'('type.num.num','fun'('type.num.num',V_27A_27)),VV2),s('fun'('type.num.num',V_27A_27),VV3)))).
fof('_dst_x1x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0_ax', axiom, ![VA,VA1,VA2,VA3,VA4,VA5,VA6,VA7,VA8,VA9,VA10,VA11,VA12,VA13,VA14,VA15,VA16,VA17,VA18,VA19,VA20,VA21,VA22,VA23,VA24,VA25,VA26,VA27,VA28,VA29,VA30]: ![V__x, V__0, V__1, V__2, V__3, V__4, V__5, V__6, V__7, V__8, V__9, V__10, V__11, V__12, V__13, V__14, V__15, V__16, V__17, V__18, V__19, V__20, V__21, V__22, V__23, V__24, V__25, V__26, V__27, V__28, V__z]: s(VA,'happ'(s('fun'(VA1,VA),'_dst_x1x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0_30'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,'fun'(VA4,'fun'(VA5,'fun'(VA6,'fun'(VA7,'fun'(VA8,'fun'(VA9,'fun'(VA10,'fun'(VA11,'fun'(VA12,'fun'(VA13,'fun'(VA14,'fun'(VA15,'fun'(VA16,'fun'(VA17,'fun'(VA18,'fun'(VA19,'fun'(VA20,'fun'(VA21,'fun'(VA22,'fun'(VA23,'fun'(VA24,'fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,VA)))))))))))))))))))))))))))))),V__x),s(VA2,V__0),s(VA3,V__1),s(VA4,V__2),s(VA5,V__3),s(VA6,V__4),s(VA7,V__5),s(VA8,V__6),s(VA9,V__7),s(VA10,V__8),s(VA11,V__9),s(VA12,V__10),s(VA13,V__11),s(VA14,V__12),s(VA15,V__13),s(VA16,V__14),s(VA17,V__15),s(VA18,V__16),s(VA19,V__17),s(VA20,V__18),s(VA21,V__19),s(VA22,V__20),s(VA23,V__21),s(VA24,V__22),s(VA25,V__23),s(VA26,V__24),s(VA27,V__25),s(VA28,V__26),s(VA29,V__27),s(VA30,V__28))),s(VA1,V__z))) = s(VA,'happ'(s('fun'(VA30,VA),'happ'(s('fun'(VA29,'fun'(VA30,VA)),'happ'(s('fun'(VA28,'fun'(VA29,'fun'(VA30,VA))),'happ'(s('fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,VA)))),'happ'(s('fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,VA))))),'happ'(s('fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,VA)))))),'happ'(s('fun'(VA24,'fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,VA))))))),'happ'(s('fun'(VA23,'fun'(VA24,'fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,VA)))))))),'happ'(s('fun'(VA22,'fun'(VA23,'fun'(VA24,'fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,VA))))))))),'happ'(s('fun'(VA21,'fun'(VA22,'fun'(VA23,'fun'(VA24,'fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,VA)))))))))),'happ'(s('fun'(VA20,'fun'(VA21,'fun'(VA22,'fun'(VA23,'fun'(VA24,'fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,VA))))))))))),'happ'(s('fun'(VA19,'fun'(VA20,'fun'(VA21,'fun'(VA22,'fun'(VA23,'fun'(VA24,'fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,VA)))))))))))),'happ'(s('fun'(VA18,'fun'(VA19,'fun'(VA20,'fun'(VA21,'fun'(VA22,'fun'(VA23,'fun'(VA24,'fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,VA))))))))))))),'happ'(s('fun'(VA17,'fun'(VA18,'fun'(VA19,'fun'(VA20,'fun'(VA21,'fun'(VA22,'fun'(VA23,'fun'(VA24,'fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,VA)))))))))))))),'happ'(s('fun'(VA16,'fun'(VA17,'fun'(VA18,'fun'(VA19,'fun'(VA20,'fun'(VA21,'fun'(VA22,'fun'(VA23,'fun'(VA24,'fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,VA))))))))))))))),'happ'(s('fun'(VA15,'fun'(VA16,'fun'(VA17,'fun'(VA18,'fun'(VA19,'fun'(VA20,'fun'(VA21,'fun'(VA22,'fun'(VA23,'fun'(VA24,'fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,VA)))))))))))))))),'happ'(s('fun'(VA14,'fun'(VA15,'fun'(VA16,'fun'(VA17,'fun'(VA18,'fun'(VA19,'fun'(VA20,'fun'(VA21,'fun'(VA22,'fun'(VA23,'fun'(VA24,'fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,VA))))))))))))))))),'happ'(s('fun'(VA13,'fun'(VA14,'fun'(VA15,'fun'(VA16,'fun'(VA17,'fun'(VA18,'fun'(VA19,'fun'(VA20,'fun'(VA21,'fun'(VA22,'fun'(VA23,'fun'(VA24,'fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,VA)))))))))))))))))),'happ'(s('fun'(VA12,'fun'(VA13,'fun'(VA14,'fun'(VA15,'fun'(VA16,'fun'(VA17,'fun'(VA18,'fun'(VA19,'fun'(VA20,'fun'(VA21,'fun'(VA22,'fun'(VA23,'fun'(VA24,'fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,VA))))))))))))))))))),'happ'(s('fun'(VA11,'fun'(VA12,'fun'(VA13,'fun'(VA14,'fun'(VA15,'fun'(VA16,'fun'(VA17,'fun'(VA18,'fun'(VA19,'fun'(VA20,'fun'(VA21,'fun'(VA22,'fun'(VA23,'fun'(VA24,'fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,VA)))))))))))))))))))),'happ'(s('fun'(VA10,'fun'(VA11,'fun'(VA12,'fun'(VA13,'fun'(VA14,'fun'(VA15,'fun'(VA16,'fun'(VA17,'fun'(VA18,'fun'(VA19,'fun'(VA20,'fun'(VA21,'fun'(VA22,'fun'(VA23,'fun'(VA24,'fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,VA))))))))))))))))))))),'happ'(s('fun'(VA9,'fun'(VA10,'fun'(VA11,'fun'(VA12,'fun'(VA13,'fun'(VA14,'fun'(VA15,'fun'(VA16,'fun'(VA17,'fun'(VA18,'fun'(VA19,'fun'(VA20,'fun'(VA21,'fun'(VA22,'fun'(VA23,'fun'(VA24,'fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,VA)))))))))))))))))))))),'happ'(s('fun'(VA8,'fun'(VA9,'fun'(VA10,'fun'(VA11,'fun'(VA12,'fun'(VA13,'fun'(VA14,'fun'(VA15,'fun'(VA16,'fun'(VA17,'fun'(VA18,'fun'(VA19,'fun'(VA20,'fun'(VA21,'fun'(VA22,'fun'(VA23,'fun'(VA24,'fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,VA))))))))))))))))))))))),'happ'(s('fun'(VA7,'fun'(VA8,'fun'(VA9,'fun'(VA10,'fun'(VA11,'fun'(VA12,'fun'(VA13,'fun'(VA14,'fun'(VA15,'fun'(VA16,'fun'(VA17,'fun'(VA18,'fun'(VA19,'fun'(VA20,'fun'(VA21,'fun'(VA22,'fun'(VA23,'fun'(VA24,'fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,VA)))))))))))))))))))))))),'happ'(s('fun'(VA6,'fun'(VA7,'fun'(VA8,'fun'(VA9,'fun'(VA10,'fun'(VA11,'fun'(VA12,'fun'(VA13,'fun'(VA14,'fun'(VA15,'fun'(VA16,'fun'(VA17,'fun'(VA18,'fun'(VA19,'fun'(VA20,'fun'(VA21,'fun'(VA22,'fun'(VA23,'fun'(VA24,'fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,VA))))))))))))))))))))))))),'happ'(s('fun'(VA5,'fun'(VA6,'fun'(VA7,'fun'(VA8,'fun'(VA9,'fun'(VA10,'fun'(VA11,'fun'(VA12,'fun'(VA13,'fun'(VA14,'fun'(VA15,'fun'(VA16,'fun'(VA17,'fun'(VA18,'fun'(VA19,'fun'(VA20,'fun'(VA21,'fun'(VA22,'fun'(VA23,'fun'(VA24,'fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,VA)))))))))))))))))))))))))),'happ'(s('fun'(VA4,'fun'(VA5,'fun'(VA6,'fun'(VA7,'fun'(VA8,'fun'(VA9,'fun'(VA10,'fun'(VA11,'fun'(VA12,'fun'(VA13,'fun'(VA14,'fun'(VA15,'fun'(VA16,'fun'(VA17,'fun'(VA18,'fun'(VA19,'fun'(VA20,'fun'(VA21,'fun'(VA22,'fun'(VA23,'fun'(VA24,'fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,VA))))))))))))))))))))))))))),'happ'(s('fun'(VA3,'fun'(VA4,'fun'(VA5,'fun'(VA6,'fun'(VA7,'fun'(VA8,'fun'(VA9,'fun'(VA10,'fun'(VA11,'fun'(VA12,'fun'(VA13,'fun'(VA14,'fun'(VA15,'fun'(VA16,'fun'(VA17,'fun'(VA18,'fun'(VA19,'fun'(VA20,'fun'(VA21,'fun'(VA22,'fun'(VA23,'fun'(VA24,'fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,VA)))))))))))))))))))))))))))),'happ'(s('fun'(VA2,'fun'(VA3,'fun'(VA4,'fun'(VA5,'fun'(VA6,'fun'(VA7,'fun'(VA8,'fun'(VA9,'fun'(VA10,'fun'(VA11,'fun'(VA12,'fun'(VA13,'fun'(VA14,'fun'(VA15,'fun'(VA16,'fun'(VA17,'fun'(VA18,'fun'(VA19,'fun'(VA20,'fun'(VA21,'fun'(VA22,'fun'(VA23,'fun'(VA24,'fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,VA))))))))))))))))))))))))))))),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,'fun'(VA4,'fun'(VA5,'fun'(VA6,'fun'(VA7,'fun'(VA8,'fun'(VA9,'fun'(VA10,'fun'(VA11,'fun'(VA12,'fun'(VA13,'fun'(VA14,'fun'(VA15,'fun'(VA16,'fun'(VA17,'fun'(VA18,'fun'(VA19,'fun'(VA20,'fun'(VA21,'fun'(VA22,'fun'(VA23,'fun'(VA24,'fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,VA)))))))))))))))))))))))))))))),V__x),s(VA1,V__z))),s(VA2,V__0))),s(VA3,V__1))),s(VA4,V__2))),s(VA5,V__3))),s(VA6,V__4))),s(VA7,V__5))),s(VA8,V__6))),s(VA9,V__7))),s(VA10,V__8))),s(VA11,V__9))),s(VA12,V__10))),s(VA13,V__11))),s(VA14,V__12))),s(VA15,V__13))),s(VA16,V__14))),s(VA17,V__15))),s(VA18,V__16))),s(VA19,V__17))),s(VA20,V__18))),s(VA21,V__19))),s(VA22,V__20))),s(VA23,V__21))),s(VA24,V__22))),s(VA25,V__23))),s(VA26,V__24))),s(VA27,V__25))),s(VA28,V__26))),s(VA29,V__27))),s(VA30,V__28)))).
fof('_dst_x100001x011110_ax', axiom, ![VA6,VA,VA1,VA2,VA3,VA4,VA5,VA7]: ![V__x, V__0, V__z]: s('fun'(VA2,'fun'(VA3,'fun'(VA4,'fun'(VA5,'fun'(VA6,VA))))),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,'fun'(VA4,'fun'(VA5,'fun'(VA6,VA)))))),'_dst_x100001x011110_2'(s('fun'(VA1,'fun'(VA6,'fun'(VA7,VA))),V__x),s('fun'(VA2,'fun'(VA3,'fun'(VA4,'fun'(VA5,VA7)))),V__0))),s(VA1,V__z))) = s('fun'(VA2,'fun'(VA3,'fun'(VA4,'fun'(VA5,'fun'(VA6,VA))))),'_dst_x00001x11110_2'(s('fun'(VA6,'fun'(VA7,VA)),'happ'(s('fun'(VA1,'fun'(VA6,'fun'(VA7,VA))),V__x),s(VA1,V__z))),s('fun'(VA2,'fun'(VA3,'fun'(VA4,'fun'(VA5,VA7)))),V__0)))).
fof('_dst_x01x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10_ax', axiom, ![VA2,VA,VA3,VA4,VA5,VA6,VA7,VA8,VA9,VA10,VA11,VA12,VA13,VA14,VA15,VA16,VA17,VA18,VA19,VA20,VA21,VA22,VA23,VA24,VA25,VA26,VA27,VA28,VA29,VA30,VA31,VA1]: ![V__x, V__0, V__1, V__2, V__3, V__4, V__5, V__6, V__7, V__8, V__9, V__10, V__11, V__12, V__13, V__14, V__15, V__16, V__17, V__18, V__19, V__20, V__21, V__22, V__23, V__24, V__25, V__26, V__27, V__28, V__z]: s('fun'(VA2,VA),'happ'(s('fun'(VA1,'fun'(VA2,VA)),'_dst_x01x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10_30'(s('fun'(VA2,'fun'(VA3,'fun'(VA4,'fun'(VA5,'fun'(VA6,'fun'(VA7,'fun'(VA8,'fun'(VA9,'fun'(VA10,'fun'(VA11,'fun'(VA12,'fun'(VA13,'fun'(VA14,'fun'(VA15,'fun'(VA16,'fun'(VA17,'fun'(VA18,'fun'(VA19,'fun'(VA20,'fun'(VA21,'fun'(VA22,'fun'(VA23,'fun'(VA24,'fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,'fun'(VA31,VA)))))))))))))))))))))))))))))),V__x),s('fun'(VA1,VA3),V__0),s('fun'(VA1,VA4),V__1),s('fun'(VA1,VA5),V__2),s('fun'(VA1,VA6),V__3),s('fun'(VA1,VA7),V__4),s('fun'(VA1,VA8),V__5),s('fun'(VA1,VA9),V__6),s('fun'(VA1,VA10),V__7),s('fun'(VA1,VA11),V__8),s('fun'(VA1,VA12),V__9),s('fun'(VA1,VA13),V__10),s('fun'(VA1,VA14),V__11),s('fun'(VA1,VA15),V__12),s('fun'(VA1,VA16),V__13),s('fun'(VA1,VA17),V__14),s('fun'(VA1,VA18),V__15),s('fun'(VA1,VA19),V__16),s('fun'(VA1,VA20),V__17),s('fun'(VA1,VA21),V__18),s('fun'(VA1,VA22),V__19),s('fun'(VA1,VA23),V__20),s('fun'(VA1,VA24),V__21),s('fun'(VA1,VA25),V__22),s('fun'(VA1,VA26),V__23),s('fun'(VA1,VA27),V__24),s('fun'(VA1,VA28),V__25),s('fun'(VA1,VA29),V__26),s('fun'(VA1,VA30),V__27),s('fun'(VA1,VA31),V__28))),s(VA1,V__z))) = s('fun'(VA2,VA),'_dst_x1x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0_30'(s('fun'(VA2,'fun'(VA3,'fun'(VA4,'fun'(VA5,'fun'(VA6,'fun'(VA7,'fun'(VA8,'fun'(VA9,'fun'(VA10,'fun'(VA11,'fun'(VA12,'fun'(VA13,'fun'(VA14,'fun'(VA15,'fun'(VA16,'fun'(VA17,'fun'(VA18,'fun'(VA19,'fun'(VA20,'fun'(VA21,'fun'(VA22,'fun'(VA23,'fun'(VA24,'fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,'fun'(VA31,VA)))))))))))))))))))))))))))))),V__x),s(VA3,'happ'(s('fun'(VA1,VA3),V__0),s(VA1,V__z))),s(VA4,'happ'(s('fun'(VA1,VA4),V__1),s(VA1,V__z))),s(VA5,'happ'(s('fun'(VA1,VA5),V__2),s(VA1,V__z))),s(VA6,'happ'(s('fun'(VA1,VA6),V__3),s(VA1,V__z))),s(VA7,'happ'(s('fun'(VA1,VA7),V__4),s(VA1,V__z))),s(VA8,'happ'(s('fun'(VA1,VA8),V__5),s(VA1,V__z))),s(VA9,'happ'(s('fun'(VA1,VA9),V__6),s(VA1,V__z))),s(VA10,'happ'(s('fun'(VA1,VA10),V__7),s(VA1,V__z))),s(VA11,'happ'(s('fun'(VA1,VA11),V__8),s(VA1,V__z))),s(VA12,'happ'(s('fun'(VA1,VA12),V__9),s(VA1,V__z))),s(VA13,'happ'(s('fun'(VA1,VA13),V__10),s(VA1,V__z))),s(VA14,'happ'(s('fun'(VA1,VA14),V__11),s(VA1,V__z))),s(VA15,'happ'(s('fun'(VA1,VA15),V__12),s(VA1,V__z))),s(VA16,'happ'(s('fun'(VA1,VA16),V__13),s(VA1,V__z))),s(VA17,'happ'(s('fun'(VA1,VA17),V__14),s(VA1,V__z))),s(VA18,'happ'(s('fun'(VA1,VA18),V__15),s(VA1,V__z))),s(VA19,'happ'(s('fun'(VA1,VA19),V__16),s(VA1,V__z))),s(VA20,'happ'(s('fun'(VA1,VA20),V__17),s(VA1,V__z))),s(VA21,'happ'(s('fun'(VA1,VA21),V__18),s(VA1,V__z))),s(VA22,'happ'(s('fun'(VA1,VA22),V__19),s(VA1,V__z))),s(VA23,'happ'(s('fun'(VA1,VA23),V__20),s(VA1,V__z))),s(VA24,'happ'(s('fun'(VA1,VA24),V__21),s(VA1,V__z))),s(VA25,'happ'(s('fun'(VA1,VA25),V__22),s(VA1,V__z))),s(VA26,'happ'(s('fun'(VA1,VA26),V__23),s(VA1,V__z))),s(VA27,'happ'(s('fun'(VA1,VA27),V__24),s(VA1,V__z))),s(VA28,'happ'(s('fun'(VA1,VA28),V__25),s(VA1,V__z))),s(VA29,'happ'(s('fun'(VA1,VA29),V__26),s(VA1,V__z))),s(VA30,'happ'(s('fun'(VA1,VA30),V__27),s(VA1,V__z))),s(VA31,'happ'(s('fun'(VA1,VA31),V__28),s(VA1,V__z)))))).
fof('_dst_x01x10x10x10x10x10_ax', axiom, ![VA2,VA,VA3,VA4,VA5,VA6,VA7,VA1]: ![V__x, V__0, V__1, V__2, V__3, V__4, V__z]: s('fun'(VA2,VA),'happ'(s('fun'(VA1,'fun'(VA2,VA)),'_dst_x01x10x10x10x10x10_6'(s('fun'(VA2,'fun'(VA3,'fun'(VA4,'fun'(VA5,'fun'(VA6,'fun'(VA7,VA)))))),V__x),s('fun'(VA1,VA3),V__0),s('fun'(VA1,VA4),V__1),s('fun'(VA1,VA5),V__2),s('fun'(VA1,VA6),V__3),s('fun'(VA1,VA7),V__4))),s(VA1,V__z))) = s('fun'(VA2,VA),'_dst_x1x0x0x0x0x0_6'(s('fun'(VA2,'fun'(VA3,'fun'(VA4,'fun'(VA5,'fun'(VA6,'fun'(VA7,VA)))))),V__x),s(VA3,'happ'(s('fun'(VA1,VA3),V__0),s(VA1,V__z))),s(VA4,'happ'(s('fun'(VA1,VA4),V__1),s(VA1,V__z))),s(VA5,'happ'(s('fun'(VA1,VA5),V__2),s(VA1,V__z))),s(VA6,'happ'(s('fun'(VA1,VA6),V__3),s(VA1,V__z))),s(VA7,'happ'(s('fun'(VA1,VA7),V__4),s(VA1,V__z)))))).
fof('_dst_x01x10x10x10x10_ax', axiom, ![VA2,VA,VA3,VA4,VA5,VA6,VA1]: ![V__x, V__0, V__1, V__2, V__3, V__z]: s('fun'(VA2,VA),'happ'(s('fun'(VA1,'fun'(VA2,VA)),'_dst_x01x10x10x10x10_5'(s('fun'(VA2,'fun'(VA3,'fun'(VA4,'fun'(VA5,'fun'(VA6,VA))))),V__x),s('fun'(VA1,VA3),V__0),s('fun'(VA1,VA4),V__1),s('fun'(VA1,VA5),V__2),s('fun'(VA1,VA6),V__3))),s(VA1,V__z))) = s('fun'(VA2,VA),'_dst_x1x0x0x0x0_5'(s('fun'(VA2,'fun'(VA3,'fun'(VA4,'fun'(VA5,'fun'(VA6,VA))))),V__x),s(VA3,'happ'(s('fun'(VA1,VA3),V__0),s(VA1,V__z))),s(VA4,'happ'(s('fun'(VA1,VA4),V__1),s(VA1,V__z))),s(VA5,'happ'(s('fun'(VA1,VA5),V__2),s(VA1,V__z))),s(VA6,'happ'(s('fun'(VA1,VA6),V__3),s(VA1,V__z)))))).
fof('_dst_x01x10x10x00x10x00x00x10x10x10x10x10x10x00_ax', axiom, ![VA2,VA,VA3,VA4,VA5,VA6,VA7,VA8,VA9,VA10,VA11,VA12,VA13,VA14,VA1,VA15]: ![V__x, V__0, V__1, V__2, V__3, V__4, V__5, V__6, V__7, V__8, V__9, V__10, V__11, V__12, V__z]: s('fun'(VA2,VA),'happ'(s('fun'(VA1,'fun'(VA2,VA)),'_dst_x01x10x10x00x10x00x00x10x10x10x10x10x10x00_14'(s('fun'(VA2,'fun'(VA3,'fun'(VA4,'fun'(VA5,'fun'(VA6,'fun'(VA7,'fun'(VA8,'fun'(VA9,'fun'(VA10,'fun'(VA11,'fun'(VA12,'fun'(VA13,'fun'(VA14,'fun'(VA15,VA)))))))))))))),V__x),s('fun'(VA1,VA3),V__0),s('fun'(VA1,VA4),V__1),s(VA5,V__2),s('fun'(VA1,VA6),V__3),s(VA7,V__4),s(VA8,V__5),s('fun'(VA1,VA9),V__6),s('fun'(VA1,VA10),V__7),s('fun'(VA1,VA11),V__8),s('fun'(VA1,VA12),V__9),s('fun'(VA1,VA13),V__10),s('fun'(VA1,VA14),V__11),s(VA15,V__12))),s(VA1,V__z))) = s('fun'(VA2,VA),'_dst_x1x0x0x0x0x0x0x0x0x0x0x0x0x0_14'(s('fun'(VA2,'fun'(VA3,'fun'(VA4,'fun'(VA5,'fun'(VA6,'fun'(VA7,'fun'(VA8,'fun'(VA9,'fun'(VA10,'fun'(VA11,'fun'(VA12,'fun'(VA13,'fun'(VA14,'fun'(VA15,VA)))))))))))))),V__x),s(VA3,'happ'(s('fun'(VA1,VA3),V__0),s(VA1,V__z))),s(VA4,'happ'(s('fun'(VA1,VA4),V__1),s(VA1,V__z))),s(VA5,V__2),s(VA6,'happ'(s('fun'(VA1,VA6),V__3),s(VA1,V__z))),s(VA7,V__4),s(VA8,V__5),s(VA9,'happ'(s('fun'(VA1,VA9),V__6),s(VA1,V__z))),s(VA10,'happ'(s('fun'(VA1,VA10),V__7),s(VA1,V__z))),s(VA11,'happ'(s('fun'(VA1,VA11),V__8),s(VA1,V__z))),s(VA12,'happ'(s('fun'(VA1,VA12),V__9),s(VA1,V__z))),s(VA13,'happ'(s('fun'(VA1,VA13),V__10),s(VA1,V__z))),s(VA14,'happ'(s('fun'(VA1,VA14),V__11),s(VA1,V__z))),s(VA15,V__12)))).
fof('_dst_x00x10x10x11_ax', axiom, ![VA,VA3,VA4,VA2,VA5,VA1]: ![V__x, V__0, V__1, V__2, V__z]: s('fun'(VA2,VA),'happ'(s('fun'(VA1,'fun'(VA2,VA)),'_dst_x00x10x10x11_4'(s('fun'(VA3,'fun'(VA4,'fun'(VA5,VA))),V__x),s('fun'(VA1,VA3),V__0),s('fun'(VA1,VA4),V__1),s('fun'(VA1,'fun'(VA2,VA5)),V__2))),s(VA1,V__z))) = s('fun'(VA2,VA),'_dst_x0x0x0x1_4'(s('fun'(VA3,'fun'(VA4,'fun'(VA5,VA))),V__x),s(VA3,'happ'(s('fun'(VA1,VA3),V__0),s(VA1,V__z))),s(VA4,'happ'(s('fun'(VA1,VA4),V__1),s(VA1,V__z))),s('fun'(VA2,VA5),'happ'(s('fun'(VA1,'fun'(VA2,VA5)),V__2),s(VA1,V__z)))))).
fof('_dst_x001x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110_ax', axiom, ![VA3,VA,VA4,VA5,VA6,VA7,VA8,VA9,VA10,VA11,VA12,VA13,VA14,VA15,VA16,VA17,VA18,VA19,VA20,VA21,VA22,VA23,VA24,VA25,VA26,VA27,VA28,VA29,VA30,VA31,VA2,VA32,VA1]: ![V__x, V__0, V__1, V__2, V__3, V__4, V__5, V__6, V__7, V__8, V__9, V__10, V__11, V__12, V__13, V__14, V__15, V__16, V__17, V__18, V__19, V__20, V__21, V__22, V__23, V__24, V__25, V__26, V__27, V__28, V__z]: s('fun'(VA2,'fun'(VA3,VA)),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA))),'_dst_x001x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110_30'(s('fun'(VA3,'fun'(VA4,'fun'(VA5,'fun'(VA6,'fun'(VA7,'fun'(VA8,'fun'(VA9,'fun'(VA10,'fun'(VA11,'fun'(VA12,'fun'(VA13,'fun'(VA14,'fun'(VA15,'fun'(VA16,'fun'(VA17,'fun'(VA18,'fun'(VA19,'fun'(VA20,'fun'(VA21,'fun'(VA22,'fun'(VA23,'fun'(VA24,'fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,'fun'(VA31,'fun'(VA32,VA)))))))))))))))))))))))))))))),V__x),s('fun'(VA1,'fun'(VA2,VA4)),V__0),s('fun'(VA1,'fun'(VA2,VA5)),V__1),s('fun'(VA1,'fun'(VA2,VA6)),V__2),s('fun'(VA1,'fun'(VA2,VA7)),V__3),s('fun'(VA1,'fun'(VA2,VA8)),V__4),s('fun'(VA1,'fun'(VA2,VA9)),V__5),s('fun'(VA1,'fun'(VA2,VA10)),V__6),s('fun'(VA1,'fun'(VA2,VA11)),V__7),s('fun'(VA1,'fun'(VA2,VA12)),V__8),s('fun'(VA1,'fun'(VA2,VA13)),V__9),s('fun'(VA1,'fun'(VA2,VA14)),V__10),s('fun'(VA1,'fun'(VA2,VA15)),V__11),s('fun'(VA1,'fun'(VA2,VA16)),V__12),s('fun'(VA1,'fun'(VA2,VA17)),V__13),s('fun'(VA1,'fun'(VA2,VA18)),V__14),s('fun'(VA1,'fun'(VA2,VA19)),V__15),s('fun'(VA1,'fun'(VA2,VA20)),V__16),s('fun'(VA1,'fun'(VA2,VA21)),V__17),s('fun'(VA1,'fun'(VA2,VA22)),V__18),s('fun'(VA1,'fun'(VA2,VA23)),V__19),s('fun'(VA1,'fun'(VA2,VA24)),V__20),s('fun'(VA1,'fun'(VA2,VA25)),V__21),s('fun'(VA1,'fun'(VA2,VA26)),V__22),s('fun'(VA1,'fun'(VA2,VA27)),V__23),s('fun'(VA1,'fun'(VA2,VA28)),V__24),s('fun'(VA1,'fun'(VA2,VA29)),V__25),s('fun'(VA1,'fun'(VA2,VA30)),V__26),s('fun'(VA1,'fun'(VA2,VA31)),V__27),s('fun'(VA1,'fun'(VA2,VA32)),V__28))),s(VA1,V__z))) = s('fun'(VA2,'fun'(VA3,VA)),'_dst_x01x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10x10_30'(s('fun'(VA3,'fun'(VA4,'fun'(VA5,'fun'(VA6,'fun'(VA7,'fun'(VA8,'fun'(VA9,'fun'(VA10,'fun'(VA11,'fun'(VA12,'fun'(VA13,'fun'(VA14,'fun'(VA15,'fun'(VA16,'fun'(VA17,'fun'(VA18,'fun'(VA19,'fun'(VA20,'fun'(VA21,'fun'(VA22,'fun'(VA23,'fun'(VA24,'fun'(VA25,'fun'(VA26,'fun'(VA27,'fun'(VA28,'fun'(VA29,'fun'(VA30,'fun'(VA31,'fun'(VA32,VA)))))))))))))))))))))))))))))),V__x),s('fun'(VA2,VA4),'happ'(s('fun'(VA1,'fun'(VA2,VA4)),V__0),s(VA1,V__z))),s('fun'(VA2,VA5),'happ'(s('fun'(VA1,'fun'(VA2,VA5)),V__1),s(VA1,V__z))),s('fun'(VA2,VA6),'happ'(s('fun'(VA1,'fun'(VA2,VA6)),V__2),s(VA1,V__z))),s('fun'(VA2,VA7),'happ'(s('fun'(VA1,'fun'(VA2,VA7)),V__3),s(VA1,V__z))),s('fun'(VA2,VA8),'happ'(s('fun'(VA1,'fun'(VA2,VA8)),V__4),s(VA1,V__z))),s('fun'(VA2,VA9),'happ'(s('fun'(VA1,'fun'(VA2,VA9)),V__5),s(VA1,V__z))),s('fun'(VA2,VA10),'happ'(s('fun'(VA1,'fun'(VA2,VA10)),V__6),s(VA1,V__z))),s('fun'(VA2,VA11),'happ'(s('fun'(VA1,'fun'(VA2,VA11)),V__7),s(VA1,V__z))),s('fun'(VA2,VA12),'happ'(s('fun'(VA1,'fun'(VA2,VA12)),V__8),s(VA1,V__z))),s('fun'(VA2,VA13),'happ'(s('fun'(VA1,'fun'(VA2,VA13)),V__9),s(VA1,V__z))),s('fun'(VA2,VA14),'happ'(s('fun'(VA1,'fun'(VA2,VA14)),V__10),s(VA1,V__z))),s('fun'(VA2,VA15),'happ'(s('fun'(VA1,'fun'(VA2,VA15)),V__11),s(VA1,V__z))),s('fun'(VA2,VA16),'happ'(s('fun'(VA1,'fun'(VA2,VA16)),V__12),s(VA1,V__z))),s('fun'(VA2,VA17),'happ'(s('fun'(VA1,'fun'(VA2,VA17)),V__13),s(VA1,V__z))),s('fun'(VA2,VA18),'happ'(s('fun'(VA1,'fun'(VA2,VA18)),V__14),s(VA1,V__z))),s('fun'(VA2,VA19),'happ'(s('fun'(VA1,'fun'(VA2,VA19)),V__15),s(VA1,V__z))),s('fun'(VA2,VA20),'happ'(s('fun'(VA1,'fun'(VA2,VA20)),V__16),s(VA1,V__z))),s('fun'(VA2,VA21),'happ'(s('fun'(VA1,'fun'(VA2,VA21)),V__17),s(VA1,V__z))),s('fun'(VA2,VA22),'happ'(s('fun'(VA1,'fun'(VA2,VA22)),V__18),s(VA1,V__z))),s('fun'(VA2,VA23),'happ'(s('fun'(VA1,'fun'(VA2,VA23)),V__19),s(VA1,V__z))),s('fun'(VA2,VA24),'happ'(s('fun'(VA1,'fun'(VA2,VA24)),V__20),s(VA1,V__z))),s('fun'(VA2,VA25),'happ'(s('fun'(VA1,'fun'(VA2,VA25)),V__21),s(VA1,V__z))),s('fun'(VA2,VA26),'happ'(s('fun'(VA1,'fun'(VA2,VA26)),V__22),s(VA1,V__z))),s('fun'(VA2,VA27),'happ'(s('fun'(VA1,'fun'(VA2,VA27)),V__23),s(VA1,V__z))),s('fun'(VA2,VA28),'happ'(s('fun'(VA1,'fun'(VA2,VA28)),V__24),s(VA1,V__z))),s('fun'(VA2,VA29),'happ'(s('fun'(VA1,'fun'(VA2,VA29)),V__25),s(VA1,V__z))),s('fun'(VA2,VA30),'happ'(s('fun'(VA1,'fun'(VA2,VA30)),V__26),s(VA1,V__z))),s('fun'(VA2,VA31),'happ'(s('fun'(VA1,'fun'(VA2,VA31)),V__27),s(VA1,V__z))),s('fun'(VA2,VA32),'happ'(s('fun'(VA1,'fun'(VA2,VA32)),V__28),s(VA1,V__z)))))).
fof('_dst_x001x110x110x110x110x110_ax', axiom, ![VA3,VA,VA4,VA5,VA6,VA7,VA2,VA8,VA1]: ![V__x, V__0, V__1, V__2, V__3, V__4, V__z]: s('fun'(VA2,'fun'(VA3,VA)),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA))),'_dst_x001x110x110x110x110x110_6'(s('fun'(VA3,'fun'(VA4,'fun'(VA5,'fun'(VA6,'fun'(VA7,'fun'(VA8,VA)))))),V__x),s('fun'(VA1,'fun'(VA2,VA4)),V__0),s('fun'(VA1,'fun'(VA2,VA5)),V__1),s('fun'(VA1,'fun'(VA2,VA6)),V__2),s('fun'(VA1,'fun'(VA2,VA7)),V__3),s('fun'(VA1,'fun'(VA2,VA8)),V__4))),s(VA1,V__z))) = s('fun'(VA2,'fun'(VA3,VA)),'_dst_x01x10x10x10x10x10_6'(s('fun'(VA3,'fun'(VA4,'fun'(VA5,'fun'(VA6,'fun'(VA7,'fun'(VA8,VA)))))),V__x),s('fun'(VA2,VA4),'happ'(s('fun'(VA1,'fun'(VA2,VA4)),V__0),s(VA1,V__z))),s('fun'(VA2,VA5),'happ'(s('fun'(VA1,'fun'(VA2,VA5)),V__1),s(VA1,V__z))),s('fun'(VA2,VA6),'happ'(s('fun'(VA1,'fun'(VA2,VA6)),V__2),s(VA1,V__z))),s('fun'(VA2,VA7),'happ'(s('fun'(VA1,'fun'(VA2,VA7)),V__3),s(VA1,V__z))),s('fun'(VA2,VA8),'happ'(s('fun'(VA1,'fun'(VA2,VA8)),V__4),s(VA1,V__z)))))).
fof('_dst_x001x110x110x110x110_ax', axiom, ![VA3,VA,VA4,VA5,VA6,VA2,VA7,VA1]: ![V__x, V__0, V__1, V__2, V__3, V__z]: s('fun'(VA2,'fun'(VA3,VA)),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA))),'_dst_x001x110x110x110x110_5'(s('fun'(VA3,'fun'(VA4,'fun'(VA5,'fun'(VA6,'fun'(VA7,VA))))),V__x),s('fun'(VA1,'fun'(VA2,VA4)),V__0),s('fun'(VA1,'fun'(VA2,VA5)),V__1),s('fun'(VA1,'fun'(VA2,VA6)),V__2),s('fun'(VA1,'fun'(VA2,VA7)),V__3))),s(VA1,V__z))) = s('fun'(VA2,'fun'(VA3,VA)),'_dst_x01x10x10x10x10_5'(s('fun'(VA3,'fun'(VA4,'fun'(VA5,'fun'(VA6,'fun'(VA7,VA))))),V__x),s('fun'(VA2,VA4),'happ'(s('fun'(VA1,'fun'(VA2,VA4)),V__0),s(VA1,V__z))),s('fun'(VA2,VA5),'happ'(s('fun'(VA1,'fun'(VA2,VA5)),V__1),s(VA1,V__z))),s('fun'(VA2,VA6),'happ'(s('fun'(VA1,'fun'(VA2,VA6)),V__2),s(VA1,V__z))),s('fun'(VA2,VA7),'happ'(s('fun'(VA1,'fun'(VA2,VA7)),V__3),s(VA1,V__z)))))).
fof('_dst_x000x010x110x111_ax', axiom, ![VA,VA4,VA5,VA2,VA3,VA6,VA1]: ![V__x, V__0, V__1, V__2, V__z]: s('fun'(VA2,'fun'(VA3,VA)),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA))),'_dst_x000x010x110x111_4'(s('fun'(VA4,'fun'(VA5,'fun'(VA6,VA))),V__x),s('fun'(VA2,VA4),V__0),s('fun'(VA1,'fun'(VA2,VA5)),V__1),s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA6))),V__2))),s(VA1,V__z))) = s('fun'(VA2,'fun'(VA3,VA)),'_dst_x00x10x10x11_4'(s('fun'(VA4,'fun'(VA5,'fun'(VA6,VA))),V__x),s('fun'(VA2,VA4),V__0),s('fun'(VA2,VA5),'happ'(s('fun'(VA1,'fun'(VA2,VA5)),V__1),s(VA1,V__z))),s('fun'(VA2,'fun'(VA3,VA6)),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA6))),V__2),s(VA1,V__z)))))).
fof('_dst_x000x010x101x101x101_ax', axiom, ![VA,VA2,VA4,VA5,VA6,VA3,VA7,VA1]: ![V__x, V__0, V__1, V__2, V__3, V__z]: s('fun'(VA2,'fun'(VA3,VA)),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA))),'_dst_x000x010x101x101x101_5'(s('fun'(VA4,'fun'(VA5,'fun'(VA6,'fun'(VA7,VA)))),V__x),s('fun'(VA2,VA4),V__0),s('fun'(VA1,'fun'(VA3,VA5)),V__1),s('fun'(VA1,'fun'(VA3,VA6)),V__2),s('fun'(VA1,'fun'(VA3,VA7)),V__3))),s(VA1,V__z))) = s('fun'(VA2,'fun'(VA3,VA)),'_dst_x00x10x01x01x01_5'(s('fun'(VA4,'fun'(VA5,'fun'(VA6,'fun'(VA7,VA)))),V__x),s('fun'(VA2,VA4),V__0),s('fun'(VA3,VA5),'happ'(s('fun'(VA1,'fun'(VA3,VA5)),V__1),s(VA1,V__z))),s('fun'(VA3,VA6),'happ'(s('fun'(VA1,'fun'(VA3,VA6)),V__2),s(VA1,V__z))),s('fun'(VA3,VA7),'happ'(s('fun'(VA1,'fun'(VA3,VA7)),V__3),s(VA1,V__z)))))).
fof('_dst_x0000x1100x1010x1001_ax', axiom, ![VA,VA2,VA5,VA3,VA6,VA4,VA7,VA1]: ![V__x, V__0, V__1, V__2, V__z]: s('fun'(VA2,'fun'(VA3,'fun'(VA4,VA))),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,'fun'(VA4,VA)))),'_dst_x0000x1100x1010x1001_4'(s('fun'(VA5,'fun'(VA6,'fun'(VA7,VA))),V__x),s('fun'(VA1,'fun'(VA2,VA5)),V__0),s('fun'(VA1,'fun'(VA3,VA6)),V__1),s('fun'(VA1,'fun'(VA4,VA7)),V__2))),s(VA1,V__z))) = s('fun'(VA2,'fun'(VA3,'fun'(VA4,VA))),'_dst_x000x100x010x001_4'(s('fun'(VA5,'fun'(VA6,'fun'(VA7,VA))),V__x),s('fun'(VA2,VA5),'happ'(s('fun'(VA1,'fun'(VA2,VA5)),V__0),s(VA1,V__z))),s('fun'(VA3,VA6),'happ'(s('fun'(VA1,'fun'(VA3,VA6)),V__1),s(VA1,V__z))),s('fun'(VA4,VA7),'happ'(s('fun'(VA1,'fun'(VA4,VA7)),V__2),s(VA1,V__z)))))).
fof('thm.pat_to_clos.compile_primitive_def', axiom, s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0') = s('fun'('type.patLang.exp','type.closLang.exp'),'const.relation.WFREC_2'(s('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'const.min.@_1'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'const.relation.WF_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','bool')),'_dst_x11x01_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.patLang.exp','type.patLang.exp'),'const.patLang.Raise_0'))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_dst_x101x011_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.patLang.exp','fun'('type.patLang.exp','type.patLang.exp')),'const.patLang.Handle_0'))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_dst_x101x011_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.patLang.exp','fun'('type.patLang.exp','type.patLang.exp')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('type.patLang.exp','type.patLang.exp')),'const.patLang.Handle_0'),s('fun'('type.patLang.exp','type.patLang.exp'),'_i_0_0'))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.num.num','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','bool')),'_dst_x00x11_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'bool'))),'_dst_x000x111_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')))),'_dst_x0000x0011x1111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')))),'_dst_x1001x0110_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.Con_0'))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','bool')),'_dst_x11x01_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.patLang.exp','type.patLang.exp'),'const.patLang.Fun_0'))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x01x11_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1x0_3'(s('fun'('type.num.num','fun'('type.num.num','bool')),'=_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dstsel_0_x01x01_2'(s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'const.list.EL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Opapp_0'))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x01x11_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1x0_3'(s('fun'('type.num.num','fun'('type.num.num','bool')),'=_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dstsel_0_x01x01_2'(s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Opapp_0'))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x00x10x11_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1x0_3'(s('fun'('type.num.num','fun'('type.num.num','bool')),'=_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Opapp_0'))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Plus_0'))))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Minus_0'))))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Divide_0'))))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Modulo_0'))))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.ast.opw','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.ast.opw','bool')),'_dst_x00x11_2'(s('fun'('fun'('type.ast.word_size','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.ast.opw','fun'('type.ast.word_size','bool'))),'_dst_x000x111_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.ast.opw','fun'('type.ast.word_size','fun'('type.list.list'('type.patLang.exp'),'bool')))),'_dst_x0000x1111_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.ast.opw','fun'('type.ast.word_size','fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))))),'_dst_x00000x00011x11111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.ast.opw','fun'('type.ast.word_size','fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))))),'_dst_x10001x01110_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.ast.opw','fun'('type.ast.word_size','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'))),'_dst_x00x11_2'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('fun'('type.ast.opw','fun'('type.ast.word_size','type.patLang.op')),'_dst_x00x11_2'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('fun'('type.ast.opw','fun'('type.ast.word_size','type.conLang.op')),'_dst_x00x11_2'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('fun'('type.ast.opw','fun'('type.ast.word_size','type.ast.op')),'_dst_x01x10_2'(s('fun'('type.ast.word_size','fun'('type.ast.opw','type.ast.op')),'const.ast.Opw_0'),s('fun'('type.ast.opw','type.ast.opw'),'_i_0_0'))))))))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.num.num','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','bool')),'_dst_x00x11_2'(s('fun'('fun'('type.ast.shift','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','fun'('type.ast.shift','bool'))),'_dst_x000x111_2'(s('fun'('fun'('type.ast.word_size','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','fun'('type.ast.shift','fun'('type.ast.word_size','bool')))),'_dst_x0000x1111_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','fun'('type.ast.shift','fun'('type.ast.word_size','fun'('type.list.list'('type.patLang.exp'),'bool'))))),'_dst_x00000x11111_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','fun'('type.ast.shift','fun'('type.ast.word_size','fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')))))),'_dst_x000000x000011x111111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','fun'('type.ast.shift','fun'('type.ast.word_size','fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')))))),'_dst_x100001x011110_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.num.num','fun'('type.ast.shift','fun'('type.ast.word_size','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')))),'_dst_x000x111_2'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('fun'('type.num.num','fun'('type.ast.shift','fun'('type.ast.word_size','type.patLang.op'))),'_dst_x000x111_2'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('fun'('type.num.num','fun'('type.ast.shift','fun'('type.ast.word_size','type.conLang.op'))),'_dst_x000x111_2'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('fun'('type.num.num','fun'('type.ast.shift','fun'('type.ast.word_size','type.ast.op'))),'_dst_x001x010x100_3'(s('fun'('type.ast.word_size','fun'('type.ast.shift','fun'('type.num.num','type.ast.op'))),'const.ast.Shift_0'),s('fun'('type.ast.shift','type.ast.shift'),'_i_0_0'),s('fun'('type.num.num','type.num.num'),'_i_0_0'))))))))))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Lt_0'))))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Gt_0'))))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Leq_0'))))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Geq_0'))))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Chopb_1'(s('type.ast.opb','const.ast.Lt_0'))))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Chopb_1'(s('type.ast.opb','const.ast.Gt_0'))))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Chopb_1'(s('type.ast.opb','const.ast.Leq_0'))))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Chopb_1'(s('type.ast.opb','const.ast.Geq_0'))))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Equality_0'))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x01x11_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1x0_3'(s('fun'('type.num.num','fun'('type.num.num','bool')),'=_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dstsel_0_x01x01_2'(s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'const.list.EL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Opassign_0'))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x01x11_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1x0_3'(s('fun'('type.num.num','fun'('type.num.num','bool')),'=_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dstsel_0_x01x01_2'(s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Opassign_0'))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x00x10x11_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1x0_3'(s('fun'('type.num.num','fun'('type.num.num','bool')),'=_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Opassign_0'))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Opderef_0'))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Opref_0'))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.WordFromInt_1'(s('type.ast.word_size','const.ast.W8_0'))))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.WordFromInt_1'(s('type.ast.word_size','const.ast.W64_0'))))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x01x11_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1x0_3'(s('fun'('type.num.num','fun'('type.num.num','bool')),'=_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dstsel_0_x01x01_2'(s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'const.list.HD_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.WordToInt_1'(s('type.ast.word_size','const.ast.W8_0'))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x00x10x11_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1x0_3'(s('fun'('type.num.num','fun'('type.num.num','bool')),'=_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.WordToInt_1'(s('type.ast.word_size','const.ast.W8_0'))))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.WordToInt_1'(s('type.ast.word_size','const.ast.W64_0'))))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x01x11_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1x0_3'(s('fun'('type.num.num','fun'('type.num.num','bool')),'=_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dstsel_0_x01x01_2'(s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'const.list.HD_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Ord_0'))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x00x10x11_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1x0_3'(s('fun'('type.num.num','fun'('type.num.num','bool')),'=_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Ord_0'))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Chr_0'))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Aw8alloc_0'))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Aw8sub_0'))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Aw8length_0'))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Aw8update_0'))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Explode_0'))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Implode_0'))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Strlen_0'))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.VfromList_0'))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Vsub_0'))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Vlength_0'))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Aalloc_0'))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Asub_0'))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Alength_0'))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'happ'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('type.patLang.op','happ'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('type.conLang.op','happ'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('type.ast.op','const.ast.Aupdate_0'))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.num.num','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','bool')),'_dst_x00x11_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'bool'))),'_dst_x000x111_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')))),'_dst_x0000x0011x1111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')))),'_dst_x1001x0110_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'_dst_x0x1_2'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('fun'('type.num.num','type.patLang.op'),'_dst_x0x1_2'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('fun'('type.num.num','type.conLang.op'),'_dst_x0x1_2'(s('fun'('type.ast.op','type.conLang.op'),'const.conLang.Op_0'),s('fun'('type.num.num','type.ast.op'),'const.ast.FFI_0'))))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.num.num','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','bool')),'_dst_x00x11_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'bool'))),'_dst_x000x111_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')))),'_dst_x0000x0011x1111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')))),'_dst_x1001x0110_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'_dst_x0x1_2'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('fun'('type.num.num','type.patLang.op'),'_dst_x0x1_2'(s('fun'('type.conLang.op','type.patLang.op'),'const.patLang.Op_0'),s('fun'('type.num.num','type.conLang.op'),'const.conLang.Init_global_var_0'))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.num.num','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','bool')),'_dst_x00x11_2'(s('fun'('fun'('type.num.num','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','fun'('type.num.num','bool'))),'_dst_x000x111_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'bool')))),'_dst_x0000x1111_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))))),'_dst_x00000x00011x11111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))))),'_dst_x10001x01110_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.num.num','fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'))),'_dst_x00x11_2'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('fun'('type.num.num','fun'('type.num.num','type.patLang.op')),'_dst_x01x10_2'(s('fun'('type.num.num','fun'('type.num.num','type.patLang.op')),'const.patLang.Tag_eq_0'),s('fun'('type.num.num','type.num.num'),'_i_0_0'))))))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.num.num','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','bool')),'_dst_x00x11_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'bool'))),'_dst_x000x001x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1x0_3'(s('fun'('type.num.num','fun'('type.num.num','bool')),'=_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'bool'))),'_dstsel_0_x001x011_2'(s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'const.list.HD_0'),s('fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'_dst_x0x1_2'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('fun'('type.num.num','type.patLang.op'),'const.patLang.El_0'))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.num.num','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','bool')),'_dst_x00x11_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'bool'))),'_dst_x000x111_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')))),'_dst_x0000x0011x1111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x00x10x11_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1x0_3'(s('fun'('type.num.num','fun'('type.num.num','bool')),'=_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')))),'_dst_x1001x0110_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'_dst_x0x1_2'(s('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'const.patLang.App_0'),s('fun'('type.num.num','type.patLang.op'),'const.patLang.El_0'))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_dst_x000x111_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','fun'('type.patLang.exp','bool')))),'_dst_x1001x0111_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.patLang.exp','fun'('type.patLang.exp','fun'('type.patLang.exp','type.patLang.exp'))),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('type.patLang.exp','fun'('type.patLang.exp','type.patLang.exp'))),'const.patLang.If_0'),s('fun'('type.patLang.exp','type.patLang.exp'),'_i_0_0'))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_dst_x000x111_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','fun'('type.patLang.exp','bool')))),'_dst_x1001x0111_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.patLang.exp','fun'('type.patLang.exp','fun'('type.patLang.exp','type.patLang.exp'))),'_dst_x011x100_2'(s('fun'('type.patLang.exp','fun'('type.patLang.exp','fun'('type.patLang.exp','type.patLang.exp'))),'const.patLang.If_0'),s('fun'('type.patLang.exp','type.patLang.exp'),'_i_0_0'))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_dst_x000x111_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','fun'('type.patLang.exp','bool')))),'_dst_x1001x0111_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.patLang.exp','fun'('type.patLang.exp','fun'('type.patLang.exp','type.patLang.exp'))),'_dst_x001x010x100_3'(s('fun'('type.patLang.exp','fun'('type.patLang.exp','fun'('type.patLang.exp','type.patLang.exp'))),'const.patLang.If_0'),s('fun'('type.patLang.exp','type.patLang.exp'),'_i_0_0'),s('fun'('type.patLang.exp','type.patLang.exp'),'_i_0_0'))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_dst_x101x011_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.patLang.exp','fun'('type.patLang.exp','type.patLang.exp')),'const.patLang.Let_0'))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_dst_x101x011_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.patLang.exp','fun'('type.patLang.exp','type.patLang.exp')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('type.patLang.exp','type.patLang.exp')),'const.patLang.Let_0'),s('fun'('type.patLang.exp','type.patLang.exp'),'_i_0_0'))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_dst_x101x011_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.patLang.exp','fun'('type.patLang.exp','type.patLang.exp')),'const.patLang.Seq_0'))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_dst_x101x011_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.patLang.exp','fun'('type.patLang.exp','type.patLang.exp')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('type.patLang.exp','type.patLang.exp')),'const.patLang.Seq_0'),s('fun'('type.patLang.exp','type.patLang.exp'),'_i_0_0'))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','bool')),'_dst_x00x11_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.list.list'('type.patLang.exp'),'bool'))),'_dst_x000x111_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')))),'_dst_x0000x0011x1111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'_dst_x01x10_2'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool')))),'_dst_x1001x0110_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.patLang.exp','fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp')),'_dst_x01x10_2'(s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','type.patLang.exp')),'const.patLang.Letrec_0'),s('fun'('type.patLang.exp','type.patLang.exp'),'_i_0_0'))))))))))))),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','bool'))),'_dst_x101x011_2'(s('fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','bool')),'fun'('type.patLang.exp','fun'('type.patLang.exp','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','type.patLang.exp')),'const.patLang.Letrec_0'))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_dst_x01x10x10x00x10x00x00x10x10x10x10x10x10x00_14'(s('fun'('type.patLang.exp','fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','type.closLang.exp')),'fun'('fun'('type.ast.lit','type.closLang.exp'),'fun'('fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'fun'('fun'('type.num.num','type.closLang.exp'),'fun'('fun'('type.num.num','type.closLang.exp'),'fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','fun'('type.patLang.exp','type.closLang.exp'))),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','type.closLang.exp')),'fun'('fun'('type.patLang.exp','fun'('type.patLang.exp','type.closLang.exp')),'fun'('fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'fun'('fun'('type.num.num','type.closLang.exp'),'type.closLang.exp')))))))))))))),'const.patLang.exp_CASE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.closLang.Raise_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','fun'('type.patLang.exp','type.closLang.exp'))),'_dst_x000x111_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','fun'('type.patLang.exp','type.closLang.exp'))),'_dst_x000x110x101_3'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp')),'const.closLang.Handle_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))),s('fun'('type.ast.lit','type.closLang.exp'),'_dst_x1x0x0x0x0x0_6'(s('fun'('type.ast.lit','fun'('fun'('type.integer.int','type.closLang.exp'),'fun'('fun'('type.string.char','type.closLang.exp'),'fun'('fun'('type.list.list'('type.string.char'),'type.closLang.exp'),'fun'('fun'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'type.closLang.exp'),'fun'('fun'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.closLang.exp'),'type.closLang.exp')))))),'const.ast.lit_CASE_0'),s('fun'('type.integer.int','type.closLang.exp'),'_dst_x0x1_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('type.integer.int','type.closLang.exp'),'_dst_x0x1x0_3'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('fun'('type.integer.int','type.closLang.op'),'const.closLang.Const_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('fun'('type.string.char','type.closLang.exp'),'_dst_x0x1_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('type.string.char','type.closLang.exp'),'_dst_x0x1x0_3'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('fun'('type.string.char','type.closLang.op'),'_dst_x0x1_2'(s('fun'('type.integer.int','type.closLang.op'),'const.closLang.Const_0'),s('fun'('type.string.char','type.integer.int'),'_dst_x0x1_2'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('fun'('type.string.char','type.num.num'),'const.string.ORD_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.string.char'),'type.closLang.exp'),'_dst_x0x1_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('type.list.list'('type.string.char'),'type.closLang.exp'),'_dst_x0x1_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.num.num','type.closLang.op'),'const.closLang.Cons_0'),s('type.num.num','const.pat_to_clos.string_tag_0'))))),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.closLang.exp')),'_dst_x0x1_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('fun'('type.string.char','type.closLang.exp'),'fun'('type.list.list'('type.string.char'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('type.string.char','type.closLang.exp'),'_dst_x0x1x0_3'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('fun'('type.string.char','type.closLang.op'),'_dst_x0x1_2'(s('fun'('type.integer.int','type.closLang.op'),'const.closLang.Const_0'),s('fun'('type.string.char','type.integer.int'),'_dst_x0x1_2'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('fun'('type.string.char','type.num.num'),'const.string.ORD_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('fun'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'type.closLang.exp'),'_dst_x0x1_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'type.closLang.exp'),'_dst_x0x1x0_3'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('fun'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'type.closLang.op'),'_dst_x0x1_2'(s('fun'('type.integer.int','type.closLang.op'),'const.closLang.Const_0'),s('fun'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'type.integer.int'),'_dst_x0x1_2'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('fun'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'type.num.num'),'const.words.w2n_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('fun'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.closLang.exp'),'_dst_x0x1_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.closLang.exp'),'_dst_x0x1_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.WordFromInt_0'))),s('fun'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.list.list'('type.closLang.exp')),'_dst_x0x1x0_3'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('fun'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.closLang.exp'),'_dst_x0x1x0_3'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('fun'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.closLang.op'),'_dst_x0x1_2'(s('fun'('type.integer.int','type.closLang.op'),'const.closLang.Const_0'),s('fun'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.integer.int'),'_dst_x0x1_2'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('fun'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.num.num'),'const.words.w2n_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp'))),'_dst_x000x111_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp'))),'_dst_x000x010x101_3'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('fun'('type.num.num','type.closLang.op'),'const.closLang.Cons_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))))),s('fun'('type.num.num','type.closLang.exp'),'_dst_x0x1_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'))),s('fun'('type.num.num','type.closLang.exp'),'_dst_x0x1_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('type.num.num','type.closLang.exp'),'_dst_x0x1x0_3'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('fun'('type.num.num','type.closLang.op'),'const.closLang.Global_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.closLang.Fn_3'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.option.option'('type.list.list'('type.num.num')),'const.option.NONE_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.op','fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp'))),'_dst_x000x010x101x101x101_5'(s('fun'('type.patLang.op','fun'('fun'('type.conLang.op','type.closLang.exp'),'fun'('fun'('type.num.num','fun'('type.num.num','type.closLang.exp')),'fun'('fun'('type.num.num','type.closLang.exp'),'type.closLang.exp')))),'const.patLang.op_CASE_0'),s('fun'('type.patLang.op','type.patLang.op'),'_i_0_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.conLang.op','type.closLang.exp'))),'_dst_x001x110x110_3'(s('fun'('type.conLang.op','fun'('fun'('type.ast.op','type.closLang.exp'),'fun'('fun'('type.num.num','type.closLang.exp'),'type.closLang.exp'))),'const.conLang.op_CASE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.ast.op','type.closLang.exp'))),'_dst_x001x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110x110_30'(s('fun'('type.ast.op','fun'('fun'('type.ast.opn','type.closLang.exp'),'fun'('fun'('type.ast.opb','type.closLang.exp'),'fun'('fun'('type.ast.word_size','fun'('type.ast.opw','type.closLang.exp')),'fun'('fun'('type.ast.word_size','fun'('type.ast.shift','fun'('type.num.num','type.closLang.exp'))),'fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('fun'('type.ast.word_size','type.closLang.exp'),'fun'('fun'('type.ast.word_size','type.closLang.exp'),'fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('fun'('type.ast.opb','type.closLang.exp'),'fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('fun'('type.num.num','type.closLang.exp'),'type.closLang.exp')))))))))))))))))))))))))))))),'const.ast.op_CASE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.ast.opn','type.closLang.exp'))),'_dst_x001x110x110x110x110x110_6'(s('fun'('type.ast.opn','fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp')))))),'const.ast.opn_CASE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Add_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Sub_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Mult_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11x00_3'(s('fun'('type.list.list'('type.closLang.exp'),'fun'('type.closLang.exp','type.closLang.exp')),'const.closLang.Let_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp'))),'const.closLang.If_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Equal_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.integer.int','type.closLang.op'),'const.closLang.Const_0'),s('type.integer.int','happ'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.closLang.Raise_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.num.num','type.closLang.op'),'const.closLang.Cons_0'),s('type.num.num','const.conLang.div_tag_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Div_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11x00_3'(s('fun'('type.list.list'('type.closLang.exp'),'fun'('type.closLang.exp','type.closLang.exp')),'const.closLang.Let_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp'))),'const.closLang.If_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Equal_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.integer.int','type.closLang.op'),'const.closLang.Const_0'),s('type.integer.int','happ'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.closLang.Raise_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.num.num','type.closLang.op'),'const.closLang.Cons_0'),s('type.num.num','const.conLang.div_tag_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Mod_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.ast.opb','type.closLang.exp'))),'_dst_x001x110x110x110x110_5'(s('fun'('type.ast.opb','fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp'))))),'const.ast.opb_CASE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Less_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Greater_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.LessEq_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.GreaterEq_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.ast.word_size','fun'('type.ast.opw','type.closLang.exp')))),'_dst_x0000x1111_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.ast.word_size','fun'('type.ast.opw','type.closLang.exp')))),'_dst_x0000x0011x1100_3'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('fun'('type.ast.word_size','fun'('type.ast.opw','type.closLang.op')),'const.closLang.WordOp_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.ast.word_size','fun'('type.ast.shift','fun'('type.num.num','type.closLang.exp'))))),'_dst_x00000x11111_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.ast.word_size','fun'('type.ast.shift','fun'('type.num.num','type.closLang.exp'))))),'_dst_x00000x00111x11000_3'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('fun'('type.ast.word_size','fun'('type.ast.shift','fun'('type.num.num','type.closLang.op'))),'const.closLang.WordShift_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Equal_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x01x11x11_4'(s('fun'('bool','fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp'))),'const.bool.COND_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1x0_3'(s('fun'('type.num.num','fun'('type.num.num','bool')),'=_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Sub_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11x11_3'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.App_1'(s('type.option.option'('type.num.num'),'const.option.NONE_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dstsel_0_x01_1'(s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11x00_3'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dstsel_0_x01_1'(s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'const.list.EL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x01x11x11_4'(s('fun'('bool','fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp'))),'const.bool.COND_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1x0_3'(s('fun'('type.num.num','fun'('type.num.num','bool')),'=_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Sub_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Update_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11x11_3'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dstsel_0_x01_1'(s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'const.list.EL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.integer.int','type.closLang.op'),'const.closLang.Const_0'),s('type.integer.int','happ'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11x00_3'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dstsel_0_x01_1'(s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Ref_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Deref_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.integer.int','type.closLang.op'),'const.closLang.Const_0'),s('type.integer.int','happ'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11x00_3'(s('fun'('type.list.list'('type.closLang.exp'),'fun'('type.closLang.exp','type.closLang.exp')),'const.closLang.Let_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp'))),'const.closLang.If_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Less_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.integer.int','type.closLang.op'),'const.closLang.Const_0'),s('type.integer.int','happ'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.closLang.Raise_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.num.num','type.closLang.op'),'const.closLang.Cons_0'),s('type.num.num','const.conLang.subscript_tag_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.RefByte_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11x00_3'(s('fun'('type.list.list'('type.closLang.exp'),'fun'('type.closLang.exp','type.closLang.exp')),'const.closLang.Let_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp'))),'const.closLang.If_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Less_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.integer.int','type.closLang.op'),'const.closLang.Const_0'),s('type.integer.int','happ'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.closLang.Raise_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.num.num','type.closLang.op'),'const.closLang.Cons_0'),s('type.num.num','const.conLang.subscript_tag_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp'))),'const.closLang.If_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Less_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.LengthByte_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.DerefByte_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.closLang.Raise_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.num.num','type.closLang.op'),'const.closLang.Cons_0'),s('type.num.num','const.conLang.subscript_tag_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.LengthByte_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11x00_3'(s('fun'('type.list.list'('type.closLang.exp'),'fun'('type.closLang.exp','type.closLang.exp')),'const.closLang.Let_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp'))),'const.closLang.If_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Less_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.integer.int','type.closLang.op'),'const.closLang.Const_0'),s('type.integer.int','happ'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.closLang.Raise_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.num.num','type.closLang.op'),'const.closLang.Cons_0'),s('type.num.num','const.conLang.subscript_tag_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp'))),'const.closLang.If_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Less_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.LengthByte_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'fun'('type.closLang.exp','type.closLang.exp')),'const.closLang.Let_0'),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.UpdateByte_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.num.num','type.closLang.op'),'const.closLang.Cons_0'),s('type.num.num','const.dec_to_exh.tuple_tag_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.closLang.Raise_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.num.num','type.closLang.op'),'const.closLang.Cons_0'),s('type.num.num','const.conLang.subscript_tag_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.ast.word_size','type.closLang.exp'))),'_dst_x001x110x110_3'(s('fun'('type.ast.word_size','fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp'))),'const.ast.word_size_CASE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Mod_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.integer.int','type.closLang.op'),'const.closLang.Const_0'),s('type.integer.int','happ'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.WordFromInt_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.ast.word_size','type.closLang.exp'))),'_dst_x001x110x110_3'(s('fun'('type.ast.word_size','fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp'))),'const.ast.word_size_CASE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x01x11x11_4'(s('fun'('bool','fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp'))),'const.bool.COND_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1x0_3'(s('fun'('type.num.num','fun'('type.num.num','bool')),'=_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Sub_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dstsel_0_x01_1'(s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'const.list.HD_0'))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.WordToInt_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x01x11x11_4'(s('fun'('bool','fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp'))),'const.bool.COND_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1x0_3'(s('fun'('type.num.num','fun'('type.num.num','bool')),'=_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Sub_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dstsel_0_x01_1'(s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'const.list.HD_0'))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11x00_3'(s('fun'('type.list.list'('type.closLang.exp'),'fun'('type.closLang.exp','type.closLang.exp')),'const.closLang.Let_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp'))),'const.closLang.If_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Less_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.integer.int','type.closLang.op'),'const.closLang.Const_0'),s('type.integer.int','happ'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.closLang.Raise_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.num.num','type.closLang.op'),'const.closLang.Cons_0'),s('type.num.num','const.conLang.chr_tag_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp'))),'const.closLang.If_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Less_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.integer.int','type.closLang.op'),'const.closLang.Const_0'),s('type.integer.int','happ'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.closLang.Raise_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.num.num','type.closLang.op'),'const.closLang.Cons_0'),s('type.num.num','const.conLang.chr_tag_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.num.|48|_0'))))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.ast.opb','type.closLang.exp'))),'_dst_x001x110x110x110x110_5'(s('fun'('type.ast.opb','fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp'))))),'const.ast.opb_CASE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Less_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Greater_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.LessEq_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.GreaterEq_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.ToList_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.FromList_1'(s('type.num.num','const.pat_to_clos.string_tag_0'))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.LengthBlock_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.FromList_1'(s('type.num.num','const.pat_to_clos.vector_tag_0'))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11x00_3'(s('fun'('type.list.list'('type.closLang.exp'),'fun'('type.closLang.exp','type.closLang.exp')),'const.closLang.Let_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp'))),'const.closLang.If_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Less_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.integer.int','type.closLang.op'),'const.closLang.Const_0'),s('type.integer.int','happ'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.closLang.Raise_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.num.num','type.closLang.op'),'const.closLang.Cons_0'),s('type.num.num','const.conLang.subscript_tag_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp'))),'const.closLang.If_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Less_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.LengthBlock_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.El_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.closLang.Raise_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.num.num','type.closLang.op'),'const.closLang.Cons_0'),s('type.num.num','const.conLang.subscript_tag_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.LengthBlock_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11x00_3'(s('fun'('type.list.list'('type.closLang.exp'),'fun'('type.closLang.exp','type.closLang.exp')),'const.closLang.Let_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp'))),'const.closLang.If_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Less_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.integer.int','type.closLang.op'),'const.closLang.Const_0'),s('type.integer.int','happ'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.closLang.Raise_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.num.num','type.closLang.op'),'const.closLang.Cons_0'),s('type.num.num','const.conLang.subscript_tag_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.RefArray_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11x00_3'(s('fun'('type.list.list'('type.closLang.exp'),'fun'('type.closLang.exp','type.closLang.exp')),'const.closLang.Let_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp'))),'const.closLang.If_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Less_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.integer.int','type.closLang.op'),'const.closLang.Const_0'),s('type.integer.int','happ'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.closLang.Raise_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.num.num','type.closLang.op'),'const.closLang.Cons_0'),s('type.num.num','const.conLang.subscript_tag_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp'))),'const.closLang.If_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Less_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Length_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Deref_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.closLang.Raise_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.num.num','type.closLang.op'),'const.closLang.Cons_0'),s('type.num.num','const.conLang.subscript_tag_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Length_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11x00_3'(s('fun'('type.list.list'('type.closLang.exp'),'fun'('type.closLang.exp','type.closLang.exp')),'const.closLang.Let_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp'))),'const.closLang.If_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Less_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.integer.int','type.closLang.op'),'const.closLang.Const_0'),s('type.integer.int','happ'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.closLang.Raise_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.num.num','type.closLang.op'),'const.closLang.Cons_0'),s('type.num.num','const.conLang.subscript_tag_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp'))),'const.closLang.If_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Less_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Length_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'fun'('type.closLang.exp','type.closLang.exp')),'const.closLang.Let_0'),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Update_0'))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.num.num','type.closLang.op'),'const.closLang.Cons_0'),s('type.num.num','const.dec_to_exh.tuple_tag_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','happ'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.closLang.Raise_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.num.num','type.closLang.op'),'const.closLang.Cons_0'),s('type.num.num','const.conLang.subscript_tag_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.num.num','type.closLang.exp'))),'_dst_x000x111_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.num.num','type.closLang.exp'))),'_dst_x000x001x110_3'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('fun'('type.num.num','type.closLang.op'),'const.closLang.FFI_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.num.num','type.closLang.exp'))),'_dst_x000x111_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.num.num','type.closLang.exp'))),'_dst_x000x111x000_3'(s('fun'('type.list.list'('type.closLang.exp'),'fun'('type.closLang.exp','type.closLang.exp')),'const.closLang.Let_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.num.num','type.list.list'('type.closLang.exp')))),'_dst_x000x111x000_3'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.num.num','type.closLang.exp'))),'_dst_x000x001x110_3'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('fun'('type.num.num','type.closLang.op'),'const.closLang.SetGlobal_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.num.num','type.closLang.op'),'const.closLang.Cons_0'),s('type.num.num','const.dec_to_exh.tuple_tag_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.num.num','fun'('type.num.num','type.closLang.exp')))),'_dst_x0000x1111_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.num.num','fun'('type.num.num','type.closLang.exp')))),'_dst_x0000x0011x1100_3'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('fun'('type.num.num','fun'('type.num.num','type.closLang.op')),'const.closLang.TagLenEq_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.num.num','type.closLang.exp'))),'_dst_x000x111_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.num.num','type.closLang.exp'))),'_dst_x000x010x110x111_4'(s('fun'('bool','fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp'))),'const.bool.COND_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.patLang.exp'),'bool'),'_dst_x0x1x0_3'(s('fun'('type.num.num','fun'('type.num.num','bool')),'=_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Sub_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'const.list.REVERSE_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.num.num','type.closLang.exp'))),'_dst_x000x111_2'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.El_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.num.num','type.list.list'('type.closLang.exp')))),'_dst_x000x001x110_3'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('fun'('type.num.num','type.closLang.exp'),'_dst_x0x1x0_3'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('fun'('type.num.num','type.closLang.op'),'_dst_x0x1_2'(s('fun'('type.integer.int','type.closLang.op'),'const.closLang.Const_0'),s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.closLang.exp'))),'_dst_x00x11x00_3'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.closLang.exp')),'_dstsel_0_x01_1'(s('fun'('type.list.list'('type.patLang.exp'),'type.patLang.exp'),'const.list.HD_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','fun'('type.patLang.exp','fun'('type.patLang.exp','type.closLang.exp')))),'_dst_x0000x1111_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','fun'('type.patLang.exp','fun'('type.patLang.exp','type.closLang.exp')))),'_dst_x0000x1100x1010x1001_4'(s('fun'('type.closLang.exp','fun'('type.closLang.exp','fun'('type.closLang.exp','type.closLang.exp'))),'const.closLang.If_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','fun'('type.patLang.exp','type.closLang.exp'))),'_dst_x000x111_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','fun'('type.patLang.exp','type.closLang.exp'))),'_dst_x000x110x101_3'(s('fun'('type.list.list'('type.closLang.exp'),'fun'('type.closLang.exp','type.closLang.exp')),'const.closLang.Let_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.list.list'('type.closLang.exp'))),'_dst_x00x11x00_3'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','fun'('type.patLang.exp','type.closLang.exp'))),'_dst_x000x111_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','fun'('type.patLang.exp','type.closLang.exp'))),'_dst_x000x111x000_3'(s('fun'('type.list.list'('type.closLang.exp'),'fun'('type.closLang.exp','type.closLang.exp')),'const.closLang.Let_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','fun'('type.patLang.exp','type.list.list'('type.closLang.exp')))),'_dst_x000x110x101_3'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.list.list'('type.closLang.exp'))),'_dst_x00x11x00_3'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.closLang.exp','happ'(s('fun'('type.num.num','type.closLang.exp'),'const.closLang.Var_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','type.closLang.exp'))),'_dst_x000x111_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.patLang.exp','type.closLang.exp'))),'_dst_x000x110x101_3'(s('fun'('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'fun'('type.closLang.exp','type.closLang.exp')),'const.closLang.Letrec_2'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.option.option'('type.list.list'('type.num.num')),'const.option.NONE_0'))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')))),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','type.pair.prod'('type.num.num','type.closLang.exp')),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')))),'const.list.MAP_0'),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.pair.prod'('type.num.num','type.closLang.exp'))),'_dst_x00x11_2'(s('fun'('type.closLang.exp','type.pair.prod'('type.num.num','type.closLang.exp')),'const.pair.,_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))),s('fun'('fun'('type.patLang.exp','type.closLang.exp'),'fun'('type.patLang.exp','type.closLang.exp')),'_i_0_0'))))),s('fun'('type.num.num','type.closLang.exp'),'_dst_x0x1_2'(s('fun'('type.closLang.exp','type.closLang.exp'),'const.combin.I_0'),s('fun'('type.num.num','type.closLang.exp'),'_dst_x0x1x0_3'(s('fun'('type.list.list'('type.closLang.exp'),'fun'('type.closLang.exp','type.closLang.exp')),'const.closLang.Let_0'),s('fun'('type.num.num','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.closLang.exp','type.list.list'('type.closLang.exp'))),'const.rich_list.REPLICATE_0'),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.AllocGlobal_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','happ'(s('fun'('type.num.num','type.closLang.op'),'const.closLang.Cons_0'),s('type.num.num','const.dec_to_exh.tuple_tag_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))))))).
fof('thm.pat_to_clos.pat_to_clos_3_prove_ltb', axiom, ![V_27a_27]: ((?[V_27e_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Raise_1'(s('type.patLang.exp',V_27e_27))) | (?[V_27e_7c49_7c_27, V_27e2_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Handle_2'(s('type.patLang.exp',V_27e_7c49_7c_27),s('type.patLang.exp',V_27e2_27))) | ((?[V_27i_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',V_27i_27))))) | (?[V_27c_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',V_27c_27))))) | (?[V_27s_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),V_27s_27))))) | (?[V_27w_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),V_27w_27))))) | ?[V_27w_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),V_27w_27))))))))) | (?[V_27cn_27, V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Con_2'(s('type.num.num',V_27cn_27),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27n_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Var_local_1'(s('type.num.num',V_27n_27))) | (?[V_27n_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Var_global_1'(s('type.num.num',V_27n_27))) | (?[V_27e_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Fun_1'(s('type.patLang.exp',V_27e_27))) | (((((?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Plus_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Minus_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Divide_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | ?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Modulo_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) | ((?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Lt_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Gt_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Leq_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | ?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Geq_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27)))))) | (?[V_27wz_27, V_27opw_27, V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opw_2'(s('type.ast.word_size',V_27wz_27),s('type.ast.opw',V_27opw_27))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27wz_27, V_27sh_27, V_27n_27, V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Shift_3'(s('type.ast.word_size',V_27wz_27),s('type.ast.shift',V_27sh_27),s('type.num.num',V_27n_27))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Equality_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opapp_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opassign_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opref_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opderef_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Aw8alloc_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Aw8sub_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Aw8length_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Aw8update_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | ((?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.WordFromInt_1'(s('type.ast.word_size','const.ast.W8_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | ?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.WordFromInt_1'(s('type.ast.word_size','const.ast.W64_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27)))) | ((?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.WordToInt_1'(s('type.ast.word_size','const.ast.W8_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | ?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.WordToInt_1'(s('type.ast.word_size','const.ast.W64_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27)))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Ord_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Chr_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | ((?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Chopb_1'(s('type.ast.opb','const.ast.Lt_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Chopb_1'(s('type.ast.opb','const.ast.Gt_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Chopb_1'(s('type.ast.opb','const.ast.Leq_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | ?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Chopb_1'(s('type.ast.opb','const.ast.Geq_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27)))))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Explode_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Implode_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Strlen_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.VfromList_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Vsub_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Vlength_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Aalloc_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Asub_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Alength_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Aupdate_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | ?[V_27n_27, V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.FFI_1'(s('type.num.num',V_27n_27))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))))))))))))))))))))))))))) | ?[V_27n_27, V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Init_global_var_1'(s('type.num.num',V_27n_27))))),s('type.list.list'('type.patLang.exp'),V_27es_27)))) | (?[V_27n_27, V_27l_27, V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Tag_eq_2'(s('type.num.num',V_27n_27),s('type.num.num',V_27l_27))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | ?[V_27n_27, V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.El_1'(s('type.num.num',V_27n_27))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) | (?[V_27e_7c49_7c_27, V_27e2_27, V_27e3_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.If_3'(s('type.patLang.exp',V_27e_7c49_7c_27),s('type.patLang.exp',V_27e2_27),s('type.patLang.exp',V_27e3_27))) | (?[V_27e_7c49_7c_27, V_27e2_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',V_27e_7c49_7c_27),s('type.patLang.exp',V_27e2_27))) | (?[V_27e_7c49_7c_27, V_27e2_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Seq_2'(s('type.patLang.exp',V_27e_7c49_7c_27),s('type.patLang.exp',V_27e2_27))) | (?[V_27es_27, V_27e_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Letrec_2'(s('type.list.list'('type.patLang.exp'),V_27es_27),s('type.patLang.exp',V_27e_27))) | ?[V_27n_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Extend_global_1'(s('type.num.num',V_27n_27))))))))))))))) => (?[V_27e_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Raise_1'(s('type.patLang.exp',V_27e_27))) | (?[V_27e_7c49_7c_27, V_27e2_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Handle_2'(s('type.patLang.exp',V_27e_7c49_7c_27),s('type.patLang.exp',V_27e2_27))) | (?[V_27i_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',V_27i_27))))) | (?[V_27w_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),V_27w_27))))) | (?[V_27w_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),V_27w_27))))) | (?[V_27c_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',V_27c_27))))) | (?[V_27s_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),V_27s_27))))) | (?[V_27cn_27, V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Con_2'(s('type.num.num',V_27cn_27),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27n_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Var_local_1'(s('type.num.num',V_27n_27))) | (?[V_27n_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Var_global_1'(s('type.num.num',V_27n_27))) | (?[V_27e_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Fun_1'(s('type.patLang.exp',V_27e_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opapp_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Plus_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Minus_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Divide_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Modulo_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27wz_27, V_27opw_27, V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opw_2'(s('type.ast.word_size',V_27wz_27),s('type.ast.opw',V_27opw_27))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27wz_27, V_27sh_27, V_27n_27, V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Shift_3'(s('type.ast.word_size',V_27wz_27),s('type.ast.shift',V_27sh_27),s('type.num.num',V_27n_27))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Lt_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Gt_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Leq_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Geq_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Chopb_1'(s('type.ast.opb','const.ast.Lt_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Chopb_1'(s('type.ast.opb','const.ast.Gt_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Chopb_1'(s('type.ast.opb','const.ast.Leq_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Chopb_1'(s('type.ast.opb','const.ast.Geq_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Equality_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opassign_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opderef_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opref_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.WordFromInt_1'(s('type.ast.word_size','const.ast.W8_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.WordFromInt_1'(s('type.ast.word_size','const.ast.W64_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.WordToInt_1'(s('type.ast.word_size','const.ast.W8_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.WordToInt_1'(s('type.ast.word_size','const.ast.W64_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Ord_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Chr_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Aw8alloc_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Aw8sub_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Aw8length_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Aw8update_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Explode_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Implode_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Strlen_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.VfromList_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Vsub_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Vlength_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Aalloc_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Asub_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Alength_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Aupdate_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27n_27, V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.FFI_1'(s('type.num.num',V_27n_27))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27n_27, V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Init_global_var_1'(s('type.num.num',V_27n_27))))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27n_27, V_27l_27, V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Tag_eq_2'(s('type.num.num',V_27n_27),s('type.num.num',V_27l_27))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27n_27, V_27es_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.El_1'(s('type.num.num',V_27n_27))),s('type.list.list'('type.patLang.exp'),V_27es_27))) | (?[V_27e_7c49_7c_27, V_27e2_27, V_27e3_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.If_3'(s('type.patLang.exp',V_27e_7c49_7c_27),s('type.patLang.exp',V_27e2_27),s('type.patLang.exp',V_27e3_27))) | (?[V_27e_7c49_7c_27, V_27e2_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',V_27e_7c49_7c_27),s('type.patLang.exp',V_27e2_27))) | (?[V_27e_7c49_7c_27, V_27e2_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Seq_2'(s('type.patLang.exp',V_27e_7c49_7c_27),s('type.patLang.exp',V_27e2_27))) | (?[V_27es_27, V_27e_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Letrec_2'(s('type.list.list'('type.patLang.exp'),V_27es_27),s('type.patLang.exp',V_27e_27))) | ?[V_27n_27]: s('type.patLang.exp',V_27a_27) = s('type.patLang.exp','const.patLang.Extend_global_1'(s('type.num.num',V_27n_27)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).
fof('thm.pat_to_clos.compile_ind', axiom, ![V_27P_27]: ((![V_27e_27]: (p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27e_27)))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.Raise_1'(s('type.patLang.exp',V_27e_27))))))) & (![V_27e_7c49_7c_27, V_27e2_27]: ((p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27e_7c49_7c_27)))) & p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27e2_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.Handle_2'(s('type.patLang.exp',V_27e_7c49_7c_27),s('type.patLang.exp',V_27e2_27))))))) & (![V_27i_27]: p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',V_27i_27)))))))) & (![V_27w_27]: p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),V_27w_27)))))))) & (![V_27w_27]: p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),V_27w_27)))))))) & (![V_27c_27]: p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',V_27c_27)))))))) & (![V_27s_27]: p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),V_27s_27)))))))) & (![V_27cn_27, V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.Con_2'(s('type.num.num',V_27cn_27),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27n_27]: p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.Var_local_1'(s('type.num.num',V_27n_27)))))) & (![V_27n_27]: p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.Var_global_1'(s('type.num.num',V_27n_27)))))) & (![V_27e_27]: (p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27e_27)))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.Fun_1'(s('type.patLang.exp',V_27e_27))))))) & (![V_27es_27]: ((![V_27a_27]: ((~ (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) & p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) & ((~ (~ (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (~ (~ (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opapp_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Plus_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Minus_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Divide_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Modulo_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27wz_27, V_27opw_27, V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opw_2'(s('type.ast.word_size',V_27wz_27),s('type.ast.opw',V_27opw_27))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27wz_27, V_27sh_27, V_27n_27, V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Shift_3'(s('type.ast.word_size',V_27wz_27),s('type.ast.shift',V_27sh_27),s('type.num.num',V_27n_27))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Lt_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Gt_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Leq_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Geq_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Chopb_1'(s('type.ast.opb','const.ast.Lt_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Chopb_1'(s('type.ast.opb','const.ast.Gt_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Chopb_1'(s('type.ast.opb','const.ast.Leq_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Chopb_1'(s('type.ast.opb','const.ast.Geq_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Equality_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: ((![V_27a_27]: ((~ (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) & p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) & ((~ (~ (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (~ (~ (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opassign_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opderef_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opref_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.WordFromInt_1'(s('type.ast.word_size','const.ast.W8_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.WordFromInt_1'(s('type.ast.word_size','const.ast.W64_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: ((![V_27a_27]: ((~ (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) & p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) & (~ (~ (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.list.HD_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.WordToInt_1'(s('type.ast.word_size','const.ast.W8_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.WordToInt_1'(s('type.ast.word_size','const.ast.W64_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: ((![V_27a_27]: ((~ (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) & p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) & (~ (~ (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.list.HD_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Ord_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Chr_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Aw8alloc_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Aw8sub_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Aw8length_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Aw8update_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Explode_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Implode_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Strlen_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.VfromList_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Vsub_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Vlength_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Aalloc_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Asub_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Alength_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Aupdate_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27n_27, V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.FFI_1'(s('type.num.num',V_27n_27))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27n_27, V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Init_global_var_1'(s('type.num.num',V_27n_27))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27n_27, V_27l_27, V_27es_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Tag_eq_2'(s('type.num.num',V_27n_27),s('type.num.num',V_27l_27))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27n_27, V_27es_27]: ((![V_27a_27]: ((~ (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) & p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27a_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27a_27))))) & (~ (~ (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.list.HD_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.El_1'(s('type.num.num',V_27n_27))),s('type.list.list'('type.patLang.exp'),V_27es_27))))))) & (![V_27e_7c49_7c_27, V_27e2_27, V_27e3_27]: ((p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27e_7c49_7c_27)))) & (p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27e2_27)))) & p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27e3_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.If_3'(s('type.patLang.exp',V_27e_7c49_7c_27),s('type.patLang.exp',V_27e2_27),s('type.patLang.exp',V_27e3_27))))))) & (![V_27e_7c49_7c_27, V_27e2_27]: ((p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27e_7c49_7c_27)))) & p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27e2_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',V_27e_7c49_7c_27),s('type.patLang.exp',V_27e2_27))))))) & (![V_27e_7c49_7c_27, V_27e2_27]: ((p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27e_7c49_7c_27)))) & p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27e2_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.Seq_2'(s('type.patLang.exp',V_27e_7c49_7c_27),s('type.patLang.exp',V_27e2_27))))))) & (![V_27es_27, V_27e_27]: ((![V_27e_7c39_7c_27]: (p(s('bool','const.bool.IN_2'(s('type.patLang.exp',V_27e_7c39_7c_27),s('fun'('type.patLang.exp','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27e_7c39_7c_27))))) & p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27e_27))))) => p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.Letrec_2'(s('type.list.list'('type.patLang.exp'),V_27es_27),s('type.patLang.exp',V_27e_27))))))) & ![V_27n_27]: p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp','const.patLang.Extend_global_1'(s('type.num.num',V_27n_27))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) => ![V_27v_27]: p(s('bool','happ'(s('fun'('type.patLang.exp','bool'),V_27P_27),s('type.patLang.exp',V_27v_27)))))).
fof('ARITY_0_1_const.pat_to_clos.compile', axiom, ![VV0]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp',VV0))) = s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp',VV0)))).
fof('thm.pat_to_clos.compile_def|split|0', axiom, ![V_27e_27]: s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp','const.patLang.Raise_1'(s('type.patLang.exp',V_27e_27))))) = s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp',V_27e_27)))))).
fof('thm.pat_to_clos.compile_def|split|1', axiom, ![V_27e2_27, V_27e_7c49_7c_27]: s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp','const.patLang.Handle_2'(s('type.patLang.exp',V_27e_7c49_7c_27),s('type.patLang.exp',V_27e2_27))))) = s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp',V_27e_7c49_7c_27))),s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp',V_27e2_27)))))).
fof('thm.pat_to_clos.compile_def|split|2', axiom, ![V_27i_27]: s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',V_27i_27))))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int',V_27i_27))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))).
fof('thm.pat_to_clos.compile_def|split|3', axiom, ![V_27w_27]: s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),V_27w_27))))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),V_27w_27))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))).
fof('thm.pat_to_clos.compile_def|split|4', axiom, ![V_27w_27]: s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),V_27w_27))))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.WordFromInt_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),V_27w_27))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))).
fof('thm.pat_to_clos.compile_def|split|5', axiom, ![V_27c_27]: s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',V_27c_27))))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.string.ORD_1'(s('type.string.char',V_27c_27))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))).
fof('thm.pat_to_clos.compile_def|split|6', axiom, ![V_27s_27]: s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),V_27s_27))))))) = s('type.closLang.exp','happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num','const.pat_to_clos.string_tag_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.string.char','type.closLang.exp'),'_dst_x0x1x0_3'(s('fun'('type.closLang.op','fun'('type.list.list'('type.closLang.exp'),'type.closLang.exp')),'const.closLang.Op_0'),s('fun'('type.string.char','type.closLang.op'),'_dst_x0x1_2'(s('fun'('type.integer.int','type.closLang.op'),'const.closLang.Const_0'),s('fun'('type.string.char','type.integer.int'),'_dst_x0x1_2'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('fun'('type.string.char','type.num.num'),'const.string.ORD_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),V_27s_27)))))))).
fof('thm.pat_to_clos.compile_def|split|7', axiom, ![V_27es_27, V_27cn_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.Con_2'(s('type.num.num',V_27cn_27),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num',V_27cn_27))),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27)))))))).
fof('thm.pat_to_clos.compile_def|split|8', axiom, ![V_27n_27]: s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp','const.patLang.Var_local_1'(s('type.num.num',V_27n_27))))) = s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',V_27n_27)))).
fof('thm.pat_to_clos.compile_def|split|9', axiom, ![V_27n_27]: s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp','const.patLang.Var_global_1'(s('type.num.num',V_27n_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Global_1'(s('type.num.num',V_27n_27))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))).
fof('thm.pat_to_clos.compile_def|split|10', axiom, ![V_27e_27]: s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp','const.patLang.Fun_1'(s('type.patLang.exp',V_27e_27))))) = s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.option.option'('type.list.list'('type.num.num')),'const.option.NONE_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp',V_27e_27)))))).
fof('thm.pat_to_clos.compile_def|split|11', axiom, ![V_27es_27]: ?[Vv]: ((p(s('bool',Vv)) <=> ~ (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opapp_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.bool.COND_3'(s('bool',Vv),s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Sub_0'),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27))))))),s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.patLang.exp'),V_27es_27))))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))).
fof('thm.pat_to_clos.compile_def|split|12', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Plus_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Add_0'),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27)))))))).
fof('thm.pat_to_clos.compile_def|split|13', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Minus_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Sub_0'),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27)))))))).
fof('thm.pat_to_clos.compile_def|split|14', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Mult_0'),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27)))))))).
fof('thm.pat_to_clos.compile_def|split|15', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Divide_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27))))),s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Equal_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num','const.conLang.div_tag_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Div_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))))))).
fof('thm.pat_to_clos.compile_def|split|16', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Modulo_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27))))),s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Equal_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num','const.conLang.div_tag_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Mod_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))))))).
fof('thm.pat_to_clos.compile_def|split|17', axiom, ![V_27wz_27, V_27opw_27, V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opw_2'(s('type.ast.word_size',V_27wz_27),s('type.ast.opw',V_27opw_27))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.WordOp_2'(s('type.ast.word_size',V_27wz_27),s('type.ast.opw',V_27opw_27))),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27)))))))).
fof('thm.pat_to_clos.compile_def|split|18', axiom, ![V_27wz_27, V_27sh_27, V_27n_27, V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Shift_3'(s('type.ast.word_size',V_27wz_27),s('type.ast.shift',V_27sh_27),s('type.num.num',V_27n_27))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.WordShift_3'(s('type.ast.word_size',V_27wz_27),s('type.ast.shift',V_27sh_27),s('type.num.num',V_27n_27))),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27)))))))).
fof('thm.pat_to_clos.compile_def|split|19', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Lt_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Less_0'),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27)))))))).
fof('thm.pat_to_clos.compile_def|split|20', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Gt_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Greater_0'),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27)))))))).
fof('thm.pat_to_clos.compile_def|split|21', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Leq_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.LessEq_0'),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27)))))))).
fof('thm.pat_to_clos.compile_def|split|22', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Geq_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.GreaterEq_0'),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27)))))))).
fof('thm.pat_to_clos.compile_def|split|23', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Chopb_1'(s('type.ast.opb','const.ast.Lt_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Less_0'),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27)))))))).
fof('thm.pat_to_clos.compile_def|split|24', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Chopb_1'(s('type.ast.opb','const.ast.Gt_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Greater_0'),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27)))))))).
fof('thm.pat_to_clos.compile_def|split|25', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Chopb_1'(s('type.ast.opb','const.ast.Leq_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.LessEq_0'),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27)))))))).
fof('thm.pat_to_clos.compile_def|split|26', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Chopb_1'(s('type.ast.opb','const.ast.Geq_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.GreaterEq_0'),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27)))))))).
fof('thm.pat_to_clos.compile_def|split|27', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Equality_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Equal_0'),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27)))))))).
fof('thm.pat_to_clos.compile_def|split|28', axiom, ![V_27es_27]: ?[Vv]: ((p(s('bool',Vv)) <=> ~ (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opassign_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.bool.COND_3'(s('bool',Vv),s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Sub_0'),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27))))))),s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Update_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.patLang.exp'),V_27es_27))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))))).
fof('thm.pat_to_clos.compile_def|split|29', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opderef_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Deref_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27)))))))))).
fof('thm.pat_to_clos.compile_def|split|30', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Opref_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Ref_0'),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27)))))))).
fof('thm.pat_to_clos.compile_def|split|31', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.WordFromInt_1'(s('type.ast.word_size','const.ast.W8_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Mod_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27)))))))))).
fof('thm.pat_to_clos.compile_def|split|32', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.WordFromInt_1'(s('type.ast.word_size','const.ast.W64_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.WordFromInt_0'),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27)))))))).
fof('thm.pat_to_clos.compile_def|split|33', axiom, ![V_27es_27]: ?[Vv]: ((p(s('bool',Vv)) <=> ~ (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.WordToInt_1'(s('type.ast.word_size','const.ast.W8_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.bool.COND_3'(s('bool',Vv),s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Sub_0'),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27))))))),s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.list.HD_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))))))))).
fof('thm.pat_to_clos.compile_def|split|34', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.WordToInt_1'(s('type.ast.word_size','const.ast.W64_0'))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.WordToInt_0'),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27)))))))).
fof('thm.pat_to_clos.compile_def|split|35', axiom, ![V_27es_27]: ?[Vv]: ((p(s('bool',Vv)) <=> ~ (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Ord_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.bool.COND_3'(s('bool',Vv),s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Sub_0'),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27))))))),s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.list.HD_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))))))))).
fof('thm.pat_to_clos.compile_def|split|36', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Chr_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27))))),s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Less_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num','const.conLang.chr_tag_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Less_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num','const.conLang.chr_tag_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.num.|48|_0')))))))))).
fof('thm.pat_to_clos.compile_def|split|37', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Aw8alloc_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27))))),s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Less_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num','const.conLang.subscript_tag_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.RefByte_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))))))).
fof('thm.pat_to_clos.compile_def|split|38', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Aw8sub_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27))))),s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Less_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num','const.conLang.subscript_tag_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Less_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.LengthByte_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.DerefByte_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num','const.conLang.subscript_tag_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))))))).
fof('thm.pat_to_clos.compile_def|split|39', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Aw8length_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.LengthByte_0'),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27)))))))).
fof('thm.pat_to_clos.compile_def|split|40', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Aw8update_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27))))),s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Less_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num','const.conLang.subscript_tag_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Less_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.LengthByte_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.UpdateByte_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num','const.dec_to_exh.tuple_tag_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num','const.conLang.subscript_tag_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))))))).
fof('thm.pat_to_clos.compile_def|split|41', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Explode_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.ToList_0'),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27)))))))).
fof('thm.pat_to_clos.compile_def|split|42', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Implode_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.FromList_1'(s('type.num.num','const.pat_to_clos.string_tag_0'))),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27)))))))).
fof('thm.pat_to_clos.compile_def|split|43', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Strlen_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.LengthBlock_0'),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27)))))))).
fof('thm.pat_to_clos.compile_def|split|44', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.VfromList_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.FromList_1'(s('type.num.num','const.pat_to_clos.vector_tag_0'))),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27)))))))).
fof('thm.pat_to_clos.compile_def|split|45', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Vsub_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27))))),s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Less_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num','const.conLang.subscript_tag_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Less_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.LengthBlock_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.El_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num','const.conLang.subscript_tag_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))))))).
fof('thm.pat_to_clos.compile_def|split|46', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Vlength_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.LengthBlock_0'),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27)))))))).
fof('thm.pat_to_clos.compile_def|split|47', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Aalloc_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27))))),s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Less_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num','const.conLang.subscript_tag_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.RefArray_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))))))).
fof('thm.pat_to_clos.compile_def|split|48', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Asub_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27))))),s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Less_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num','const.conLang.subscript_tag_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Less_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Length_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Deref_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num','const.conLang.subscript_tag_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))))))).
fof('thm.pat_to_clos.compile_def|split|49', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Alength_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Length_0'),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27)))))))).
fof('thm.pat_to_clos.compile_def|split|50', axiom, ![V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.Aupdate_0'))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27))))),s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Less_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num','const.conLang.subscript_tag_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Less_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Length_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Update_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num','const.dec_to_exh.tuple_tag_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num','const.conLang.subscript_tag_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))))))).
fof('thm.pat_to_clos.compile_def|split|51', axiom, ![V_27n_27, V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Op_1'(s('type.ast.op','const.ast.FFI_1'(s('type.num.num',V_27n_27))))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.FFI_1'(s('type.num.num',V_27n_27))),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27)))))))).
fof('thm.pat_to_clos.compile_def|split|52', axiom, ![V_27n_27, V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op','const.conLang.Init_global_var_1'(s('type.num.num',V_27n_27))))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.SetGlobal_1'(s('type.num.num',V_27n_27))),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num','const.dec_to_exh.tuple_tag_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))).
fof('thm.pat_to_clos.compile_def|split|53', axiom, ![V_27n_27, V_27l_27, V_27es_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.Tag_eq_2'(s('type.num.num',V_27n_27),s('type.num.num',V_27l_27))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.TagLenEq_2'(s('type.num.num',V_27n_27),s('type.num.num',V_27l_27))),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27)))))))).
fof('thm.pat_to_clos.compile_def|split|54', axiom, ![V_27n_27, V_27es_27]: ?[Vv]: ((p(s('bool',Vv)) <=> ~ (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op','const.patLang.El_1'(s('type.num.num',V_27n_27))),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.closLang.exp','const.bool.COND_3'(s('bool',Vv),s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Sub_0'),s('type.list.list'('type.closLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.list.list'('type.patLang.exp'),V_27es_27))))))),s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.El_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',V_27n_27))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.list.HD_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))).
fof('thm.pat_to_clos.compile_def|split|55', axiom, ![V_27e3_27, V_27e2_27, V_27e_7c49_7c_27]: s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp','const.patLang.If_3'(s('type.patLang.exp',V_27e_7c49_7c_27),s('type.patLang.exp',V_27e2_27),s('type.patLang.exp',V_27e3_27))))) = s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp',V_27e_7c49_7c_27))),s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp',V_27e2_27))),s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp',V_27e3_27)))))).
fof('thm.pat_to_clos.compile_def|split|56', axiom, ![V_27e2_27, V_27e_7c49_7c_27]: s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',V_27e_7c49_7c_27),s('type.patLang.exp',V_27e2_27))))) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp',V_27e_7c49_7c_27))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp',V_27e2_27)))))).
fof('thm.pat_to_clos.compile_def|split|57', axiom, ![V_27e2_27, V_27e_7c49_7c_27]: s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp','const.patLang.Seq_2'(s('type.patLang.exp',V_27e_7c49_7c_27),s('type.patLang.exp',V_27e2_27))))) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp',V_27e_7c49_7c_27))),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp',V_27e2_27))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))).
fof('thm.pat_to_clos.compile_def|split|58', axiom, ![V_27es_27, V_27e_27]: s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp','const.patLang.Letrec_2'(s('type.list.list'('type.patLang.exp'),V_27es_27),s('type.patLang.exp',V_27e_27))))) = s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.option.option'('type.list.list'('type.num.num')),'const.option.NONE_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.pair.prod'('type.num.num','type.closLang.exp')),'_dst_x0x1_2'(s('fun'('type.closLang.exp','type.pair.prod'('type.num.num','type.closLang.exp')),'const.pair.,_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'))),s('type.list.list'('type.patLang.exp'),V_27es_27))),s('type.closLang.exp','happ'(s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'),s('type.patLang.exp',V_27e_27)))))).
fof('thm.pat_to_clos.compile_def|split|59', axiom, ![V_27n_27]: s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp','const.patLang.Extend_global_1'(s('type.num.num',V_27n_27))))) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),'const.rich_list.REPLICATE_2'(s('type.num.num',V_27n_27),s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.AllocGlobal_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num','const.dec_to_exh.tuple_tag_0'))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))).
