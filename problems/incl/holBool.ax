fof('thm.holBool.bool_sig_instances', axiom, ![V_27U_27]: ![V_27sig_27, V_27i_27]: (p(s('bool','const.holBoolSyntax.is_bool_sig_1'(s('type.pair.prod'('type.finite_map.fmap'('type.mlstring.mlstring','type.num.num'),'type.finite_map.fmap'('type.mlstring.mlstring','type.holSyntax.type')),V_27sig_27)))) => (s('fun'('fun'('type.mlstring.mlstring',V_27U_27),V_27U_27),'const.holSemantics.instance_4'(s('type.finite_map.fmap'('type.mlstring.mlstring','type.holSyntax.type'),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.mlstring.mlstring','type.num.num'),'type.finite_map.fmap'('type.mlstring.mlstring','type.holSyntax.type')),V_27sig_27))),s('type.pair.prod'('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27))),V_27i_27),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.holSyntax.type','const.holSyntax.Tyapp_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.holSyntax.type'),'const.list.NIL_0'))))) = s('fun'('fun'('type.mlstring.mlstring',V_27U_27),V_27U_27),'const.combin.K_1'(s(V_27U_27,'happ'(s('fun'('type.list.list'(V_27U_27),V_27U_27),'happ'(s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'const.pair.SND_1'(s('type.pair.prod'('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27))),V_27i_27))),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'(V_27U_27),'const.list.NIL_0'))))) & (s('fun'('fun'('type.mlstring.mlstring',V_27U_27),V_27U_27),'const.holSemantics.instance_4'(s('type.finite_map.fmap'('type.mlstring.mlstring','type.holSyntax.type'),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.mlstring.mlstring','type.num.num'),'type.finite_map.fmap'('type.mlstring.mlstring','type.holSyntax.type')),V_27sig_27))),s('type.pair.prod'('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27))),V_27i_27),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.holSyntax.type','const.holSyntax.Tyapp_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.holSyntax.type'),'const.list.NIL_0'))))) = s('fun'('fun'('type.mlstring.mlstring',V_27U_27),V_27U_27),'const.combin.K_1'(s(V_27U_27,'happ'(s('fun'('type.list.list'(V_27U_27),V_27U_27),'happ'(s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'const.pair.SND_1'(s('type.pair.prod'('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27))),V_27i_27))),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'(V_27U_27),'const.list.NIL_0'))))) & (s('fun'('fun'('type.mlstring.mlstring',V_27U_27),V_27U_27),'const.holSemantics.instance_4'(s('type.finite_map.fmap'('type.mlstring.mlstring','type.holSyntax.type'),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.mlstring.mlstring','type.num.num'),'type.finite_map.fmap'('type.mlstring.mlstring','type.holSyntax.type')),V_27sig_27))),s('type.pair.prod'('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27))),V_27i_27),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.holSyntax.type','const.holSyntax.Tyapp_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.holSyntax.type'),'const.list.CONS_2'(s('type.holSyntax.type','const.holSyntax.Tyapp_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.holSyntax.type'),'const.list.NIL_0'))),s('type.list.list'('type.holSyntax.type'),'const.list.CONS_2'(s('type.holSyntax.type','const.holSyntax.Tyapp_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.holSyntax.type'),'const.list.CONS_2'(s('type.holSyntax.type','const.holSyntax.Tyapp_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.holSyntax.type'),'const.list.NIL_0'))),s('type.list.list'('type.holSyntax.type'),'const.list.CONS_2'(s('type.holSyntax.type','const.holSyntax.Tyapp_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.holSyntax.type'),'const.list.NIL_0'))),s('type.list.list'('type.holSyntax.type'),'const.list.NIL_0'))))))),s('type.list.list'('type.holSyntax.type'),'const.list.NIL_0'))))))))) = s('fun'('fun'('type.mlstring.mlstring',V_27U_27),V_27U_27),'const.combin.K_1'(s(V_27U_27,'happ'(s('fun'('type.list.list'(V_27U_27),V_27U_27),'happ'(s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'const.pair.SND_1'(s('type.pair.prod'('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27))),V_27i_27))),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('type.list.list'(V_27U_27),'const.list.NIL_0'))))) & (s('fun'('fun'('type.mlstring.mlstring',V_27U_27),V_27U_27),'const.holSemantics.instance_4'(s('type.finite_map.fmap'('type.mlstring.mlstring','type.holSyntax.type'),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.mlstring.mlstring','type.num.num'),'type.finite_map.fmap'('type.mlstring.mlstring','type.holSyntax.type')),V_27sig_27))),s('type.pair.prod'('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27))),V_27i_27),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.holSyntax.type','const.holSyntax.Tyapp_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.holSyntax.type'),'const.list.CONS_2'(s('type.holSyntax.type','const.holSyntax.Tyapp_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.holSyntax.type'),'const.list.NIL_0'))),s('type.list.list'('type.holSyntax.type'),'const.list.CONS_2'(s('type.holSyntax.type','const.holSyntax.Tyapp_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.holSyntax.type'),'const.list.CONS_2'(s('type.holSyntax.type','const.holSyntax.Tyapp_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.holSyntax.type'),'const.list.NIL_0'))),s('type.list.list'('type.holSyntax.type'),'const.list.CONS_2'(s('type.holSyntax.type','const.holSyntax.Tyapp_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.holSyntax.type'),'const.list.NIL_0'))),s('type.list.list'('type.holSyntax.type'),'const.list.NIL_0'))))))),s('type.list.list'('type.holSyntax.type'),'const.list.NIL_0'))))))))) = s('fun'('fun'('type.mlstring.mlstring',V_27U_27),V_27U_27),'const.combin.K_1'(s(V_27U_27,'happ'(s('fun'('type.list.list'(V_27U_27),V_27U_27),'happ'(s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'const.pair.SND_1'(s('type.pair.prod'('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27))),V_27i_27))),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'(V_27U_27),'const.list.NIL_0'))))) & (s('fun'('fun'('type.mlstring.mlstring',V_27U_27),V_27U_27),'const.holSemantics.instance_4'(s('type.finite_map.fmap'('type.mlstring.mlstring','type.holSyntax.type'),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.mlstring.mlstring','type.num.num'),'type.finite_map.fmap'('type.mlstring.mlstring','type.holSyntax.type')),V_27sig_27))),s('type.pair.prod'('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27))),V_27i_27),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.holSyntax.type','const.holSyntax.Tyapp_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.holSyntax.type'),'const.list.CONS_2'(s('type.holSyntax.type','const.holSyntax.Tyapp_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.holSyntax.type'),'const.list.NIL_0'))),s('type.list.list'('type.holSyntax.type'),'const.list.CONS_2'(s('type.holSyntax.type','const.holSyntax.Tyapp_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.holSyntax.type'),'const.list.CONS_2'(s('type.holSyntax.type','const.holSyntax.Tyapp_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.holSyntax.type'),'const.list.NIL_0'))),s('type.list.list'('type.holSyntax.type'),'const.list.CONS_2'(s('type.holSyntax.type','const.holSyntax.Tyapp_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.holSyntax.type'),'const.list.NIL_0'))),s('type.list.list'('type.holSyntax.type'),'const.list.NIL_0'))))))),s('type.list.list'('type.holSyntax.type'),'const.list.NIL_0'))))))))) = s('fun'('fun'('type.mlstring.mlstring',V_27U_27),V_27U_27),'const.combin.K_1'(s(V_27U_27,'happ'(s('fun'('type.list.list'(V_27U_27),V_27U_27),'happ'(s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'const.pair.SND_1'(s('type.pair.prod'('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27))),V_27i_27))),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'(V_27U_27),'const.list.NIL_0'))))) & (s('fun'('fun'('type.mlstring.mlstring',V_27U_27),V_27U_27),'const.holSemantics.instance_4'(s('type.finite_map.fmap'('type.mlstring.mlstring','type.holSyntax.type'),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.mlstring.mlstring','type.num.num'),'type.finite_map.fmap'('type.mlstring.mlstring','type.holSyntax.type')),V_27sig_27))),s('type.pair.prod'('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27))),V_27i_27),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.holSyntax.type','const.holSyntax.Tyapp_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.holSyntax.type'),'const.list.CONS_2'(s('type.holSyntax.type','const.holSyntax.Tyapp_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.holSyntax.type'),'const.list.NIL_0'))),s('type.list.list'('type.holSyntax.type'),'const.list.CONS_2'(s('type.holSyntax.type','const.holSyntax.Tyapp_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.holSyntax.type'),'const.list.NIL_0'))),s('type.list.list'('type.holSyntax.type'),'const.list.NIL_0'))))))))) = s('fun'('fun'('type.mlstring.mlstring',V_27U_27),V_27U_27),'const.combin.K_1'(s(V_27U_27,'happ'(s('fun'('type.list.list'(V_27U_27),V_27U_27),'happ'(s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'const.pair.SND_1'(s('type.pair.prod'('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27))),V_27i_27))),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'(V_27U_27),'const.list.NIL_0'))))) & (![Vx]: s(V_27U_27,'happ'(s('fun'('fun'('type.mlstring.mlstring',V_27U_27),V_27U_27),'const.holSemantics.instance_4'(s('type.finite_map.fmap'('type.mlstring.mlstring','type.holSyntax.type'),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.mlstring.mlstring','type.num.num'),'type.finite_map.fmap'('type.mlstring.mlstring','type.holSyntax.type')),V_27sig_27))),s('type.pair.prod'('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27))),V_27i_27),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.holSyntax.type','const.holSyntax.Tyapp_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.holSyntax.type'),'const.list.CONS_2'(s('type.holSyntax.type','const.holSyntax.Tyapp_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.holSyntax.type'),'const.list.CONS_2'(s('type.holSyntax.type','const.holSyntax.Tyvar_1'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'('type.holSyntax.type'),'const.list.CONS_2'(s('type.holSyntax.type','const.holSyntax.Tyapp_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.holSyntax.type'),'const.list.NIL_0'))),s('type.list.list'('type.holSyntax.type'),'const.list.NIL_0'))))))),s('type.list.list'('type.holSyntax.type'),'const.list.CONS_2'(s('type.holSyntax.type','const.holSyntax.Tyapp_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.holSyntax.type'),'const.list.NIL_0'))),s('type.list.list'('type.holSyntax.type'),'const.list.NIL_0'))))))))),s('fun'('type.mlstring.mlstring',V_27U_27),Vx))) = s(V_27U_27,'happ'(s('fun'('type.list.list'(V_27U_27),V_27U_27),'happ'(s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'const.pair.SND_1'(s('type.pair.prod'('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27))),V_27i_27))),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'(V_27U_27),'const.list.CONS_2'(s(V_27U_27,'happ'(s('fun'('type.mlstring.mlstring',V_27U_27),Vx),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'(V_27U_27),'const.list.NIL_0'))))) & ![Vx]: s(V_27U_27,'happ'(s('fun'('fun'('type.mlstring.mlstring',V_27U_27),V_27U_27),'const.holSemantics.instance_4'(s('type.finite_map.fmap'('type.mlstring.mlstring','type.holSyntax.type'),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.mlstring.mlstring','type.num.num'),'type.finite_map.fmap'('type.mlstring.mlstring','type.holSyntax.type')),V_27sig_27))),s('type.pair.prod'('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27))),V_27i_27),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.holSyntax.type','const.holSyntax.Tyapp_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.holSyntax.type'),'const.list.CONS_2'(s('type.holSyntax.type','const.holSyntax.Tyapp_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.holSyntax.type'),'const.list.CONS_2'(s('type.holSyntax.type','const.holSyntax.Tyvar_1'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'('type.holSyntax.type'),'const.list.CONS_2'(s('type.holSyntax.type','const.holSyntax.Tyapp_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.holSyntax.type'),'const.list.NIL_0'))),s('type.list.list'('type.holSyntax.type'),'const.list.NIL_0'))))))),s('type.list.list'('type.holSyntax.type'),'const.list.CONS_2'(s('type.holSyntax.type','const.holSyntax.Tyapp_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.holSyntax.type'),'const.list.NIL_0'))),s('type.list.list'('type.holSyntax.type'),'const.list.NIL_0'))))))))),s('fun'('type.mlstring.mlstring',V_27U_27),Vx))) = s(V_27U_27,'happ'(s('fun'('type.list.list'(V_27U_27),V_27U_27),'happ'(s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'const.pair.SND_1'(s('type.pair.prod'('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27))),V_27i_27))),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'(V_27U_27),'const.list.CONS_2'(s(V_27U_27,'happ'(s('fun'('type.mlstring.mlstring',V_27U_27),Vx),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'(V_27U_27),'const.list.NIL_0')))))))))))))).
fof('thm.holBool.Boolrel_def', axiom, ![V_27U_27]: ![V_27mem_27, V_27R_27]: s(V_27U_27,'const.holBool.Boolrel|48|_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('bool','fun'('bool','bool')),V_27R_27))) = s(V_27U_27,'happ'(s('fun'('fun'(V_27U_27,V_27U_27),V_27U_27),'const.setSpec.abstract_3'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s(V_27U_27,'const.setSpec.two_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27))),s(V_27U_27,'const.setSpec.funspace_3'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s(V_27U_27,'const.setSpec.two_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27))),s(V_27U_27,'const.setSpec.two_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27))))))),s('fun'(V_27U_27,V_27U_27),'_dst_x0x1_2'(s('fun'('fun'(V_27U_27,V_27U_27),V_27U_27),'const.setSpec.abstract_3'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s(V_27U_27,'const.setSpec.two_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27))),s(V_27U_27,'const.setSpec.two_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27))))),s('fun'(V_27U_27,'fun'(V_27U_27,V_27U_27)),'_dst_x00x11_2'(s('fun'('bool',V_27U_27),'const.setSpec.boolean_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27))),s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),'_dst_x00x10x01_3'(s('fun'('bool','fun'('bool','bool')),V_27R_27),s('fun'(V_27U_27,'bool'),'_dst_x1x0_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),'=_0'),s(V_27U_27,'const.setSpec.true_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27))))),s('fun'(V_27U_27,'bool'),'_dst_x1x0_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),'=_0'),s(V_27U_27,'const.setSpec.true_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27)))))))))))))).
fof('thm.holBool.is_true_interpretation_def', axiom, ![V_27U_27]: ![V_27mem_27, V_27_7c206_7c_7c179_7c_27]: s('bool','const.holBool.is_true_interpretation|48|_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),V_27_7c206_7c_7c179_7c_27))) = s('bool','const.holSemantics.interprets|48|_5'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),V_27_7c206_7c_7c179_7c_27),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.mlstring.mlstring'),'const.list.NIL_0'),s('fun'('type.list.list'(V_27U_27),V_27U_27),'const.combin.K_1'(s(V_27U_27,'const.setSpec.true_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27)))))))).
fof('thm.holBool.is_and_interpretation_def', axiom, ![V_27U_27]: ![V_27mem_27, V_27_7c206_7c_7c179_7c_27]: s('bool','const.holBool.is_and_interpretation|48|_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),V_27_7c206_7c_7c179_7c_27))) = s('bool','const.holSemantics.interprets|48|_5'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),V_27_7c206_7c_7c179_7c_27),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'('type.mlstring.mlstring'),'const.list.NIL_0'),s('fun'('type.list.list'(V_27U_27),V_27U_27),'const.combin.K_1'(s(V_27U_27,'const.holBool.Boolrel|48|_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('bool','fun'('bool','bool')),'|dollar|and_0')))))))).
fof('thm.holBool.is_implies_interpretation_def', axiom, ![V_27U_27]: ![V_27mem_27, V_27_7c206_7c_7c179_7c_27]: s('bool','const.holBool.is_implies_interpretation|48|_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),V_27_7c206_7c_7c179_7c_27))) = s('bool','const.holSemantics.interprets|48|_5'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),V_27_7c206_7c_7c179_7c_27),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.mlstring.mlstring'),'const.list.NIL_0'),s('fun'('type.list.list'(V_27U_27),V_27U_27),'const.combin.K_1'(s(V_27U_27,'const.holBool.Boolrel|48|_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('bool','fun'('bool','bool')),'|dollar|imply_0')))))))).
fof('thm.holBool.is_forall_interpretation_def', axiom, ![V_27U_27]: ![V_27mem_27, V_27_7c206_7c_7c179_7c_27]: s('bool','const.holBool.is_forall_interpretation|48|_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),V_27_7c206_7c_7c179_7c_27))) = s('bool','const.holSemantics.interprets|48|_5'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),V_27_7c206_7c_7c179_7c_27),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.mlstring.mlstring'),'const.list.CONS_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.mlstring.mlstring'),'const.list.NIL_0'))),s('fun'('type.list.list'(V_27U_27),V_27U_27),'_dst_x0x1x0x1_4'(s('fun'(V_27U_27,'fun'(V_27U_27,'fun'('fun'(V_27U_27,V_27U_27),V_27U_27))),'const.setSpec.abstract_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27))),s('fun'('type.list.list'(V_27U_27),V_27U_27),'_dst_x0x1x0_3'(s('fun'(V_27U_27,'fun'(V_27U_27,V_27U_27)),'const.setSpec.funspace_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27))),s('fun'('type.list.list'(V_27U_27),V_27U_27),'const.list.HD_0'),s(V_27U_27,'const.setSpec.two_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27))))),s(V_27U_27,'const.setSpec.two_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27))),s('fun'('type.list.list'(V_27U_27),'fun'(V_27U_27,V_27U_27)),'_dst_x00x11_2'(s('fun'('bool',V_27U_27),'const.setSpec.boolean_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27))),s('fun'('type.list.list'(V_27U_27),'fun'(V_27U_27,'bool')),'_dst_x00x11_2'(s('fun'('fun'(V_27U_27,'bool'),'bool'),'!_0'),s('fun'('type.list.list'(V_27U_27),'fun'(V_27U_27,'fun'(V_27U_27,'bool'))),'_dst_x000x101x011_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'(V_27U_27),'fun'(V_27U_27,'bool')),'_dst_x01x10_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('type.list.list'(V_27U_27),V_27U_27),'const.list.HD_0'))),s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),'const.setSpec.holds_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27)))))))))))))).
fof('thm.holBool.is_exists_interpretation_def', axiom, ![V_27U_27]: ![V_27mem_27, V_27_7c206_7c_7c179_7c_27]: s('bool','const.holBool.is_exists_interpretation|48|_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),V_27_7c206_7c_7c179_7c_27))) = s('bool','const.holSemantics.interprets|48|_5'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),V_27_7c206_7c_7c179_7c_27),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.mlstring.mlstring'),'const.list.CONS_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.mlstring.mlstring'),'const.list.NIL_0'))),s('fun'('type.list.list'(V_27U_27),V_27U_27),'_dst_x0x1x0x1_4'(s('fun'(V_27U_27,'fun'(V_27U_27,'fun'('fun'(V_27U_27,V_27U_27),V_27U_27))),'const.setSpec.abstract_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27))),s('fun'('type.list.list'(V_27U_27),V_27U_27),'_dst_x0x1x0_3'(s('fun'(V_27U_27,'fun'(V_27U_27,V_27U_27)),'const.setSpec.funspace_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27))),s('fun'('type.list.list'(V_27U_27),V_27U_27),'const.list.HD_0'),s(V_27U_27,'const.setSpec.two_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27))))),s(V_27U_27,'const.setSpec.two_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27))),s('fun'('type.list.list'(V_27U_27),'fun'(V_27U_27,V_27U_27)),'_dst_x00x11_2'(s('fun'('bool',V_27U_27),'const.setSpec.boolean_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27))),s('fun'('type.list.list'(V_27U_27),'fun'(V_27U_27,'bool')),'_dst_x00x11_2'(s('fun'('fun'(V_27U_27,'bool'),'bool'),'?_0'),s('fun'('type.list.list'(V_27U_27),'fun'(V_27U_27,'fun'(V_27U_27,'bool'))),'_dst_x000x101x011_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'(V_27U_27),'fun'(V_27U_27,'bool')),'_dst_x01x10_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('type.list.list'(V_27U_27),V_27U_27),'const.list.HD_0'))),s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),'const.setSpec.holds_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27)))))))))))))).
fof('thm.holBool.is_or_interpretation_def', axiom, ![V_27U_27]: ![V_27mem_27, V_27_7c206_7c_7c179_7c_27]: s('bool','const.holBool.is_or_interpretation|48|_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),V_27_7c206_7c_7c179_7c_27))) = s('bool','const.holSemantics.interprets|48|_5'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),V_27_7c206_7c_7c179_7c_27),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'('type.mlstring.mlstring'),'const.list.NIL_0'),s('fun'('type.list.list'(V_27U_27),V_27U_27),'const.combin.K_1'(s(V_27U_27,'const.holBool.Boolrel|48|_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('bool','fun'('bool','bool')),'|dollar|or_0')))))))).
fof('thm.holBool.is_false_interpretation_def', axiom, ![V_27U_27]: ![V_27mem_27, V_27_7c206_7c_7c179_7c_27]: s('bool','const.holBool.is_false_interpretation|48|_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),V_27_7c206_7c_7c179_7c_27))) = s('bool','const.holSemantics.interprets|48|_5'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),V_27_7c206_7c_7c179_7c_27),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.mlstring.mlstring'),'const.list.NIL_0'),s('fun'('type.list.list'(V_27U_27),V_27U_27),'const.combin.K_1'(s(V_27U_27,'const.setSpec.false_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27)))))))).
fof('thm.holBool.is_not_interpretation_def', axiom, ![V_27U_27]: ![V_27mem_27, V_27_7c206_7c_7c179_7c_27]: s('bool','const.holBool.is_not_interpretation|48|_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),V_27_7c206_7c_7c179_7c_27))) = s('bool','const.holSemantics.interprets|48|_5'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),V_27_7c206_7c_7c179_7c_27),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.mlstring.mlstring'),'const.list.NIL_0'),s('fun'('type.list.list'(V_27U_27),V_27U_27),'const.combin.K_1'(s(V_27U_27,'const.setSpec.abstract_4'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s(V_27U_27,'const.setSpec.two_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27))),s(V_27U_27,'const.setSpec.two_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27))),s('fun'(V_27U_27,V_27U_27),'_dst_x0x1_2'(s('fun'('bool',V_27U_27),'const.setSpec.boolean_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27))),s('fun'(V_27U_27,'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'(V_27U_27,'bool'),'_dst_x1x0_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),'=_0'),s(V_27U_27,'const.setSpec.true_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27)))))))))))))))).
fof('thm.holBool.is_bool_interpretation_def', axiom, ![V_27U_27]: ![V_27mem_27, V_27i_27]: (p(s('bool','const.holBool.is_bool_interpretation|48|_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('type.pair.prod'('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27))),V_27i_27)))) <=> (p(s('bool','const.holSemantics.is_std_interpretation|48|_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('type.pair.prod'('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27))),V_27i_27)))) & (p(s('bool','const.holBool.is_true_interpretation|48|_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'const.pair.SND_1'(s('type.pair.prod'('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27))),V_27i_27)))))) & (p(s('bool','const.holBool.is_and_interpretation|48|_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'const.pair.SND_1'(s('type.pair.prod'('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27))),V_27i_27)))))) & (p(s('bool','const.holBool.is_implies_interpretation|48|_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'const.pair.SND_1'(s('type.pair.prod'('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27))),V_27i_27)))))) & (p(s('bool','const.holBool.is_forall_interpretation|48|_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'const.pair.SND_1'(s('type.pair.prod'('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27))),V_27i_27)))))) & (p(s('bool','const.holBool.is_exists_interpretation|48|_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'const.pair.SND_1'(s('type.pair.prod'('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27))),V_27i_27)))))) & (p(s('bool','const.holBool.is_or_interpretation|48|_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'const.pair.SND_1'(s('type.pair.prod'('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27))),V_27i_27)))))) & (p(s('bool','const.holBool.is_false_interpretation|48|_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'const.pair.SND_1'(s('type.pair.prod'('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27))),V_27i_27)))))) & p(s('bool','const.holBool.is_not_interpretation|48|_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'const.pair.SND_1'(s('type.pair.prod'('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27))),V_27i_27)))))))))))))))).
fof('thm.holBool.boolrel_in_funspace', axiom, ![V_27U_27]: ![V_27mem_27, V_27R_27]: (p(s('bool','const.setSpec.is_set_theory_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27)))) => p(s('bool','happ'(s('fun'(V_27U_27,'bool'),'happ'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s(V_27U_27,'const.holBool.Boolrel|48|_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('bool','fun'('bool','bool')),V_27R_27))))),s(V_27U_27,'const.setSpec.funspace_3'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s(V_27U_27,'const.setSpec.two_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27))),s(V_27U_27,'const.setSpec.funspace_3'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s(V_27U_27,'const.setSpec.two_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27))),s(V_27U_27,'const.setSpec.two_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27)))))))))))).
fof('thm.holBool.apply_boolrel', axiom, ![V_27U_27]: ![V_27mem_27, V_27R_27]: (p(s('bool','const.setSpec.is_set_theory_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27)))) => ![V_27b_7c49_7c_27, V_27b2_27, V_27b3_27]: ((p(s('bool','happ'(s('fun'(V_27U_27,'bool'),'happ'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s(V_27U_27,V_27b_7c49_7c_27))),s(V_27U_27,'const.setSpec.two_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27)))))) & (p(s('bool','happ'(s('fun'(V_27U_27,'bool'),'happ'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s(V_27U_27,V_27b2_27))),s(V_27U_27,'const.setSpec.two_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27)))))) & ?[Vv]: ((p(s('bool',Vv)) <=> s(V_27U_27,V_27b2_27) = s(V_27U_27,'const.setSpec.true_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27)))) & ?[Vv_27]: ((p(s('bool',Vv_27)) <=> s(V_27U_27,V_27b_7c49_7c_27) = s(V_27U_27,'const.setSpec.true_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27)))) & s(V_27U_27,V_27b3_27) = s(V_27U_27,'const.setSpec.boolean_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('bool','happ'(s('fun'('bool','bool'),'happ'(s('fun'('bool','fun'('bool','bool')),V_27R_27),s('bool',Vv_27))),s('bool',Vv))))))))) => s(V_27U_27,'const.setSpec.apply_3'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s(V_27U_27,'const.setSpec.apply_3'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s(V_27U_27,'const.holBool.Boolrel|48|_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('fun'('bool','fun'('bool','bool')),V_27R_27))),s(V_27U_27,V_27b_7c49_7c_27))),s(V_27U_27,V_27b2_27))) = s(V_27U_27,V_27b3_27)))).
fof('thm.holBool.bool_has_bool_interpretation', axiom, ![V_27U_27]: ![V_27mem_27]: (p(s('bool','const.setSpec.is_set_theory_1'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27)))) => ![V_27ctxt_27, V_27i_27]: ((p(s('bool','const.holSyntax.theory_ok_1'(s('type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.mlstring.mlstring','type.num.num'),'type.finite_map.fmap'('type.mlstring.mlstring','type.holSyntax.type')),'fun'('type.holSyntax.term','bool')),'const.pair.,_2'(s('type.pair.prod'('type.finite_map.fmap'('type.mlstring.mlstring','type.num.num'),'type.finite_map.fmap'('type.mlstring.mlstring','type.holSyntax.type')),'const.pair.,_2'(s('type.finite_map.fmap'('type.mlstring.mlstring','type.num.num'),'const.alist.alist_to_fmap_1'(s('type.list.list'('type.pair.prod'('type.mlstring.mlstring','type.num.num')),'const.list.FLAT_1'(s('type.list.list'('type.list.list'('type.pair.prod'('type.mlstring.mlstring','type.num.num'))),'const.list.MAP_2'(s('fun'('type.holSyntax.update','type.list.list'('type.pair.prod'('type.mlstring.mlstring','type.num.num'))),'const.holSyntax.types_of_upd_0'),s('type.list.list'('type.holSyntax.update'),'const.holBoolSyntax.mk_bool_ctxt_1'(s('type.list.list'('type.holSyntax.update'),V_27ctxt_27))))))))),s('type.finite_map.fmap'('type.mlstring.mlstring','type.holSyntax.type'),'const.alist.alist_to_fmap_1'(s('type.list.list'('type.pair.prod'('type.mlstring.mlstring','type.holSyntax.type')),'const.list.FLAT_1'(s('type.list.list'('type.list.list'('type.pair.prod'('type.mlstring.mlstring','type.holSyntax.type'))),'const.list.MAP_2'(s('fun'('type.holSyntax.update','type.list.list'('type.pair.prod'('type.mlstring.mlstring','type.holSyntax.type'))),'const.holSyntax.consts_of_upd_0'),s('type.list.list'('type.holSyntax.update'),'const.holBoolSyntax.mk_bool_ctxt_1'(s('type.list.list'('type.holSyntax.update'),V_27ctxt_27))))))))))),s('fun'('type.holSyntax.term','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.holSyntax.term'),'const.list.FLAT_1'(s('type.list.list'('type.list.list'('type.holSyntax.term')),'const.list.MAP_2'(s('fun'('type.holSyntax.update','type.list.list'('type.holSyntax.term')),'_dst_x0x1x1_3'(s('fun'('type.list.list'('type.holSyntax.term'),'fun'('type.list.list'('type.holSyntax.term'),'type.list.list'('type.holSyntax.term'))),'const.list.APPEND_0'),s('fun'('type.holSyntax.update','type.list.list'('type.holSyntax.term')),'const.holSyntax.axexts_of_upd_0'),s('fun'('type.holSyntax.update','type.list.list'('type.holSyntax.term')),'const.holSyntax.conexts_of_upd_0'))),s('type.list.list'('type.holSyntax.update'),'const.holBoolSyntax.mk_bool_ctxt_1'(s('type.list.list'('type.holSyntax.update'),V_27ctxt_27)))))))))))))) & p(s('bool','const.holSemantics.models|48|_3'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('type.pair.prod'('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27))),V_27i_27),s('type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.mlstring.mlstring','type.num.num'),'type.finite_map.fmap'('type.mlstring.mlstring','type.holSyntax.type')),'fun'('type.holSyntax.term','bool')),'const.pair.,_2'(s('type.pair.prod'('type.finite_map.fmap'('type.mlstring.mlstring','type.num.num'),'type.finite_map.fmap'('type.mlstring.mlstring','type.holSyntax.type')),'const.pair.,_2'(s('type.finite_map.fmap'('type.mlstring.mlstring','type.num.num'),'const.alist.alist_to_fmap_1'(s('type.list.list'('type.pair.prod'('type.mlstring.mlstring','type.num.num')),'const.list.FLAT_1'(s('type.list.list'('type.list.list'('type.pair.prod'('type.mlstring.mlstring','type.num.num'))),'const.list.MAP_2'(s('fun'('type.holSyntax.update','type.list.list'('type.pair.prod'('type.mlstring.mlstring','type.num.num'))),'const.holSyntax.types_of_upd_0'),s('type.list.list'('type.holSyntax.update'),'const.holBoolSyntax.mk_bool_ctxt_1'(s('type.list.list'('type.holSyntax.update'),V_27ctxt_27))))))))),s('type.finite_map.fmap'('type.mlstring.mlstring','type.holSyntax.type'),'const.alist.alist_to_fmap_1'(s('type.list.list'('type.pair.prod'('type.mlstring.mlstring','type.holSyntax.type')),'const.list.FLAT_1'(s('type.list.list'('type.list.list'('type.pair.prod'('type.mlstring.mlstring','type.holSyntax.type'))),'const.list.MAP_2'(s('fun'('type.holSyntax.update','type.list.list'('type.pair.prod'('type.mlstring.mlstring','type.holSyntax.type'))),'const.holSyntax.consts_of_upd_0'),s('type.list.list'('type.holSyntax.update'),'const.holBoolSyntax.mk_bool_ctxt_1'(s('type.list.list'('type.holSyntax.update'),V_27ctxt_27))))))))))),s('fun'('type.holSyntax.term','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.holSyntax.term'),'const.list.FLAT_1'(s('type.list.list'('type.list.list'('type.holSyntax.term')),'const.list.MAP_2'(s('fun'('type.holSyntax.update','type.list.list'('type.holSyntax.term')),'_dst_x0x1x1_3'(s('fun'('type.list.list'('type.holSyntax.term'),'fun'('type.list.list'('type.holSyntax.term'),'type.list.list'('type.holSyntax.term'))),'const.list.APPEND_0'),s('fun'('type.holSyntax.update','type.list.list'('type.holSyntax.term')),'const.holSyntax.axexts_of_upd_0'),s('fun'('type.holSyntax.update','type.list.list'('type.holSyntax.term')),'const.holSyntax.conexts_of_upd_0'))),s('type.list.list'('type.holSyntax.update'),'const.holBoolSyntax.mk_bool_ctxt_1'(s('type.list.list'('type.holSyntax.update'),V_27ctxt_27))))))))))))))) => p(s('bool','const.holBool.is_bool_interpretation|48|_2'(s('fun'(V_27U_27,'fun'(V_27U_27,'bool')),V_27mem_27),s('type.pair.prod'('fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27)),'fun'('type.mlstring.mlstring','fun'('type.list.list'(V_27U_27),V_27U_27))),V_27i_27))))))).
