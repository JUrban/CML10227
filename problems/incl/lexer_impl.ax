fof('thm.lexer_impl.get_token_eqn', axiom, ![V_27s_27]: ?[Vv]: ((p(s('bool',Vv)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) & ?[Vv_27]: ((p(s('bool',Vv_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))) & ?[Vv_27_27]: ((p(s('bool',Vv_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))) & ?[Vv_27_27_27]: ((p(s('bool',Vv_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))) & ?[Vv_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))) & ?[Vv_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))) & ?[Vv_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))))) & ?[Vv_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))) & ?[Vv_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))))) & ?[Vv_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))) & s('type.tokens.token','const.lexer_fun.get_token_1'(s('type.list.list'('type.string.char'),V_27s_27))) = s('type.tokens.token','happ'(s('fun'('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.tokens.token')),'type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.tokens.token')),'type.tokens.token')),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.tokens.token','fun'('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.tokens.token')),'type.tokens.token'))),'const.list.list_CASE_0'),s('type.list.list'('type.string.char'),V_27s_27))),s('type.tokens.token','const.tokens.LexErrorT_0'))),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.tokens.token')),'_dst_x01x10x10_3'(s('fun'('type.list.list'('type.string.char'),'fun'('type.tokens.token','fun'('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.tokens.token')),'type.tokens.token'))),'const.list.list_CASE_0'),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x1x1_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'const.string.char_le_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x1x1_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'const.string.char_le_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x1x1_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'const.string.char_le_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.tokens.token','const.tokens.HashT_0'),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x0x0_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.tokens.token','const.tokens.TyvarT_1'(s('type.list.list'('type.string.char'),V_27s_27))),s('type.tokens.token','const.tokens.SymbolT_1'(s('type.list.list'('type.string.char'),V_27s_27))))))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.tokens.token','const.tokens.LparT_0'),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x0x0_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.tokens.token','const.tokens.RparT_0'),s('type.tokens.token','const.tokens.SymbolT_1'(s('type.list.list'('type.string.char'),V_27s_27))))))))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x1x1_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'const.string.char_le_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.tokens.token','const.tokens.StarT_0'),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x0x0_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.tokens.token','const.tokens.CommaT_0'),s('type.tokens.token','const.tokens.SymbolT_1'(s('type.list.list'('type.string.char'),V_27s_27))))))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.tokens.token','const.tokens.ColonT_0'),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x0x0_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.tokens.token','const.tokens.SemicolonT_0'),s('type.tokens.token','const.tokens.SymbolT_1'(s('type.list.list'('type.string.char'),V_27s_27))))))))))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x1x1_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'const.string.char_le_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x1x1_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'const.string.char_le_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.string.char','bool'),'happ'(s('fun'('type.string.char','fun'('type.string.char','bool')),'const.string.char_le_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'const.string.char_le_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))),s('type.tokens.token','const.tokens.AlphaT_1'(s('type.list.list'('type.string.char'),V_27s_27))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x0x0_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.tokens.token','const.tokens.EqualsT_0'),s('type.tokens.token','const.tokens.SymbolT_1'(s('type.list.list'('type.string.char'),V_27s_27))))))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.tokens.token','const.tokens.LbrackT_0'),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x0x0_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.tokens.token','const.tokens.RbrackT_0'),s('type.tokens.token','const.tokens.SymbolT_1'(s('type.list.list'('type.string.char'),V_27s_27))))))))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x1x1_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'const.string.char_le_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.tokens.token','const.tokens.UnderbarT_0'),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.string.char','bool'),'happ'(s('fun'('type.string.char','fun'('type.string.char','bool')),'const.string.char_le_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'const.string.char_le_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))),s('type.tokens.token','const.tokens.AlphaT_1'(s('type.list.list'('type.string.char'),V_27s_27))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x0x0_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.tokens.token','const.tokens.LbraceT_0'),s('type.tokens.token','const.tokens.SymbolT_1'(s('type.list.list'('type.string.char'),V_27s_27))))))))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.tokens.token','const.tokens.BarT_0'),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x0x0_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.tokens.token','const.tokens.RbraceT_0'),s('type.tokens.token','const.tokens.SymbolT_1'(s('type.list.list'('type.string.char'),V_27s_27))))))))))))),s('fun'('type.string.char','fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.tokens.token'))),'_dst_x000x100x100x100_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'const.string.char_lt_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x1x1_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'const.string.char_le_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x0x0_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.tokens.token','const.tokens.TyvarT_1'(s('type.list.list'('type.string.char'),V_27s_27))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.ArrowT_0'))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.DotsT_0'))),s('type.tokens.token','const.tokens.SymbolT_1'(s('type.list.list'('type.string.char'),V_27s_27))))))))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1_2'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.SealT_0'))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1_2'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.DarrowT_0'))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x0x0_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.string.char','bool'),'happ'(s('fun'('type.string.char','fun'('type.string.char','bool')),'const.string.char_le_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'const.string.char_le_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))),s('type.tokens.token','const.tokens.AlphaT_1'(s('type.list.list'('type.string.char'),V_27s_27))),s('type.tokens.token','const.tokens.SymbolT_1'(s('type.list.list'('type.string.char'),V_27s_27))))))))))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x1x0_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'const.string.char_le_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x1x1_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'const.string.char_le_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x1x1_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'const.string.char_le_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x0x0_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'const.string.char_lt_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.AndT_0'))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.AndalsoT_0'))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.AsT_0'))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.CaseT_0'))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.DatatypeT_0'))),s('type.tokens.token','const.tokens.AlphaT_1'(s('type.list.list'('type.string.char'),V_27s_27))))))))))))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.ElseT_0'))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.EndT_0'))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.EqtypeT_0'))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.ExceptionT_0'))),s('type.tokens.token','const.tokens.AlphaT_1'(s('type.list.list'('type.string.char'),V_27s_27))))))))))))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x0x0_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'const.string.char_le_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.FnT_0'))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.FunT_0'))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.HandleT_0'))),s('type.tokens.token','const.tokens.AlphaT_1'(s('type.list.list'('type.string.char'),V_27s_27))))))))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.IfT_0'))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.InT_0'))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.IncludeT_0'))),s('type.tokens.token','const.tokens.AlphaT_1'(s('type.list.list'('type.string.char'),V_27s_27))))))))))))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x1x1_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'const.string.char_le_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.LetT_0'))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.LocalT_0'))),s('type.tokens.token','const.tokens.AlphaT_1'(s('type.list.list'('type.string.char'),V_27s_27))))))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x0x0_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.OfT_0'))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.OpT_0'))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.OpenT_0'))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.OrelseT_0'))),s('type.tokens.token','const.tokens.AlphaT_1'(s('type.list.list'('type.string.char'),V_27s_27))))))))))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.RaiseT_0'))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.RecT_0'))),s('type.tokens.token','const.tokens.AlphaT_1'(s('type.list.list'('type.string.char'),V_27s_27))))))))))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.SharingT_0'))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.SigT_0'))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.SignatureT_0'))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.StructT_0'))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27_27))),s('type.tokens.token','const.tokens.StructureT_0'))),s('type.tokens.token','const.tokens.AlphaT_1'(s('type.list.list'('type.string.char'),V_27s_27))))))))))))),s('fun'('type.string.char','type.tokens.token'),'_dst_x0x1x0x0_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'const.string.char_lt_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27_27))),s('type.tokens.token','const.tokens.ThenT_0'))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27_27))),s('type.tokens.token','const.tokens.TypeT_0'))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27_27))),s('type.tokens.token','const.tokens.ValT_0'))),s('type.tokens.token','const.tokens.AlphaT_1'(s('type.list.list'('type.string.char'),V_27s_27))))))))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27_27))),s('type.tokens.token','const.tokens.WhereT_0'))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv_27))),s('type.tokens.token','const.tokens.WithT_0'))),s('type.tokens.token','happ'(s('fun'('type.tokens.token','type.tokens.token'),'happ'(s('fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token')),'happ'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('bool',Vv))),s('type.tokens.token','const.tokens.WithtypeT_0'))),s('type.tokens.token','const.tokens.AlphaT_1'(s('type.list.list'('type.string.char'),V_27s_27))))))))))))))))),s('type.tokens.token','const.tokens.SymbolT_1'(s('type.list.list'('type.string.char'),V_27s_27)))))))))))))))))))))))))))))))))))))))))))))))))).
fof('thm.lexer_impl.lexer_impl_2_prove_ltb', axiom, ![V_27a_27]: (?[V_27acc_27, V_27d_27, V_27input_27]: s('type.pair.prod'('type.list.list'('type.tokens.token'),'type.pair.prod'('type.num.num','type.list.list'('type.string.char'))),V_27a_27) = s('type.pair.prod'('type.list.list'('type.tokens.token'),'type.pair.prod'('type.num.num','type.list.list'('type.string.char'))),'const.pair.,_2'(s('type.list.list'('type.tokens.token'),V_27acc_27),s('type.pair.prod'('type.num.num','type.list.list'('type.string.char')),'const.pair.,_2'(s('type.num.num',V_27d_27),s('type.list.list'('type.string.char'),V_27input_27))))) => ?[V_27acc_27, V_27d_27, V_27input_27]: s('type.pair.prod'('type.list.list'('type.tokens.token'),'type.pair.prod'('type.num.num','type.list.list'('type.string.char'))),V_27a_27) = s('type.pair.prod'('type.list.list'('type.tokens.token'),'type.pair.prod'('type.num.num','type.list.list'('type.string.char'))),'const.pair.,_2'(s('type.list.list'('type.tokens.token'),V_27acc_27),s('type.pair.prod'('type.num.num','type.list.list'('type.string.char')),'const.pair.,_2'(s('type.num.num',V_27d_27),s('type.list.list'('type.string.char'),V_27input_27))))))).
fof('thm.lexer_impl.lex_aux_ind', axiom, ![V_27P_27]: (![V_27acc_27, V_27d_27, V_27input_27]: ((![V_27v_27, V_27token_27, V_27rest_27, V_27new__acc_27]: ((s('type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))),'const.lexer_fun.next_token_1'(s('type.list.list'('type.string.char'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))),'const.option.SOME_1'(s('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),V_27v_27))) & (s('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),V_27v_27) = s('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),'const.pair.,_2'(s('type.tokens.token',V_27token_27),s('type.list.list'('type.string.char'),V_27rest_27))) & (s('type.list.list'('type.tokens.token'),V_27new__acc_27) = s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token',V_27token_27),s('type.list.list'('type.tokens.token'),V_27acc_27))) & (~ ((s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.SemicolonT_0') & s('type.num.num',V_27d_27) = s('type.num.num','const.num.|48|_0'))) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.LetT_0')) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.StructT_0')) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.SigT_0')) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.LparT_0')) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.EndT_0')) & ~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.RparT_0'))))))))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.string.char'),'bool')),'happ'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.string.char'),'bool'))),V_27P_27),s('type.list.list'('type.tokens.token'),V_27new__acc_27))),s('type.num.num',V_27d_27))),s('type.list.list'('type.string.char'),V_27rest_27))))) & (![V_27v_27, V_27token_27, V_27rest_27, V_27new__acc_27]: ((s('type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))),'const.lexer_fun.next_token_1'(s('type.list.list'('type.string.char'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))),'const.option.SOME_1'(s('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),V_27v_27))) & (s('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),V_27v_27) = s('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),'const.pair.,_2'(s('type.tokens.token',V_27token_27),s('type.list.list'('type.string.char'),V_27rest_27))) & (s('type.list.list'('type.tokens.token'),V_27new__acc_27) = s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token',V_27token_27),s('type.list.list'('type.tokens.token'),V_27acc_27))) & (~ ((s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.SemicolonT_0') & s('type.num.num',V_27d_27) = s('type.num.num','const.num.|48|_0'))) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.LetT_0')) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.StructT_0')) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.SigT_0')) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.LparT_0')) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.EndT_0')) & s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.RparT_0')))))))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.string.char'),'bool')),'happ'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.string.char'),'bool'))),V_27P_27),s('type.list.list'('type.tokens.token'),V_27new__acc_27))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.string.char'),V_27rest_27))))) & (![V_27v_27, V_27token_27, V_27rest_27, V_27new__acc_27]: ((s('type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))),'const.lexer_fun.next_token_1'(s('type.list.list'('type.string.char'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))),'const.option.SOME_1'(s('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),V_27v_27))) & (s('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),V_27v_27) = s('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),'const.pair.,_2'(s('type.tokens.token',V_27token_27),s('type.list.list'('type.string.char'),V_27rest_27))) & (s('type.list.list'('type.tokens.token'),V_27new__acc_27) = s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token',V_27token_27),s('type.list.list'('type.tokens.token'),V_27acc_27))) & (~ ((s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.SemicolonT_0') & s('type.num.num',V_27d_27) = s('type.num.num','const.num.|48|_0'))) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.LetT_0')) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.StructT_0')) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.SigT_0')) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.LparT_0')) & s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.EndT_0'))))))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.string.char'),'bool')),'happ'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.string.char'),'bool'))),V_27P_27),s('type.list.list'('type.tokens.token'),V_27new__acc_27))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.string.char'),V_27rest_27))))) & (![V_27v_27, V_27token_27, V_27rest_27, V_27new__acc_27]: ((s('type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))),'const.lexer_fun.next_token_1'(s('type.list.list'('type.string.char'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))),'const.option.SOME_1'(s('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),V_27v_27))) & (s('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),V_27v_27) = s('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),'const.pair.,_2'(s('type.tokens.token',V_27token_27),s('type.list.list'('type.string.char'),V_27rest_27))) & (s('type.list.list'('type.tokens.token'),V_27new__acc_27) = s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token',V_27token_27),s('type.list.list'('type.tokens.token'),V_27acc_27))) & (~ ((s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.SemicolonT_0') & s('type.num.num',V_27d_27) = s('type.num.num','const.num.|48|_0'))) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.LetT_0')) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.StructT_0')) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.SigT_0')) & s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.LparT_0')))))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.string.char'),'bool')),'happ'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.string.char'),'bool'))),V_27P_27),s('type.list.list'('type.tokens.token'),V_27new__acc_27))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.string.char'),V_27rest_27))))) & (![V_27v_27, V_27token_27, V_27rest_27, V_27new__acc_27]: ((s('type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))),'const.lexer_fun.next_token_1'(s('type.list.list'('type.string.char'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))),'const.option.SOME_1'(s('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),V_27v_27))) & (s('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),V_27v_27) = s('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),'const.pair.,_2'(s('type.tokens.token',V_27token_27),s('type.list.list'('type.string.char'),V_27rest_27))) & (s('type.list.list'('type.tokens.token'),V_27new__acc_27) = s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token',V_27token_27),s('type.list.list'('type.tokens.token'),V_27acc_27))) & (~ ((s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.SemicolonT_0') & s('type.num.num',V_27d_27) = s('type.num.num','const.num.|48|_0'))) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.LetT_0')) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.StructT_0')) & s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.SigT_0'))))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.string.char'),'bool')),'happ'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.string.char'),'bool'))),V_27P_27),s('type.list.list'('type.tokens.token'),V_27new__acc_27))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.string.char'),V_27rest_27))))) & (![V_27v_27, V_27token_27, V_27rest_27, V_27new__acc_27]: ((s('type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))),'const.lexer_fun.next_token_1'(s('type.list.list'('type.string.char'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))),'const.option.SOME_1'(s('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),V_27v_27))) & (s('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),V_27v_27) = s('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),'const.pair.,_2'(s('type.tokens.token',V_27token_27),s('type.list.list'('type.string.char'),V_27rest_27))) & (s('type.list.list'('type.tokens.token'),V_27new__acc_27) = s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token',V_27token_27),s('type.list.list'('type.tokens.token'),V_27acc_27))) & (~ ((s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.SemicolonT_0') & s('type.num.num',V_27d_27) = s('type.num.num','const.num.|48|_0'))) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.LetT_0')) & s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.StructT_0')))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.string.char'),'bool')),'happ'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.string.char'),'bool'))),V_27P_27),s('type.list.list'('type.tokens.token'),V_27new__acc_27))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.string.char'),V_27rest_27))))) & ![V_27v_27, V_27token_27, V_27rest_27, V_27new__acc_27]: ((s('type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))),'const.lexer_fun.next_token_1'(s('type.list.list'('type.string.char'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))),'const.option.SOME_1'(s('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),V_27v_27))) & (s('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),V_27v_27) = s('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),'const.pair.,_2'(s('type.tokens.token',V_27token_27),s('type.list.list'('type.string.char'),V_27rest_27))) & (s('type.list.list'('type.tokens.token'),V_27new__acc_27) = s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token',V_27token_27),s('type.list.list'('type.tokens.token'),V_27acc_27))) & (~ ((s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.SemicolonT_0') & s('type.num.num',V_27d_27) = s('type.num.num','const.num.|48|_0'))) & s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.LetT_0'))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.string.char'),'bool')),'happ'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.string.char'),'bool'))),V_27P_27),s('type.list.list'('type.tokens.token'),V_27new__acc_27))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.string.char'),V_27rest_27))))))))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.string.char'),'bool')),'happ'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.string.char'),'bool'))),V_27P_27),s('type.list.list'('type.tokens.token'),V_27acc_27))),s('type.num.num',V_27d_27))),s('type.list.list'('type.string.char'),V_27input_27))))) => ![V_27v_27, V_27v_7c49_7c_27, V_27v2_27]: p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.string.char'),'bool')),'happ'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.string.char'),'bool'))),V_27P_27),s('type.list.list'('type.tokens.token'),V_27v_27))),s('type.num.num',V_27v_7c49_7c_27))),s('type.list.list'('type.string.char'),V_27v2_27)))))).
fof('ARITY_0_3_const.lexer_impl.lex_aux', axiom, ![VV0, VV1, VV2]: s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'happ'(s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))))),'happ'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))))),'const.lexer_impl.lex_aux_0'),s('type.list.list'('type.tokens.token'),VV0))),s('type.num.num',VV1))),s('type.list.list'('type.string.char'),VV2))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'const.lexer_impl.lex_aux_3'(s('type.list.list'('type.tokens.token'),VV0),s('type.num.num',VV1),s('type.list.list'('type.string.char'),VV2)))).
fof('thm.lexer_impl.lex_aux_def', axiom, ![V_27input_27, V_27d_27, V_27acc_27]: ?[Vv]: ((p(s('bool',Vv)) <=> s('type.num.num',V_27d_27) = s('type.num.num','const.num.|48|_0')) & s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'happ'(s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))))),'happ'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))))),'const.lexer_impl.lex_aux_0'),s('type.list.list'('type.tokens.token'),V_27acc_27))),s('type.num.num',V_27d_27))),s('type.list.list'('type.string.char'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'const.option.option_CASE_3'(s('type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))),'const.lexer_fun.next_token_1'(s('type.list.list'('type.string.char'),V_27input_27))),s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'const.option.NONE_0'),s('fun'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))),'_dst_x1x0_2'(s('fun'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),'fun'('fun'('type.tokens.token','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))))),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))))),'const.pair.pair_CASE_0'),s('fun'('type.tokens.token','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))))),'_dst_x00x11x10_3'(s('fun'('fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))))),'const.bool.LET_0'),s('fun'('type.tokens.token','fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))))),'_dst_x000x100x011x111_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('fun'('type.tokens.token','bool'),'_dst_x0x1x0_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.tokens.token','bool'),'_dst_x1x0_2'(s('fun'('type.tokens.token','fun'('type.tokens.token','bool')),'=_0'),s('type.tokens.token','const.tokens.SemicolonT_0'))),s('bool',Vv))),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))))),'_dst_x00x11_2'(s('fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.tokens.token'),'type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))),'_dst_x00x01x10_3'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))),'const.pair.,_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'const.list.REVERSE_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'))))),s('fun'('type.tokens.token','fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))))),'_dst_x000x100x011x111_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('fun'('type.tokens.token','bool'),'_dst_x1x0_2'(s('fun'('type.tokens.token','fun'('type.tokens.token','bool')),'=_0'),s('type.tokens.token','const.tokens.LetT_0'))),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))))),'_dst_x01x00x10_3'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))))),'const.lexer_impl.lex_aux_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'))),s('fun'('type.tokens.token','fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))))),'_dst_x000x100x011x111_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('fun'('type.tokens.token','bool'),'_dst_x1x0_2'(s('fun'('type.tokens.token','fun'('type.tokens.token','bool')),'=_0'),s('type.tokens.token','const.tokens.StructT_0'))),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))))),'_dst_x01x00x10_3'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))))),'const.lexer_impl.lex_aux_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'))),s('fun'('type.tokens.token','fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))))),'_dst_x000x100x011x111_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('fun'('type.tokens.token','bool'),'_dst_x1x0_2'(s('fun'('type.tokens.token','fun'('type.tokens.token','bool')),'=_0'),s('type.tokens.token','const.tokens.SigT_0'))),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))))),'_dst_x01x00x10_3'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))))),'const.lexer_impl.lex_aux_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'))),s('fun'('type.tokens.token','fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))))),'_dst_x000x100x011x111_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('fun'('type.tokens.token','bool'),'_dst_x1x0_2'(s('fun'('type.tokens.token','fun'('type.tokens.token','bool')),'=_0'),s('type.tokens.token','const.tokens.LparT_0'))),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))))),'_dst_x01x00x10_3'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))))),'const.lexer_impl.lex_aux_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'))),s('fun'('type.tokens.token','fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))))),'_dst_x000x100x011x111_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('fun'('type.tokens.token','bool'),'_dst_x1x0_2'(s('fun'('type.tokens.token','fun'('type.tokens.token','bool')),'=_0'),s('type.tokens.token','const.tokens.EndT_0'))),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))))),'_dst_x01x00x10_3'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))))),'const.lexer_impl.lex_aux_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'))),s('fun'('type.tokens.token','fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))))),'_dst_x000x100x011x011_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('fun'('type.tokens.token','bool'),'_dst_x1x0_2'(s('fun'('type.tokens.token','fun'('type.tokens.token','bool')),'=_0'),s('type.tokens.token','const.tokens.RparT_0'))),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))))),'_dst_x01x00x10_3'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))))),'const.lexer_impl.lex_aux_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'))),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))))),'_dst_x01x00x10_3'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))))),'const.lexer_impl.lex_aux_0'),s('type.num.num',V_27d_27),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'))))))))))))))))),s('fun'('type.tokens.token','type.list.list'('type.tokens.token')),'_dst_x1x0_2'(s('fun'('type.tokens.token','fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'const.list.CONS_0'),s('type.list.list'('type.tokens.token'),V_27acc_27))))))))))).
fof('thm.lexer_impl.lex_until_toplevel_semicolon_def', axiom, ![V_27input_27]: s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'const.lexer_impl.lex_until_toplevel_semicolon_1'(s('type.list.list'('type.string.char'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'const.lexer_impl.lex_aux_3'(s('type.list.list'('type.tokens.token'),'const.list.NIL_0'),s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.string.char'),V_27input_27)))).
fof('thm.lexer_impl.lexer_impl_7_prove_ltb', axiom, ![V_27ts_27, V_27rest_27, V_27acc_27, V_27d_27, V_27input_27]: (s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'const.lexer_impl.lex_aux_3'(s('type.list.list'('type.tokens.token'),V_27acc_27),s('type.num.num',V_27d_27),s('type.list.list'('type.string.char'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')),'const.pair.,_2'(s('type.list.list'('type.tokens.token'),V_27ts_27),s('type.list.list'('type.string.char'),V_27rest_27))))) => ?[Vv]: ((p(s('bool',Vv)) <=> s('type.list.list'('type.tokens.token'),V_27acc_27) = s('type.list.list'('type.tokens.token'),'const.list.NIL_0')) & p(s('bool','const.bool.COND_3'(s('bool',Vv),s('bool','const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),V_27rest_27))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),V_27input_27))))),s('bool','const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),V_27rest_27))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),V_27input_27))))))))))).
fof('thm.lexer_impl.lex_until_toplevel_semicolon_LESS', axiom, ![V_27ts_27, V_27rest_27, V_27input_27]: (s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'const.lexer_impl.lex_until_toplevel_semicolon_1'(s('type.list.list'('type.string.char'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')),'const.pair.,_2'(s('type.list.list'('type.tokens.token'),V_27ts_27),s('type.list.list'('type.string.char'),V_27rest_27))))) => p(s('bool','const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),V_27rest_27))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),V_27input_27)))))))).
fof('thm.lexer_impl.lexer_impl_|49||48|_prove_ltb', axiom, ![V_27a_27]: (?[V_27acc_27, V_27d_27, V_27input_27]: s('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.pair.prod'('type.num.num','type.list.list'('type.string.char'))),V_27a_27) = s('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.pair.prod'('type.num.num','type.list.list'('type.string.char'))),'const.pair.,_2'(s('type.list.list'('type.lexer_fun.symbol'),V_27acc_27),s('type.pair.prod'('type.num.num','type.list.list'('type.string.char')),'const.pair.,_2'(s('type.num.num',V_27d_27),s('type.list.list'('type.string.char'),V_27input_27))))) => ?[V_27acc_27, V_27d_27, V_27input_27]: s('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.pair.prod'('type.num.num','type.list.list'('type.string.char'))),V_27a_27) = s('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.pair.prod'('type.num.num','type.list.list'('type.string.char'))),'const.pair.,_2'(s('type.list.list'('type.lexer_fun.symbol'),V_27acc_27),s('type.pair.prod'('type.num.num','type.list.list'('type.string.char')),'const.pair.,_2'(s('type.num.num',V_27d_27),s('type.list.list'('type.string.char'),V_27input_27))))))).
fof('thm.lexer_impl.lex_aux_alt_ind', axiom, ![V_27P_27]: (![V_27acc_27, V_27d_27, V_27input_27]: ((![V_27v_27, V_27token_27, V_27rest_27, V_27new__acc_27]: ((s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'const.lexer_fun.next_sym_1'(s('type.list.list'('type.string.char'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'const.option.SOME_1'(s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),V_27v_27))) & (s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),V_27v_27) = s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'const.pair.,_2'(s('type.lexer_fun.symbol',V_27token_27),s('type.list.list'('type.string.char'),V_27rest_27))) & (s('type.list.list'('type.lexer_fun.symbol'),V_27new__acc_27) = s('type.list.list'('type.lexer_fun.symbol'),'const.list.CONS_2'(s('type.lexer_fun.symbol',V_27token_27),s('type.list.list'('type.lexer_fun.symbol'),V_27acc_27))) & (~ ((s('type.lexer_fun.symbol',V_27token_27) = s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))) & s('type.num.num',V_27d_27) = s('type.num.num','const.num.|48|_0'))) & (~ (p(s('bool','const.bool.IN_2'(s('type.lexer_fun.symbol',V_27token_27),s('fun'('type.lexer_fun.symbol','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.lexer_fun.symbol'),'const.list.CONS_2'(s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.lexer_fun.symbol'),'const.list.CONS_2'(s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))),s('type.list.list'('type.lexer_fun.symbol'),'const.list.CONS_2'(s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.lexer_fun.symbol'),'const.list.CONS_2'(s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.lexer_fun.symbol'),'const.list.NIL_0'))))))))))))))) & ~ (p(s('bool','const.bool.IN_2'(s('type.lexer_fun.symbol',V_27token_27),s('fun'('type.lexer_fun.symbol','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.lexer_fun.symbol'),'const.list.CONS_2'(s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.lexer_fun.symbol'),'const.list.CONS_2'(s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.lexer_fun.symbol'),'const.list.NIL_0')))))))))))))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.string.char'),'bool')),'happ'(s('fun'('type.list.list'('type.lexer_fun.symbol'),'fun'('type.num.num','fun'('type.list.list'('type.string.char'),'bool'))),V_27P_27),s('type.list.list'('type.lexer_fun.symbol'),V_27new__acc_27))),s('type.num.num',V_27d_27))),s('type.list.list'('type.string.char'),V_27rest_27))))) & (![V_27v_27, V_27token_27, V_27rest_27, V_27new__acc_27]: ((s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'const.lexer_fun.next_sym_1'(s('type.list.list'('type.string.char'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'const.option.SOME_1'(s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),V_27v_27))) & (s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),V_27v_27) = s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'const.pair.,_2'(s('type.lexer_fun.symbol',V_27token_27),s('type.list.list'('type.string.char'),V_27rest_27))) & (s('type.list.list'('type.lexer_fun.symbol'),V_27new__acc_27) = s('type.list.list'('type.lexer_fun.symbol'),'const.list.CONS_2'(s('type.lexer_fun.symbol',V_27token_27),s('type.list.list'('type.lexer_fun.symbol'),V_27acc_27))) & (~ ((s('type.lexer_fun.symbol',V_27token_27) = s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))) & s('type.num.num',V_27d_27) = s('type.num.num','const.num.|48|_0'))) & (~ (p(s('bool','const.bool.IN_2'(s('type.lexer_fun.symbol',V_27token_27),s('fun'('type.lexer_fun.symbol','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.lexer_fun.symbol'),'const.list.CONS_2'(s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.lexer_fun.symbol'),'const.list.CONS_2'(s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))),s('type.list.list'('type.lexer_fun.symbol'),'const.list.CONS_2'(s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.lexer_fun.symbol'),'const.list.CONS_2'(s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.lexer_fun.symbol'),'const.list.NIL_0'))))))))))))))) & p(s('bool','const.bool.IN_2'(s('type.lexer_fun.symbol',V_27token_27),s('fun'('type.lexer_fun.symbol','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.lexer_fun.symbol'),'const.list.CONS_2'(s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.lexer_fun.symbol'),'const.list.CONS_2'(s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.lexer_fun.symbol'),'const.list.NIL_0'))))))))))))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.string.char'),'bool')),'happ'(s('fun'('type.list.list'('type.lexer_fun.symbol'),'fun'('type.num.num','fun'('type.list.list'('type.string.char'),'bool'))),V_27P_27),s('type.list.list'('type.lexer_fun.symbol'),V_27new__acc_27))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.string.char'),V_27rest_27))))) & ![V_27v_27, V_27token_27, V_27rest_27, V_27new__acc_27]: ((s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'const.lexer_fun.next_sym_1'(s('type.list.list'('type.string.char'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'const.option.SOME_1'(s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),V_27v_27))) & (s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),V_27v_27) = s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'const.pair.,_2'(s('type.lexer_fun.symbol',V_27token_27),s('type.list.list'('type.string.char'),V_27rest_27))) & (s('type.list.list'('type.lexer_fun.symbol'),V_27new__acc_27) = s('type.list.list'('type.lexer_fun.symbol'),'const.list.CONS_2'(s('type.lexer_fun.symbol',V_27token_27),s('type.list.list'('type.lexer_fun.symbol'),V_27acc_27))) & (~ ((s('type.lexer_fun.symbol',V_27token_27) = s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))) & s('type.num.num',V_27d_27) = s('type.num.num','const.num.|48|_0'))) & p(s('bool','const.bool.IN_2'(s('type.lexer_fun.symbol',V_27token_27),s('fun'('type.lexer_fun.symbol','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.lexer_fun.symbol'),'const.list.CONS_2'(s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.lexer_fun.symbol'),'const.list.CONS_2'(s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))),s('type.list.list'('type.lexer_fun.symbol'),'const.list.CONS_2'(s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.lexer_fun.symbol'),'const.list.CONS_2'(s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.lexer_fun.symbol'),'const.list.NIL_0')))))))))))))))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.string.char'),'bool')),'happ'(s('fun'('type.list.list'('type.lexer_fun.symbol'),'fun'('type.num.num','fun'('type.list.list'('type.string.char'),'bool'))),V_27P_27),s('type.list.list'('type.lexer_fun.symbol'),V_27new__acc_27))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.string.char'),V_27rest_27))))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.string.char'),'bool')),'happ'(s('fun'('type.list.list'('type.lexer_fun.symbol'),'fun'('type.num.num','fun'('type.list.list'('type.string.char'),'bool'))),V_27P_27),s('type.list.list'('type.lexer_fun.symbol'),V_27acc_27))),s('type.num.num',V_27d_27))),s('type.list.list'('type.string.char'),V_27input_27))))) => ![V_27v_27, V_27v_7c49_7c_27, V_27v2_27]: p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.string.char'),'bool')),'happ'(s('fun'('type.list.list'('type.lexer_fun.symbol'),'fun'('type.num.num','fun'('type.list.list'('type.string.char'),'bool'))),V_27P_27),s('type.list.list'('type.lexer_fun.symbol'),V_27v_27))),s('type.num.num',V_27v_7c49_7c_27))),s('type.list.list'('type.string.char'),V_27v2_27)))))).
fof('ARITY_0_3_const.lexer_impl.lex_aux_alt', axiom, ![VV0, VV1, VV2]: s('type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char'))),'happ'(s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char')))),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char'))))),'happ'(s('fun'('type.list.list'('type.lexer_fun.symbol'),'fun'('type.num.num','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char')))))),'const.lexer_impl.lex_aux_alt_0'),s('type.list.list'('type.lexer_fun.symbol'),VV0))),s('type.num.num',VV1))),s('type.list.list'('type.string.char'),VV2))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char'))),'const.lexer_impl.lex_aux_alt_3'(s('type.list.list'('type.lexer_fun.symbol'),VV0),s('type.num.num',VV1),s('type.list.list'('type.string.char'),VV2)))).
fof('thm.lexer_impl.lex_aux_alt_def', axiom, ![V_27input_27, V_27d_27, V_27acc_27]: ?[Vv]: ((p(s('bool',Vv)) <=> s('type.num.num',V_27d_27) = s('type.num.num','const.num.|48|_0')) & s('type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char'))),'happ'(s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char')))),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char'))))),'happ'(s('fun'('type.list.list'('type.lexer_fun.symbol'),'fun'('type.num.num','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char')))))),'const.lexer_impl.lex_aux_alt_0'),s('type.list.list'('type.lexer_fun.symbol'),V_27acc_27))),s('type.num.num',V_27d_27))),s('type.list.list'('type.string.char'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char'))),'const.option.option_CASE_3'(s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'const.lexer_fun.next_sym_1'(s('type.list.list'('type.string.char'),V_27input_27))),s('type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char'))),'const.option.NONE_0'),s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char')))),'_dst_x1x0_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'fun'('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char'))))),'type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char'))))),'const.pair.pair_CASE_0'),s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char'))))),'_dst_x00x11x10_3'(s('fun'('fun'('type.list.list'('type.lexer_fun.symbol'),'type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char')))),'fun'('type.list.list'('type.lexer_fun.symbol'),'type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char'))))),'const.bool.LET_0'),s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.lexer_fun.symbol'),'type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char')))))),'_dst_x000x100x011x111_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('fun'('type.lexer_fun.symbol','bool'),'_dst_x0x1x0_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.lexer_fun.symbol','bool'),'_dst_x1x0_2'(s('fun'('type.lexer_fun.symbol','fun'('type.lexer_fun.symbol','bool')),'=_0'),s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('bool',Vv))),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.lexer_fun.symbol'),'type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char'))))),'_dst_x00x11_2'(s('fun'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.lexer_fun.symbol'),'type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char')))),'_dst_x00x01x10_3'(s('fun'('type.list.list'('type.lexer_fun.symbol'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char')))),'const.pair.,_0'),s('fun'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.lexer_fun.symbol')),'const.list.REVERSE_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'))))),s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.lexer_fun.symbol'),'type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char')))))),'_dst_x000x100x011x111_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('fun'('type.lexer_fun.symbol','bool'),'_dst_x1x0_2'(s('fun'('type.lexer_fun.symbol','fun'('fun'('type.lexer_fun.symbol','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.lexer_fun.symbol','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.lexer_fun.symbol'),'happ'(s('fun'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.lexer_fun.symbol')),'happ'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.lexer_fun.symbol'))),'const.list.CONS_0'),s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.lexer_fun.symbol'),'happ'(s('fun'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.lexer_fun.symbol')),'happ'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.lexer_fun.symbol'))),'const.list.CONS_0'),s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))),s('type.list.list'('type.lexer_fun.symbol'),'happ'(s('fun'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.lexer_fun.symbol')),'happ'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.lexer_fun.symbol'))),'const.list.CONS_0'),s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.lexer_fun.symbol'),'happ'(s('fun'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.lexer_fun.symbol')),'happ'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.lexer_fun.symbol'))),'const.list.CONS_0'),s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'('type.lexer_fun.symbol'),'const.list.NIL_0'))))))))))))),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.lexer_fun.symbol'),'type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char'))))),'_dst_x01x00x10_3'(s('fun'('type.list.list'('type.lexer_fun.symbol'),'fun'('type.num.num','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char')))))),'const.lexer_impl.lex_aux_alt_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'))),s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.lexer_fun.symbol'),'type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char')))))),'_dst_x000x100x011x011_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('fun'('type.lexer_fun.symbol','bool'),'_dst_x1x0_2'(s('fun'('type.lexer_fun.symbol','fun'('fun'('type.lexer_fun.symbol','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.lexer_fun.symbol','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.lexer_fun.symbol'),'happ'(s('fun'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.lexer_fun.symbol')),'happ'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.lexer_fun.symbol'))),'const.list.CONS_0'),s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'('type.lexer_fun.symbol'),'happ'(s('fun'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.lexer_fun.symbol')),'happ'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.lexer_fun.symbol'))),'const.list.CONS_0'),s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.lexer_fun.symbol'),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.lexer_fun.symbol'),'type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char'))))),'_dst_x01x00x10_3'(s('fun'('type.list.list'('type.lexer_fun.symbol'),'fun'('type.num.num','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char')))))),'const.lexer_impl.lex_aux_alt_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'))),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.lexer_fun.symbol'),'type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char'))))),'_dst_x01x00x10_3'(s('fun'('type.list.list'('type.lexer_fun.symbol'),'fun'('type.num.num','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char')))))),'const.lexer_impl.lex_aux_alt_0'),s('type.num.num',V_27d_27),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'))))))))),s('fun'('type.lexer_fun.symbol','type.list.list'('type.lexer_fun.symbol')),'_dst_x1x0_2'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.lexer_fun.symbol'))),'const.list.CONS_0'),s('type.list.list'('type.lexer_fun.symbol'),V_27acc_27))))))))))).
fof('thm.lexer_impl.lex_until_top_semicolon_alt_def', axiom, ![V_27input_27]: s('type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char'))),'const.lexer_impl.lex_until_top_semicolon_alt_1'(s('type.list.list'('type.string.char'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char'))),'const.lexer_impl.lex_aux_alt_3'(s('type.list.list'('type.lexer_fun.symbol'),'const.list.NIL_0'),s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.string.char'),V_27input_27)))).
fof('thm.lexer_impl.lexer_impl_|49|5_prove_ltb', axiom, ![V_27ts_27, V_27rest_27, V_27acc_27, V_27d_27, V_27input_27]: (s('type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char'))),'const.lexer_impl.lex_aux_alt_3'(s('type.list.list'('type.lexer_fun.symbol'),V_27acc_27),s('type.num.num',V_27d_27),s('type.list.list'('type.string.char'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char'))),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char')),'const.pair.,_2'(s('type.list.list'('type.lexer_fun.symbol'),V_27ts_27),s('type.list.list'('type.string.char'),V_27rest_27))))) => ?[Vv]: ((p(s('bool',Vv)) <=> s('type.list.list'('type.lexer_fun.symbol'),V_27acc_27) = s('type.list.list'('type.lexer_fun.symbol'),'const.list.NIL_0')) & p(s('bool','const.bool.COND_3'(s('bool',Vv),s('bool','const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),V_27rest_27))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),V_27input_27))))),s('bool','const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),V_27rest_27))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),V_27input_27))))))))))).
fof('thm.lexer_impl.lex_until_top_semicolon_alt_LESS', axiom, ![V_27ts_27, V_27rest_27, V_27input_27]: (s('type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char'))),'const.lexer_impl.lex_until_top_semicolon_alt_1'(s('type.list.list'('type.string.char'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char'))),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char')),'const.pair.,_2'(s('type.list.list'('type.lexer_fun.symbol'),V_27ts_27),s('type.list.list'('type.string.char'),V_27rest_27))))) => p(s('bool','const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),V_27rest_27))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),V_27input_27)))))))).
fof('thm.lexer_impl.lexer_impl_|49|7_prove_ltb|split|0', axiom, ![V_27q_27]: (s('type.tokens.token','const.lexer_fun.token_of_sym_1'(s('type.lexer_fun.symbol',V_27q_27))) = s('type.tokens.token','const.tokens.LetT_0') <=> s('type.lexer_fun.symbol',V_27q_27) = s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))).
fof('thm.lexer_impl.lexer_impl_|49|7_prove_ltb|split|1', axiom, ![V_27q_27]: (s('type.tokens.token','const.lexer_fun.token_of_sym_1'(s('type.lexer_fun.symbol',V_27q_27))) = s('type.tokens.token','const.tokens.EndT_0') <=> s('type.lexer_fun.symbol',V_27q_27) = s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))).
fof('thm.lexer_impl.lexer_impl_|49|7_prove_ltb|split|2', axiom, ![V_27q_27]: (s('type.tokens.token','const.lexer_fun.token_of_sym_1'(s('type.lexer_fun.symbol',V_27q_27))) = s('type.tokens.token','const.tokens.SigT_0') <=> s('type.lexer_fun.symbol',V_27q_27) = s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))).
fof('thm.lexer_impl.lexer_impl_|49|7_prove_ltb|split|3', axiom, ![V_27q_27]: (s('type.tokens.token','const.lexer_fun.token_of_sym_1'(s('type.lexer_fun.symbol',V_27q_27))) = s('type.tokens.token','const.tokens.StructT_0') <=> s('type.lexer_fun.symbol',V_27q_27) = s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))).
fof('thm.lexer_impl.lexer_impl_|49|7_prove_ltb|split|4', axiom, ![V_27q_27]: (s('type.tokens.token','const.lexer_fun.token_of_sym_1'(s('type.lexer_fun.symbol',V_27q_27))) = s('type.tokens.token','const.tokens.SemicolonT_0') <=> s('type.lexer_fun.symbol',V_27q_27) = s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))).
fof('thm.lexer_impl.lexer_impl_|49|7_prove_ltb|split|5', axiom, ![V_27q_27]: (s('type.tokens.token','const.lexer_fun.token_of_sym_1'(s('type.lexer_fun.symbol',V_27q_27))) = s('type.tokens.token','const.tokens.RparT_0') <=> s('type.lexer_fun.symbol',V_27q_27) = s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))).
fof('thm.lexer_impl.lexer_impl_|49|7_prove_ltb|split|6', axiom, ![V_27q_27]: (s('type.tokens.token','const.lexer_fun.token_of_sym_1'(s('type.lexer_fun.symbol',V_27q_27))) = s('type.tokens.token','const.tokens.LparT_0') <=> s('type.lexer_fun.symbol',V_27q_27) = s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))).
fof('thm.lexer_impl.lexer_impl_|49|8_prove_ltb', axiom, ![V_27acc_27, V_27d_27, V_27input_27]: ?[Vv]: ((p(s('bool',Vv)) <=> s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'const.lexer_impl.lex_aux_3'(s('type.list.list'('type.tokens.token'),'happ'(s('fun'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.tokens.token')),'const.list.MAP_1'(s('fun'('type.lexer_fun.symbol','type.tokens.token'),'const.lexer_fun.token_of_sym_0'))),s('type.list.list'('type.lexer_fun.symbol'),V_27acc_27))),s('type.num.num',V_27d_27),s('type.list.list'('type.string.char'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'const.option.NONE_0')) & p(s('bool','const.option.option_CASE_3'(s('type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char'))),'const.lexer_impl.lex_aux_alt_3'(s('type.list.list'('type.lexer_fun.symbol'),V_27acc_27),s('type.num.num',V_27d_27),s('type.list.list'('type.string.char'),V_27input_27))),s('bool',Vv),s('fun'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char')),'bool'),'_dst_x1x0_2'(s('fun'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char')),'fun'('fun'('type.list.list'('type.lexer_fun.symbol'),'fun'('type.list.list'('type.string.char'),'bool')),'bool')),'const.pair.pair_CASE_0'),s('fun'('type.list.list'('type.lexer_fun.symbol'),'fun'('type.list.list'('type.string.char'),'bool')),'_dst_x00x11_2'(s('fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'bool'),'=_1'(s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'const.lexer_impl.lex_aux_3'(s('type.list.list'('type.tokens.token'),'happ'(s('fun'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.tokens.token')),'const.list.MAP_1'(s('fun'('type.lexer_fun.symbol','type.tokens.token'),'const.lexer_fun.token_of_sym_0'))),s('type.list.list'('type.lexer_fun.symbol'),V_27acc_27))),s('type.num.num',V_27d_27),s('type.list.list'('type.string.char'),V_27input_27))))),s('fun'('type.list.list'('type.lexer_fun.symbol'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))))),'_dst_x00x11_2'(s('fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.list.list'('type.lexer_fun.symbol'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))),'_dst_x0x1_2'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))),'const.pair.,_0'),s('fun'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.tokens.token')),'const.list.MAP_1'(s('fun'('type.lexer_fun.symbol','type.tokens.token'),'const.lexer_fun.token_of_sym_0')))))))))))))))).
fof('thm.lexer_impl.lex_until_top_semicolon_alt_thm', axiom, ![V_27input_27]: ?[Vv]: ((p(s('bool',Vv)) <=> s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'const.lexer_impl.lex_until_toplevel_semicolon_1'(s('type.list.list'('type.string.char'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'const.option.NONE_0')) & p(s('bool','const.option.option_CASE_3'(s('type.option.option'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char'))),'const.lexer_impl.lex_until_top_semicolon_alt_1'(s('type.list.list'('type.string.char'),V_27input_27))),s('bool',Vv),s('fun'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char')),'bool'),'_dst_x1x0_2'(s('fun'('type.pair.prod'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.string.char')),'fun'('fun'('type.list.list'('type.lexer_fun.symbol'),'fun'('type.list.list'('type.string.char'),'bool')),'bool')),'const.pair.pair_CASE_0'),s('fun'('type.list.list'('type.lexer_fun.symbol'),'fun'('type.list.list'('type.string.char'),'bool')),'_dst_x00x11_2'(s('fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'bool'),'=_1'(s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'const.lexer_impl.lex_until_toplevel_semicolon_1'(s('type.list.list'('type.string.char'),V_27input_27))))),s('fun'('type.list.list'('type.lexer_fun.symbol'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))))),'_dst_x00x11_2'(s('fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.list.list'('type.lexer_fun.symbol'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))),'_dst_x0x1_2'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))),'const.pair.,_0'),s('fun'('type.list.list'('type.lexer_fun.symbol'),'type.list.list'('type.tokens.token')),'const.list.MAP_1'(s('fun'('type.lexer_fun.symbol','type.tokens.token'),'const.lexer_fun.token_of_sym_0')))))))))))))))).
fof('ARITY_0_1_const.lexer_impl.lex_until_toplevel_semicolon', axiom, ![VV0]: s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'happ'(s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))),'const.lexer_impl.lex_until_toplevel_semicolon_0'),s('type.list.list'('type.string.char'),VV0))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'const.lexer_impl.lex_until_toplevel_semicolon_1'(s('type.list.list'('type.string.char'),VV0)))).
fof('thm.lexer_impl.lex_impl_all_primitive_def', axiom, s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.list.list'('type.tokens.token'))),'const.lexer_impl.lex_impl_all_0') = s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.list.list'('type.tokens.token'))),'const.relation.WFREC_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'const.min.@_1'(s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'bool'),'const.relation.WF_0'),s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.string.char'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'fun'('type.list.list'('type.string.char'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')),'bool'),'bool'),'!_0'),s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'fun'('type.list.list'('type.string.char'),'fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')),'bool'))),'_dst_x000x111_2'(s('fun'('fun'('type.list.list'('type.tokens.token'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'fun'('type.list.list'('type.string.char'),'fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')),'fun'('type.list.list'('type.tokens.token'),'bool')))),'_dst_x0000x1111_2'(s('fun'('fun'('type.list.list'('type.string.char'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'fun'('type.list.list'('type.string.char'),'fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.string.char'),'bool'))))),'_dst_x00000x01111x11001_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.string.char'),'bool')))),'_dst_x0000x1100x0111_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')),'bool')),'_dst_x00x10x01_3'(s('fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'bool')),'=_0'),s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))),'const.lexer_impl.lex_until_toplevel_semicolon_0'),s('fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))),'const.option.SOME_0'))),s('fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.string.char'),'bool'))),'_dst_x000x100x011_3'(s('fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')),'fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')),'bool')),'=_0'),s('fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'_i_0_0'),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))),'const.pair.,_0'))))),s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool'))),'_i_0_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'))))))))))))))))),s('fun'('fun'('type.list.list'('type.string.char'),'type.list.list'('type.list.list'('type.tokens.token'))),'fun'('type.list.list'('type.string.char'),'type.list.list'('type.list.list'('type.tokens.token')))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.list.list'('type.tokens.token')),'type.list.list'('type.list.list'('type.tokens.token'))),'const.combin.I_0'),s('fun'('fun'('type.list.list'('type.string.char'),'type.list.list'('type.list.list'('type.tokens.token'))),'fun'('type.list.list'('type.string.char'),'type.list.list'('type.list.list'('type.tokens.token')))),'_dst_x00x01x00x10_4'(s('fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'fun'('type.list.list'('type.list.list'('type.tokens.token')),'fun'('fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')),'type.list.list'('type.list.list'('type.tokens.token'))),'type.list.list'('type.list.list'('type.tokens.token'))))),'const.option.option_CASE_0'),s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')))),'const.lexer_impl.lex_until_toplevel_semicolon_0'),s('type.list.list'('type.list.list'('type.tokens.token')),'const.list.NIL_0'),s('fun'('fun'('type.list.list'('type.string.char'),'type.list.list'('type.list.list'('type.tokens.token'))),'fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')),'type.list.list'('type.list.list'('type.tokens.token')))),'_dst_x01x10_2'(s('fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')),'fun'('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.string.char'),'type.list.list'('type.list.list'('type.tokens.token')))),'type.list.list'('type.list.list'('type.tokens.token')))),'const.pair.pair_CASE_0'),s('fun'('fun'('type.list.list'('type.string.char'),'type.list.list'('type.list.list'('type.tokens.token'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.string.char'),'type.list.list'('type.list.list'('type.tokens.token'))))),'_dst_x000x010x101_3'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.list.list'('type.tokens.token')),'type.list.list'('type.list.list'('type.tokens.token')))),'const.list.CONS_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'),s('fun'('fun'('type.list.list'('type.string.char'),'type.list.list'('type.list.list'('type.tokens.token'))),'fun'('type.list.list'('type.string.char'),'type.list.list'('type.list.list'('type.tokens.token')))),'_i_0_0')))))))))))).
fof('thm.lexer_impl.lex_impl_all_ind', axiom, ![V_27P_27]: (![V_27input_27]: (![V_27v_27, V_27t_27, V_27input_7c39_7c_27]: ((s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'const.lexer_impl.lex_until_toplevel_semicolon_1'(s('type.list.list'('type.string.char'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')),V_27v_27))) & s('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')),V_27v_27) = s('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')),'const.pair.,_2'(s('type.list.list'('type.tokens.token'),V_27t_27),s('type.list.list'('type.string.char'),V_27input_7c39_7c_27)))) => p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),V_27P_27),s('type.list.list'('type.string.char'),V_27input_7c39_7c_27))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),V_27P_27),s('type.list.list'('type.string.char'),V_27input_27))))) => ![V_27v_27]: p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),V_27P_27),s('type.list.list'('type.string.char'),V_27v_27)))))).
fof('thm.lexer_impl.lex_impl_all_def', axiom, ![V_27input_27]: s('type.list.list'('type.list.list'('type.tokens.token')),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.list.list'('type.tokens.token'))),'const.lexer_impl.lex_impl_all_0'),s('type.list.list'('type.string.char'),V_27input_27))) = s('type.list.list'('type.list.list'('type.tokens.token')),'const.option.option_CASE_3'(s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'const.lexer_impl.lex_until_toplevel_semicolon_1'(s('type.list.list'('type.string.char'),V_27input_27))),s('type.list.list'('type.list.list'('type.tokens.token')),'const.list.NIL_0'),s('fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')),'type.list.list'('type.list.list'('type.tokens.token'))),'_dst_x1x0_2'(s('fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')),'fun'('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.string.char'),'type.list.list'('type.list.list'('type.tokens.token')))),'type.list.list'('type.list.list'('type.tokens.token')))),'const.pair.pair_CASE_0'),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.string.char'),'type.list.list'('type.list.list'('type.tokens.token')))),'_dst_x00x10x01_3'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.list.list'('type.tokens.token')),'type.list.list'('type.list.list'('type.tokens.token')))),'const.list.CONS_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.list.list'('type.tokens.token'))),'const.lexer_impl.lex_impl_all_0')))))))).
fof('thm.lexer_impl.lexer_impl_25_prove_ltb', axiom, ![V_27a_27]: (?[V_27acc_27, V_27d_27, V_27input_27]: s('type.pair.prod'('type.list.list'('type.tokens.token'),'type.pair.prod'('type.num.num','type.list.list'('type.tokens.token'))),V_27a_27) = s('type.pair.prod'('type.list.list'('type.tokens.token'),'type.pair.prod'('type.num.num','type.list.list'('type.tokens.token'))),'const.pair.,_2'(s('type.list.list'('type.tokens.token'),V_27acc_27),s('type.pair.prod'('type.num.num','type.list.list'('type.tokens.token')),'const.pair.,_2'(s('type.num.num',V_27d_27),s('type.list.list'('type.tokens.token'),V_27input_27))))) => ?[V_27acc_27, V_27d_27, V_27input_27]: s('type.pair.prod'('type.list.list'('type.tokens.token'),'type.pair.prod'('type.num.num','type.list.list'('type.tokens.token'))),V_27a_27) = s('type.pair.prod'('type.list.list'('type.tokens.token'),'type.pair.prod'('type.num.num','type.list.list'('type.tokens.token'))),'const.pair.,_2'(s('type.list.list'('type.tokens.token'),V_27acc_27),s('type.pair.prod'('type.num.num','type.list.list'('type.tokens.token')),'const.pair.,_2'(s('type.num.num',V_27d_27),s('type.list.list'('type.tokens.token'),V_27input_27))))))).
fof('thm.lexer_impl.lex_aux_tokens_ind', axiom, ![V_27P_27]: (![V_27acc_27, V_27d_27, V_27input_27]: ((![V_27token_27, V_27rest_27, V_27new__acc_27]: ((s('type.list.list'('type.tokens.token'),V_27input_27) = s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token',V_27token_27),s('type.list.list'('type.tokens.token'),V_27rest_27))) & (s('type.list.list'('type.tokens.token'),V_27new__acc_27) = s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token',V_27token_27),s('type.list.list'('type.tokens.token'),V_27acc_27))) & (~ ((s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.SemicolonT_0') & s('type.num.num',V_27d_27) = s('type.num.num','const.num.|48|_0'))) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.LetT_0')) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.StructT_0')) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.SigT_0')) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.LparT_0')) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.EndT_0')) & ~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.RparT_0')))))))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.tokens.token'),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'bool')),'happ'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'bool'))),V_27P_27),s('type.list.list'('type.tokens.token'),V_27new__acc_27))),s('type.num.num',V_27d_27))),s('type.list.list'('type.tokens.token'),V_27rest_27))))) & (![V_27token_27, V_27rest_27, V_27new__acc_27]: ((s('type.list.list'('type.tokens.token'),V_27input_27) = s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token',V_27token_27),s('type.list.list'('type.tokens.token'),V_27rest_27))) & (s('type.list.list'('type.tokens.token'),V_27new__acc_27) = s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token',V_27token_27),s('type.list.list'('type.tokens.token'),V_27acc_27))) & (~ ((s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.SemicolonT_0') & s('type.num.num',V_27d_27) = s('type.num.num','const.num.|48|_0'))) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.LetT_0')) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.StructT_0')) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.SigT_0')) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.LparT_0')) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.EndT_0')) & s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.RparT_0'))))))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.tokens.token'),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'bool')),'happ'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'bool'))),V_27P_27),s('type.list.list'('type.tokens.token'),V_27new__acc_27))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.tokens.token'),V_27rest_27))))) & (![V_27token_27, V_27rest_27, V_27new__acc_27]: ((s('type.list.list'('type.tokens.token'),V_27input_27) = s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token',V_27token_27),s('type.list.list'('type.tokens.token'),V_27rest_27))) & (s('type.list.list'('type.tokens.token'),V_27new__acc_27) = s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token',V_27token_27),s('type.list.list'('type.tokens.token'),V_27acc_27))) & (~ ((s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.SemicolonT_0') & s('type.num.num',V_27d_27) = s('type.num.num','const.num.|48|_0'))) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.LetT_0')) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.StructT_0')) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.SigT_0')) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.LparT_0')) & s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.EndT_0')))))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.tokens.token'),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'bool')),'happ'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'bool'))),V_27P_27),s('type.list.list'('type.tokens.token'),V_27new__acc_27))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.tokens.token'),V_27rest_27))))) & (![V_27token_27, V_27rest_27, V_27new__acc_27]: ((s('type.list.list'('type.tokens.token'),V_27input_27) = s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token',V_27token_27),s('type.list.list'('type.tokens.token'),V_27rest_27))) & (s('type.list.list'('type.tokens.token'),V_27new__acc_27) = s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token',V_27token_27),s('type.list.list'('type.tokens.token'),V_27acc_27))) & (~ ((s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.SemicolonT_0') & s('type.num.num',V_27d_27) = s('type.num.num','const.num.|48|_0'))) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.LetT_0')) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.StructT_0')) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.SigT_0')) & s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.LparT_0'))))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.tokens.token'),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'bool')),'happ'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'bool'))),V_27P_27),s('type.list.list'('type.tokens.token'),V_27new__acc_27))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.tokens.token'),V_27rest_27))))) & (![V_27token_27, V_27rest_27, V_27new__acc_27]: ((s('type.list.list'('type.tokens.token'),V_27input_27) = s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token',V_27token_27),s('type.list.list'('type.tokens.token'),V_27rest_27))) & (s('type.list.list'('type.tokens.token'),V_27new__acc_27) = s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token',V_27token_27),s('type.list.list'('type.tokens.token'),V_27acc_27))) & (~ ((s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.SemicolonT_0') & s('type.num.num',V_27d_27) = s('type.num.num','const.num.|48|_0'))) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.LetT_0')) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.StructT_0')) & s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.SigT_0')))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.tokens.token'),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'bool')),'happ'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'bool'))),V_27P_27),s('type.list.list'('type.tokens.token'),V_27new__acc_27))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.tokens.token'),V_27rest_27))))) & (![V_27token_27, V_27rest_27, V_27new__acc_27]: ((s('type.list.list'('type.tokens.token'),V_27input_27) = s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token',V_27token_27),s('type.list.list'('type.tokens.token'),V_27rest_27))) & (s('type.list.list'('type.tokens.token'),V_27new__acc_27) = s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token',V_27token_27),s('type.list.list'('type.tokens.token'),V_27acc_27))) & (~ ((s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.SemicolonT_0') & s('type.num.num',V_27d_27) = s('type.num.num','const.num.|48|_0'))) & (~ (s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.LetT_0')) & s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.StructT_0'))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.tokens.token'),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'bool')),'happ'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'bool'))),V_27P_27),s('type.list.list'('type.tokens.token'),V_27new__acc_27))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.tokens.token'),V_27rest_27))))) & ![V_27token_27, V_27rest_27, V_27new__acc_27]: ((s('type.list.list'('type.tokens.token'),V_27input_27) = s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token',V_27token_27),s('type.list.list'('type.tokens.token'),V_27rest_27))) & (s('type.list.list'('type.tokens.token'),V_27new__acc_27) = s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token',V_27token_27),s('type.list.list'('type.tokens.token'),V_27acc_27))) & (~ ((s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.SemicolonT_0') & s('type.num.num',V_27d_27) = s('type.num.num','const.num.|48|_0'))) & s('type.tokens.token',V_27token_27) = s('type.tokens.token','const.tokens.LetT_0')))) => p(s('bool','happ'(s('fun'('type.list.list'('type.tokens.token'),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'bool')),'happ'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'bool'))),V_27P_27),s('type.list.list'('type.tokens.token'),V_27new__acc_27))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.tokens.token'),V_27rest_27))))))))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.tokens.token'),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'bool')),'happ'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'bool'))),V_27P_27),s('type.list.list'('type.tokens.token'),V_27acc_27))),s('type.num.num',V_27d_27))),s('type.list.list'('type.tokens.token'),V_27input_27))))) => ![V_27v_27, V_27v_7c49_7c_27, V_27v2_27]: p(s('bool','happ'(s('fun'('type.list.list'('type.tokens.token'),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'bool')),'happ'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'bool'))),V_27P_27),s('type.list.list'('type.tokens.token'),V_27v_27))),s('type.num.num',V_27v_7c49_7c_27))),s('type.list.list'('type.tokens.token'),V_27v2_27)))))).
fof('ARITY_0_3_const.lexer_impl.lex_aux_tokens', axiom, ![VV0, VV1, VV2]: s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'happ'(s('fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))))),'happ'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))))),'const.lexer_impl.lex_aux_tokens_0'),s('type.list.list'('type.tokens.token'),VV0))),s('type.num.num',VV1))),s('type.list.list'('type.tokens.token'),VV2))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'const.lexer_impl.lex_aux_tokens_3'(s('type.list.list'('type.tokens.token'),VV0),s('type.num.num',VV1),s('type.list.list'('type.tokens.token'),VV2)))).
fof('thm.lexer_impl.lex_aux_tokens_def', axiom, ![V_27input_27, V_27d_27, V_27acc_27]: ?[Vv]: ((p(s('bool',Vv)) <=> s('type.num.num',V_27d_27) = s('type.num.num','const.num.|48|_0')) & s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'happ'(s('fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))))),'happ'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))))),'const.lexer_impl.lex_aux_tokens_0'),s('type.list.list'('type.tokens.token'),V_27acc_27))),s('type.num.num',V_27d_27))),s('type.list.list'('type.tokens.token'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'const.list.list_CASE_3'(s('type.list.list'('type.tokens.token'),V_27input_27),s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'const.option.NONE_0'),s('fun'('type.tokens.token','fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))))),'_dst_x00x11x10_3'(s('fun'('fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))))),'const.bool.LET_0'),s('fun'('type.tokens.token','fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))))),'_dst_x000x100x011x111_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))))),'const.bool.COND_0'),s('fun'('type.tokens.token','bool'),'_dst_x0x1x0_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.tokens.token','bool'),'_dst_x1x0_2'(s('fun'('type.tokens.token','fun'('type.tokens.token','bool')),'=_0'),s('type.tokens.token','const.tokens.SemicolonT_0'))),s('bool',Vv))),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))))),'_dst_x00x11_2'(s('fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))),'const.option.SOME_0'),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))),'_dst_x00x01x10_3'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))),'const.pair.,_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'const.list.REVERSE_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'))))),s('fun'('type.tokens.token','fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))))),'_dst_x000x100x011x111_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))))),'const.bool.COND_0'),s('fun'('type.tokens.token','bool'),'_dst_x1x0_2'(s('fun'('type.tokens.token','fun'('type.tokens.token','bool')),'=_0'),s('type.tokens.token','const.tokens.LetT_0'))),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))))),'_dst_x01x00x10_3'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))))),'const.lexer_impl.lex_aux_tokens_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'))),s('fun'('type.tokens.token','fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))))),'_dst_x000x100x011x111_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))))),'const.bool.COND_0'),s('fun'('type.tokens.token','bool'),'_dst_x1x0_2'(s('fun'('type.tokens.token','fun'('type.tokens.token','bool')),'=_0'),s('type.tokens.token','const.tokens.StructT_0'))),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))))),'_dst_x01x00x10_3'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))))),'const.lexer_impl.lex_aux_tokens_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'))),s('fun'('type.tokens.token','fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))))),'_dst_x000x100x011x111_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))))),'const.bool.COND_0'),s('fun'('type.tokens.token','bool'),'_dst_x1x0_2'(s('fun'('type.tokens.token','fun'('type.tokens.token','bool')),'=_0'),s('type.tokens.token','const.tokens.SigT_0'))),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))))),'_dst_x01x00x10_3'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))))),'const.lexer_impl.lex_aux_tokens_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'))),s('fun'('type.tokens.token','fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))))),'_dst_x000x100x011x111_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))))),'const.bool.COND_0'),s('fun'('type.tokens.token','bool'),'_dst_x1x0_2'(s('fun'('type.tokens.token','fun'('type.tokens.token','bool')),'=_0'),s('type.tokens.token','const.tokens.LparT_0'))),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))))),'_dst_x01x00x10_3'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))))),'const.lexer_impl.lex_aux_tokens_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'))),s('fun'('type.tokens.token','fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))))),'_dst_x000x100x011x111_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))))),'const.bool.COND_0'),s('fun'('type.tokens.token','bool'),'_dst_x1x0_2'(s('fun'('type.tokens.token','fun'('type.tokens.token','bool')),'=_0'),s('type.tokens.token','const.tokens.EndT_0'))),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))))),'_dst_x01x00x10_3'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))))),'const.lexer_impl.lex_aux_tokens_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'))),s('fun'('type.tokens.token','fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))))),'_dst_x000x100x011x011_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))))),'const.bool.COND_0'),s('fun'('type.tokens.token','bool'),'_dst_x1x0_2'(s('fun'('type.tokens.token','fun'('type.tokens.token','bool')),'=_0'),s('type.tokens.token','const.tokens.RparT_0'))),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))))),'_dst_x01x00x10_3'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))))),'const.lexer_impl.lex_aux_tokens_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'))),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))))),'_dst_x01x00x10_3'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))))),'const.lexer_impl.lex_aux_tokens_0'),s('type.num.num',V_27d_27),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'))))))))))))))))),s('fun'('type.tokens.token','type.list.list'('type.tokens.token')),'_dst_x1x0_2'(s('fun'('type.tokens.token','fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'const.list.CONS_0'),s('type.list.list'('type.tokens.token'),V_27acc_27))))))))).
fof('thm.lexer_impl.lex_until_toplevel_semicolon_tokens_def', axiom, ![V_27input_27]: s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'const.lexer_impl.lex_until_toplevel_semicolon_tokens_1'(s('type.list.list'('type.tokens.token'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'const.lexer_impl.lex_aux_tokens_3'(s('type.list.list'('type.tokens.token'),'const.list.NIL_0'),s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.tokens.token'),V_27input_27)))).
fof('thm.lexer_impl.lexer_impl_3|48|_prove_ltb', axiom, ![V_27t_27, V_27rest_27, V_27acc_27, V_27d_27, V_27input_27]: (s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'const.lexer_impl.lex_aux_tokens_3'(s('type.list.list'('type.tokens.token'),V_27acc_27),s('type.num.num',V_27d_27),s('type.list.list'('type.tokens.token'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'const.pair.,_2'(s('type.list.list'('type.tokens.token'),V_27t_27),s('type.list.list'('type.tokens.token'),V_27rest_27))))) => ?[Vv]: ((p(s('bool',Vv)) <=> s('type.list.list'('type.tokens.token'),V_27acc_27) = s('type.list.list'('type.tokens.token'),'const.list.NIL_0')) & p(s('bool','const.bool.COND_3'(s('bool',Vv),s('bool','const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.tokens.token'),V_27rest_27))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.tokens.token'),V_27input_27))))),s('bool','const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.tokens.token'),V_27rest_27))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.tokens.token'),V_27input_27))))))))))).
fof('ARITY_0_1_const.lexer_impl.lex_until_toplevel_semicolon_tokens', axiom, ![VV0]: s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'happ'(s('fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))),'const.lexer_impl.lex_until_toplevel_semicolon_tokens_0'),s('type.list.list'('type.tokens.token'),VV0))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'const.lexer_impl.lex_until_toplevel_semicolon_tokens_1'(s('type.list.list'('type.tokens.token'),VV0)))).
fof('thm.lexer_impl.lex_impl_all_tokens_primitive_def', axiom, s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.list.list'('type.tokens.token'))),'const.lexer_impl.lex_impl_all_tokens_0') = s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.list.list'('type.tokens.token'))),'const.relation.WFREC_2'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'bool')),'const.min.@_1'(s('fun'('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'bool')),'bool'),'const.relation.WF_0'),s('fun'('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.tokens.token'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'bool')),'fun'('type.list.list'('type.tokens.token'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'bool'),'bool'),'!_0'),s('fun'('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'bool')),'fun'('type.list.list'('type.tokens.token'),'fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'bool'))),'_dst_x000x111_2'(s('fun'('fun'('type.list.list'('type.tokens.token'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'bool')),'fun'('type.list.list'('type.tokens.token'),'fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'fun'('type.list.list'('type.tokens.token'),'bool')))),'_dst_x0000x1111_2'(s('fun'('fun'('type.list.list'('type.tokens.token'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'bool')),'fun'('type.list.list'('type.tokens.token'),'fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'bool'))))),'_dst_x00000x01111x11001_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'bool')))),'_dst_x0000x1100x0111_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'bool')),'_dst_x00x10x01_3'(s('fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'bool')),'=_0'),s('fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))),'const.lexer_impl.lex_until_toplevel_semicolon_tokens_0'),s('fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))),'const.option.SOME_0'))),s('fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'bool'))),'_dst_x000x100x011_3'(s('fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'bool')),'=_0'),s('fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'_i_0_0'),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))),'const.pair.,_0'))))),s('fun'('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'bool')),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'bool')),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'bool'))),'_i_0_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'))))))))))))))))),s('fun'('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.list.list'('type.tokens.token'))),'fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.list.list'('type.tokens.token')))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.list.list'('type.tokens.token')),'type.list.list'('type.list.list'('type.tokens.token'))),'const.combin.I_0'),s('fun'('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.list.list'('type.tokens.token'))),'fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.list.list'('type.tokens.token')))),'_dst_x00x01x00x10_4'(s('fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'fun'('type.list.list'('type.list.list'('type.tokens.token')),'fun'('fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'type.list.list'('type.list.list'('type.tokens.token'))),'type.list.list'('type.list.list'('type.tokens.token'))))),'const.option.option_CASE_0'),s('fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))),'const.lexer_impl.lex_until_toplevel_semicolon_tokens_0'),s('type.list.list'('type.list.list'('type.tokens.token')),'const.list.NIL_0'),s('fun'('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.list.list'('type.tokens.token'))),'fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'type.list.list'('type.list.list'('type.tokens.token')))),'_dst_x01x10_2'(s('fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'fun'('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.list.list'('type.tokens.token')))),'type.list.list'('type.list.list'('type.tokens.token')))),'const.pair.pair_CASE_0'),s('fun'('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.list.list'('type.tokens.token'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.list.list'('type.tokens.token'))))),'_dst_x000x010x101_3'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.list.list'('type.tokens.token')),'type.list.list'('type.list.list'('type.tokens.token')))),'const.list.CONS_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'),s('fun'('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.list.list'('type.tokens.token'))),'fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.list.list'('type.tokens.token')))),'_i_0_0')))))))))))).
fof('thm.lexer_impl.lexer_impl_32_prove_ltb', axiom, ![V_27a_27]: (?[V_27input_27]: s('type.list.list'('type.tokens.token'),V_27a_27) = s('type.list.list'('type.tokens.token'),V_27input_27) => ?[V_27input_27]: s('type.list.list'('type.tokens.token'),V_27a_27) = s('type.list.list'('type.tokens.token'),V_27input_27))).
fof('thm.lexer_impl.lex_impl_all_tokens_ind', axiom, ![V_27P_27]: (![V_27input_27]: (![V_27v_27, V_27t_27, V_27input_7c39_7c_27]: ((s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'const.lexer_impl.lex_until_toplevel_semicolon_tokens_1'(s('type.list.list'('type.tokens.token'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),V_27v_27))) & s('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),V_27v_27) = s('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'const.pair.,_2'(s('type.list.list'('type.tokens.token'),V_27t_27),s('type.list.list'('type.tokens.token'),V_27input_7c39_7c_27)))) => p(s('bool','happ'(s('fun'('type.list.list'('type.tokens.token'),'bool'),V_27P_27),s('type.list.list'('type.tokens.token'),V_27input_7c39_7c_27))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.tokens.token'),'bool'),V_27P_27),s('type.list.list'('type.tokens.token'),V_27input_27))))) => ![V_27v_27]: p(s('bool','happ'(s('fun'('type.list.list'('type.tokens.token'),'bool'),V_27P_27),s('type.list.list'('type.tokens.token'),V_27v_27)))))).
fof('thm.lexer_impl.lex_impl_all_tokens_def', axiom, ![V_27input_27]: s('type.list.list'('type.list.list'('type.tokens.token')),'happ'(s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.list.list'('type.tokens.token'))),'const.lexer_impl.lex_impl_all_tokens_0'),s('type.list.list'('type.tokens.token'),V_27input_27))) = s('type.list.list'('type.list.list'('type.tokens.token')),'const.option.option_CASE_3'(s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'const.lexer_impl.lex_until_toplevel_semicolon_tokens_1'(s('type.list.list'('type.tokens.token'),V_27input_27))),s('type.list.list'('type.list.list'('type.tokens.token')),'const.list.NIL_0'),s('fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'type.list.list'('type.list.list'('type.tokens.token'))),'_dst_x1x0_2'(s('fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'fun'('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.list.list'('type.tokens.token')))),'type.list.list'('type.list.list'('type.tokens.token')))),'const.pair.pair_CASE_0'),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.list.list'('type.tokens.token')))),'_dst_x00x10x01_3'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.list.list'('type.tokens.token')),'type.list.list'('type.list.list'('type.tokens.token')))),'const.list.CONS_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.list.list'('type.tokens.token'))),'const.lexer_impl.lex_impl_all_tokens_0')))))))).
fof('thm.lexer_impl.lexer_impl_35_prove_ltb', axiom, ![V_27input_27, V_27acc_27, V_27d_27, V_27res_7c49_7c_27, V_27res2_27]: ((s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'const.lexer_impl.lex_aux_tokens_3'(s('type.list.list'('type.tokens.token'),V_27acc_27),s('type.num.num',V_27d_27),s('type.list.list'('type.tokens.token'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.tokens.token')),'const.lexer_fun.lexer_fun_0'),s('type.list.list'('type.string.char'),V_27input_27))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),V_27res_7c49_7c_27) & s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),'const.lexer_impl.lex_aux_3'(s('type.list.list'('type.tokens.token'),V_27acc_27),s('type.num.num',V_27d_27),s('type.list.list'('type.string.char'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),V_27res2_27)) => ?[Vv]: ((p(s('bool',Vv)) <=> s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),V_27res_7c49_7c_27) = s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'const.option.NONE_0')) & p(s('bool','const.option.option_CASE_3'(s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char'))),V_27res2_27),s('bool',Vv),s('fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')),'bool'),'_dst_x1x0_2'(s('fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.string.char')),'fun'('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.string.char'),'bool')),'bool')),'const.pair.pair_CASE_0'),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.string.char'),'bool')),'_dst_x00x11_2'(s('fun'('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'bool'),'=_1'(s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),V_27res_7c49_7c_27))),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))))),'_dst_x00x11_2'(s('fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))),'const.option.SOME_0'),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))),'_dst_x00x10x01_3'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')))),'const.pair.,_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.tokens.token')),'const.lexer_fun.lexer_fun_0'))))))))))))))).
fof('ARITY_0_1_const.lexer_impl.lex_impl_all_tokens', axiom, ![VV0]: s('type.list.list'('type.list.list'('type.tokens.token')),'happ'(s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.list.list'('type.tokens.token'))),'const.lexer_impl.lex_impl_all_tokens_0'),s('type.list.list'('type.tokens.token'),VV0))) = s('type.list.list'('type.list.list'('type.tokens.token')),'const.lexer_impl.lex_impl_all_tokens_1'(s('type.list.list'('type.tokens.token'),VV0)))).
fof('ARITY_0_1_const.lexer_impl.lex_impl_all', axiom, ![VV0]: s('type.list.list'('type.list.list'('type.tokens.token')),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.list.list'('type.tokens.token'))),'const.lexer_impl.lex_impl_all_0'),s('type.list.list'('type.string.char'),VV0))) = s('type.list.list'('type.list.list'('type.tokens.token')),'const.lexer_impl.lex_impl_all_1'(s('type.list.list'('type.string.char'),VV0)))).
fof('thm.lexer_impl.lexer_impl_36_prove_ltb', axiom, ![V_27input_27]: s('type.list.list'('type.list.list'('type.tokens.token')),'const.lexer_impl.lex_impl_all_1'(s('type.list.list'('type.string.char'),V_27input_27))) = s('type.list.list'('type.list.list'('type.tokens.token')),'const.lexer_impl.lex_impl_all_tokens_1'(s('type.list.list'('type.tokens.token'),'const.lexer_fun.lexer_fun_1'(s('type.list.list'('type.string.char'),V_27input_27)))))).
fof('thm.lexer_impl.lexer_impl_37_prove_ltb', axiom, ![V_27res_27, V_27input_27, V_27d_27, V_27acc_27]: (s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),V_27res_27) = s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'const.lexer_impl.lex_aux_tokens_3'(s('type.list.list'('type.tokens.token'),V_27acc_27),s('type.num.num',V_27d_27),s('type.list.list'('type.tokens.token'),V_27input_27))) => ?[Vv]: ((p(s('bool',Vv)) <=> s('type.option.option'('type.num.num'),'const.lexer_fun.toplevel_semi_dex_3'(s('type.num.num','happ'(s('fun'('type.list.list'('type.tokens.token'),'type.num.num'),'const.list.LENGTH_0'),s('type.list.list'('type.tokens.token'),V_27acc_27))),s('type.num.num',V_27d_27),s('type.list.list'('type.tokens.token'),V_27input_27))) = s('type.option.option'('type.num.num'),'const.option.NONE_0')) & p(s('bool','const.option.option_CASE_3'(s('type.option.option'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),V_27res_27),s('bool',Vv),s('fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'bool'),'_dst_x1x0_2'(s('fun'('type.pair.prod'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'fun'('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'bool')),'bool')),'const.pair.pair_CASE_0'),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'bool')),'_dst_x00x10x11_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.tokens.token'),'bool'),'_dst_x0x1_2'(s('fun'('type.option.option'('type.num.num'),'bool'),'=_1'(s('type.option.option'('type.num.num'),'const.lexer_fun.toplevel_semi_dex_3'(s('type.num.num','happ'(s('fun'('type.list.list'('type.tokens.token'),'type.num.num'),'const.list.LENGTH_0'),s('type.list.list'('type.tokens.token'),V_27acc_27))),s('type.num.num',V_27d_27),s('type.list.list'('type.tokens.token'),V_27input_27))))),s('fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.num.num')),'_dst_x0x1_2'(s('fun'('type.num.num','type.option.option'('type.num.num')),'const.option.SOME_0'),s('fun'('type.list.list'('type.tokens.token'),'type.num.num'),'const.list.LENGTH_0'))))),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'bool')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.tokens.token'),'bool'),'=_1'(s('type.list.list'('type.tokens.token'),'happ'(s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'happ'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'const.list.APPEND_0'),s('type.list.list'('type.tokens.token'),'const.list.REVERSE_1'(s('type.list.list'('type.tokens.token'),V_27acc_27))))),s('type.list.list'('type.tokens.token'),V_27input_27))))),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'const.list.APPEND_0'))))))))))))).
fof('ARITY_0_1_const.lexer_fun.split_top_level_semi', axiom, ![VV0]: s('type.list.list'('type.list.list'('type.tokens.token')),'happ'(s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.list.list'('type.tokens.token'))),'const.lexer_fun.split_top_level_semi_0'),s('type.list.list'('type.tokens.token'),VV0))) = s('type.list.list'('type.list.list'('type.tokens.token')),'const.lexer_fun.split_top_level_semi_1'(s('type.list.list'('type.tokens.token'),VV0)))).
fof('thm.lexer_impl.lexer_impl_38_prove_ltb', axiom, ![V_27input_27]: s('type.list.list'('type.list.list'('type.tokens.token')),'const.lexer_fun.split_top_level_semi_1'(s('type.list.list'('type.tokens.token'),V_27input_27))) = s('type.list.list'('type.list.list'('type.tokens.token')),'const.lexer_impl.lex_impl_all_tokens_1'(s('type.list.list'('type.tokens.token'),V_27input_27)))).
fof('thm.lexer_impl.lexer_correct', axiom, ![V_27input_27]: s('type.list.list'('type.list.list'('type.tokens.token')),'const.lexer_fun.split_top_level_semi_1'(s('type.list.list'('type.tokens.token'),'const.lexer_fun.lexer_fun_1'(s('type.list.list'('type.string.char'),V_27input_27))))) = s('type.list.list'('type.list.list'('type.tokens.token')),'const.lexer_impl.lex_impl_all_1'(s('type.list.list'('type.string.char'),V_27input_27)))).
