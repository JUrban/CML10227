fof('thm.bitstring.extend_def|split|0', axiom, ![V_27v_7c48_7c_27, V_27l_27]: s('type.list.list'('bool'),'const.bitstring.extend_3'(s('bool',V_27v_7c48_7c_27),s('type.num.num','const.num.|48|_0'),s('type.list.list'('bool'),V_27l_27))) = s('type.list.list'('bool'),V_27l_27)).
fof('thm.bitstring.extend_def|split|1', axiom, ![V_27c_27, V_27n_27, V_27l_27]: s('type.list.list'('bool'),'const.bitstring.extend_3'(s('bool',V_27c_27),s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27))),s('type.list.list'('bool'),V_27l_27))) = s('type.list.list'('bool'),'const.bitstring.extend_3'(s('bool',V_27c_27),s('type.num.num',V_27n_27),s('type.list.list'('bool'),'const.list.CONS_2'(s('bool',V_27c_27),s('type.list.list'('bool'),V_27l_27)))))).
fof('thm.bitstring.extend_def_compute|split|1', axiom, ![V_27c_27, V_27n_27, V_27l_27]: s('type.list.list'('bool'),'const.bitstring.extend_3'(s('bool',V_27c_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))),s('type.list.list'('bool'),V_27l_27))) = s('type.list.list'('bool'),'const.bitstring.extend_3'(s('bool',V_27c_27),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('bool'),'const.list.CONS_2'(s('bool',V_27c_27),s('type.list.list'('bool'),V_27l_27)))))).
fof('thm.bitstring.extend_def_compute|split|2', axiom, ![V_27c_27, V_27n_27, V_27l_27]: s('type.list.list'('bool'),'const.bitstring.extend_3'(s('bool',V_27c_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',V_27n_27))))),s('type.list.list'('bool'),V_27l_27))) = s('type.list.list'('bool'),'const.bitstring.extend_3'(s('bool',V_27c_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))),s('type.list.list'('bool'),'const.list.CONS_2'(s('bool',V_27c_27),s('type.list.list'('bool'),V_27l_27)))))).
fof('thm.bitstring.boolify_def|split|0', axiom, ![V_27a_27]: s('type.list.list'('bool'),'const.bitstring.boolify_2'(s('type.list.list'('bool'),V_27a_27),s('type.list.list'('type.num.num'),'const.list.NIL_0'))) = s('type.list.list'('bool'),V_27a_27)).
fof('thm.bitstring.boolify_def|split|1', axiom, ![V_27a_27, V_27n_27, V_27l_27]: ?[Vv]: ((p(s('bool',Vv)) <=> ~ (s('type.num.num',V_27n_27) = s('type.num.num','const.num.|48|_0'))) & s('type.list.list'('bool'),'const.bitstring.boolify_2'(s('type.list.list'('bool'),V_27a_27),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',V_27n_27),s('type.list.list'('type.num.num'),V_27l_27))))) = s('type.list.list'('bool'),'const.bitstring.boolify_2'(s('type.list.list'('bool'),'const.list.CONS_2'(s('bool',Vv),s('type.list.list'('bool'),V_27a_27))),s('type.list.list'('type.num.num'),V_27l_27))))).
fof('thm.bitstring.bitstring_4_prove_ltb', axiom, ![V_27a_7c39_7c_27]: ((?[V_27a_27]: s('type.pair.prod'('type.list.list'('type.num.num'),'type.list.list'('bool')),V_27a_7c39_7c_27) = s('type.pair.prod'('type.list.list'('type.num.num'),'type.list.list'('bool')),'const.pair.,_2'(s('type.list.list'('type.num.num'),V_27a_27),s('type.list.list'('bool'),'const.list.NIL_0'))) | (?[V_27a_27, V_27l_27]: s('type.pair.prod'('type.list.list'('type.num.num'),'type.list.list'('bool')),V_27a_7c39_7c_27) = s('type.pair.prod'('type.list.list'('type.num.num'),'type.list.list'('bool')),'const.pair.,_2'(s('type.list.list'('type.num.num'),V_27a_27),s('type.list.list'('bool'),'const.list.CONS_2'(s('bool','T_0'),s('type.list.list'('bool'),V_27l_27))))) | ?[V_27a_27, V_27l_27]: s('type.pair.prod'('type.list.list'('type.num.num'),'type.list.list'('bool')),V_27a_7c39_7c_27) = s('type.pair.prod'('type.list.list'('type.num.num'),'type.list.list'('bool')),'const.pair.,_2'(s('type.list.list'('type.num.num'),V_27a_27),s('type.list.list'('bool'),'const.list.CONS_2'(s('bool','F_0'),s('type.list.list'('bool'),V_27l_27))))))) => (?[V_27a_27]: s('type.pair.prod'('type.list.list'('type.num.num'),'type.list.list'('bool')),V_27a_7c39_7c_27) = s('type.pair.prod'('type.list.list'('type.num.num'),'type.list.list'('bool')),'const.pair.,_2'(s('type.list.list'('type.num.num'),V_27a_27),s('type.list.list'('bool'),'const.list.NIL_0'))) | (?[V_27a_27, V_27l_27]: s('type.pair.prod'('type.list.list'('type.num.num'),'type.list.list'('bool')),V_27a_7c39_7c_27) = s('type.pair.prod'('type.list.list'('type.num.num'),'type.list.list'('bool')),'const.pair.,_2'(s('type.list.list'('type.num.num'),V_27a_27),s('type.list.list'('bool'),'const.list.CONS_2'(s('bool','F_0'),s('type.list.list'('bool'),V_27l_27))))) | ?[V_27a_27, V_27l_27]: s('type.pair.prod'('type.list.list'('type.num.num'),'type.list.list'('bool')),V_27a_7c39_7c_27) = s('type.pair.prod'('type.list.list'('type.num.num'),'type.list.list'('bool')),'const.pair.,_2'(s('type.list.list'('type.num.num'),V_27a_27),s('type.list.list'('bool'),'const.list.CONS_2'(s('bool','T_0'),s('type.list.list'('bool'),V_27l_27))))))))).
fof('thm.bitstring.bitify_ind', axiom, ![V_27P_27]: ((![V_27a_27]: p(s('bool','happ'(s('fun'('type.list.list'('bool'),'bool'),'happ'(s('fun'('type.list.list'('type.num.num'),'fun'('type.list.list'('bool'),'bool')),V_27P_27),s('type.list.list'('type.num.num'),V_27a_27))),s('type.list.list'('bool'),'const.list.NIL_0')))) & (![V_27a_27, V_27l_27]: (p(s('bool','happ'(s('fun'('type.list.list'('bool'),'bool'),'happ'(s('fun'('type.list.list'('type.num.num'),'fun'('type.list.list'('bool'),'bool')),V_27P_27),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.num.num'),V_27a_27))))),s('type.list.list'('bool'),V_27l_27)))) => p(s('bool','happ'(s('fun'('type.list.list'('bool'),'bool'),'happ'(s('fun'('type.list.list'('type.num.num'),'fun'('type.list.list'('bool'),'bool')),V_27P_27),s('type.list.list'('type.num.num'),V_27a_27))),s('type.list.list'('bool'),'const.list.CONS_2'(s('bool','F_0'),s('type.list.list'('bool'),V_27l_27))))))) & ![V_27a_27, V_27l_27]: (p(s('bool','happ'(s('fun'('type.list.list'('bool'),'bool'),'happ'(s('fun'('type.list.list'('type.num.num'),'fun'('type.list.list'('bool'),'bool')),V_27P_27),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.num.num'),V_27a_27))))),s('type.list.list'('bool'),V_27l_27)))) => p(s('bool','happ'(s('fun'('type.list.list'('bool'),'bool'),'happ'(s('fun'('type.list.list'('type.num.num'),'fun'('type.list.list'('bool'),'bool')),V_27P_27),s('type.list.list'('type.num.num'),V_27a_27))),s('type.list.list'('bool'),'const.list.CONS_2'(s('bool','T_0'),s('type.list.list'('bool'),V_27l_27))))))))) => ![V_27v_27, V_27v_7c49_7c_27]: p(s('bool','happ'(s('fun'('type.list.list'('bool'),'bool'),'happ'(s('fun'('type.list.list'('type.num.num'),'fun'('type.list.list'('bool'),'bool')),V_27P_27),s('type.list.list'('type.num.num'),V_27v_27))),s('type.list.list'('bool'),V_27v_7c49_7c_27)))))).
fof('thm.bitstring.bitify_def|split|0', axiom, ![V_27a_27]: s('type.list.list'('type.num.num'),'const.bitstring.bitify_2'(s('type.list.list'('type.num.num'),V_27a_27),s('type.list.list'('bool'),'const.list.NIL_0'))) = s('type.list.list'('type.num.num'),V_27a_27)).
fof('thm.bitstring.bitify_def|split|1', axiom, ![V_27l_27, V_27a_27]: s('type.list.list'('type.num.num'),'const.bitstring.bitify_2'(s('type.list.list'('type.num.num'),V_27a_27),s('type.list.list'('bool'),'const.list.CONS_2'(s('bool','F_0'),s('type.list.list'('bool'),V_27l_27))))) = s('type.list.list'('type.num.num'),'const.bitstring.bitify_2'(s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.num.num'),V_27a_27))),s('type.list.list'('bool'),V_27l_27)))).
fof('thm.bitstring.bitify_def|split|2', axiom, ![V_27l_27, V_27a_27]: s('type.list.list'('type.num.num'),'const.bitstring.bitify_2'(s('type.list.list'('type.num.num'),V_27a_27),s('type.list.list'('bool'),'const.list.CONS_2'(s('bool','T_0'),s('type.list.list'('bool'),V_27l_27))))) = s('type.list.list'('type.num.num'),'const.bitstring.bitify_2'(s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.num.num'),V_27a_27))),s('type.list.list'('bool'),V_27l_27)))).
fof('thm.bitstring.n2v_def', axiom, ![V_27n_27]: s('type.list.list'('bool'),'const.bitstring.n2v_1'(s('type.num.num',V_27n_27))) = s('type.list.list'('bool'),'const.bitstring.boolify_2'(s('type.list.list'('bool'),'const.list.NIL_0'),s('type.list.list'('type.num.num'),'const.numposrep.num_to_bin_list_1'(s('type.num.num',V_27n_27)))))).
fof('thm.bitstring.v2n_def', axiom, ![V_27l_27]: s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27l_27))) = s('type.num.num','const.numposrep.num_from_bin_list_1'(s('type.list.list'('type.num.num'),'const.bitstring.bitify_2'(s('type.list.list'('type.num.num'),'const.list.NIL_0'),s('type.list.list'('bool'),V_27l_27)))))).
fof('thm.bitstring.s2v_def', axiom, s('fun'('type.list.list'('type.string.char'),'type.list.list'('bool')),'const.bitstring.s2v_0') = s('fun'('type.list.list'('type.string.char'),'type.list.list'('bool')),'const.list.MAP_1'(s('fun'('type.string.char','bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|bslash||slash|_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))))).
fof('thm.bitstring.v2s_def', axiom, s('fun'('type.list.list'('bool'),'type.list.list'('type.string.char')),'const.bitstring.v2s_0') = s('fun'('type.list.list'('bool'),'type.list.list'('type.string.char')),'const.list.MAP_1'(s('fun'('bool','type.string.char'),'_dst_x1x0x0_3'(s('fun'('bool','fun'('type.string.char','fun'('type.string.char','type.string.char'))),'const.bool.COND_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))).
fof('thm.bitstring.zero_extend_def', axiom, ![V_27n_27, V_27v_27]: s('type.list.list'('bool'),'const.bitstring.zero_extend_2'(s('type.num.num',V_27n_27),s('type.list.list'('bool'),V_27v_27))) = s('type.list.list'('bool'),'const.list.PAD_LEFT_3'(s('bool','F_0'),s('type.num.num',V_27n_27),s('type.list.list'('bool'),V_27v_27)))).
fof('thm.bitstring.sign_extend_def', axiom, ![V_27A_27]: ![V_27n_27, V_27v_27]: s('type.list.list'(V_27A_27),'const.bitstring.sign_extend_2'(s('type.num.num',V_27n_27),s('type.list.list'(V_27A_27),V_27v_27))) = s('type.list.list'(V_27A_27),'const.list.PAD_LEFT_3'(s(V_27A_27,'const.list.HD_1'(s('type.list.list'(V_27A_27),V_27v_27))),s('type.num.num',V_27n_27),s('type.list.list'(V_27A_27),V_27v_27)))).
fof('thm.bitstring.fixwidth_def', axiom, ![V_27n_27, V_27v_27]: s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num',V_27n_27),s('type.list.list'('bool'),V_27v_27))) = s('type.list.list'('bool'),'const.bool.LET_2'(s('fun'('type.num.num','type.list.list'('bool')),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.list.list'('bool'),'fun'('type.list.list'('bool'),'type.list.list'('bool')))),'const.bool.COND_0'),s('fun'('type.num.num','bool'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','bool')),'const.prim_rec.<_0'),s('type.num.num',V_27n_27))),s('type.list.list'('bool'),'const.bitstring.zero_extend_2'(s('type.num.num',V_27n_27),s('type.list.list'('bool'),V_27v_27))),s('fun'('type.num.num','type.list.list'('bool')),'_dst_x0x1x0_3'(s('fun'('type.num.num','fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.list.DROP_0'),s('fun'('type.num.num','type.num.num'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',V_27n_27))),s('type.list.list'('bool'),V_27v_27))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27)))))).
fof('thm.bitstring.shiftl_def', axiom, ![V_27v_27, V_27m_27]: s('type.list.list'('bool'),'const.bitstring.shiftl_2'(s('type.list.list'('bool'),V_27v_27),s('type.num.num',V_27m_27))) = s('type.list.list'('bool'),'const.list.PAD_RIGHT_3'(s('bool','F_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27))),s('type.num.num',V_27m_27))),s('type.list.list'('bool'),V_27v_27)))).
fof('thm.bitstring.shiftr_def', axiom, ![V_27v_27, V_27m_27]: s('type.list.list'('bool'),'const.bitstring.shiftr_2'(s('type.list.list'('bool'),V_27v_27),s('type.num.num',V_27m_27))) = s('type.list.list'('bool'),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27))),s('type.num.num',V_27m_27))),s('type.list.list'('bool'),V_27v_27)))).
fof('thm.bitstring.field_def', axiom, ![V_27h_27, V_27l_27, V_27v_27]: s('type.list.list'('bool'),'const.bitstring.field_3'(s('type.num.num',V_27h_27),s('type.num.num',V_27l_27),s('type.list.list'('bool'),V_27v_27))) = s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27h_27))),s('type.num.num',V_27l_27))),s('type.list.list'('bool'),'const.bitstring.shiftr_2'(s('type.list.list'('bool'),V_27v_27),s('type.num.num',V_27l_27)))))).
fof('ARITY_0_3_const.bitstring.field', axiom, ![VV0, VV1, VV2]: s('type.list.list'('bool'),'happ'(s('fun'('type.list.list'('bool'),'type.list.list'('bool')),'happ'(s('fun'('type.num.num','fun'('type.list.list'('bool'),'type.list.list'('bool'))),'happ'(s('fun'('type.num.num','fun'('type.num.num','fun'('type.list.list'('bool'),'type.list.list'('bool')))),'const.bitstring.field_0'),s('type.num.num',VV0))),s('type.num.num',VV1))),s('type.list.list'('bool'),VV2))) = s('type.list.list'('bool'),'const.bitstring.field_3'(s('type.num.num',VV0),s('type.num.num',VV1),s('type.list.list'('bool'),VV2)))).
fof('thm.bitstring.rotate_def', axiom, ![V_27v_27, V_27m_27]: s('type.list.list'('bool'),'const.bitstring.rotate_2'(s('type.list.list'('bool'),V_27v_27),s('type.num.num',V_27m_27))) = s('type.list.list'('bool'),'happ'(s('fun'('type.num.num','type.list.list'('bool')),'happ'(s('fun'('fun'('type.num.num','type.list.list'('bool')),'fun'('type.num.num','type.list.list'('bool'))),'const.bool.LET_0'),s('fun'('type.num.num','type.list.list'('bool')),'_dst_x0x1x1_3'(s('fun'('fun'('type.num.num','type.list.list'('bool')),'fun'('type.num.num','type.list.list'('bool'))),'const.bool.LET_0'),s('fun'('type.num.num','fun'('type.num.num','type.list.list'('bool'))),'_dst_x00x11x00x11_4'(s('fun'('bool','fun'('type.list.list'('bool'),'fun'('type.list.list'('bool'),'type.list.list'('bool')))),'const.bool.COND_0'),s('fun'('type.num.num','fun'('type.num.num','bool')),'_dst_x00x10x01_3'(s('fun'('bool','fun'('bool','bool')),'|bslash||slash|_0'),s('fun'('type.num.num','bool'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','bool')),'=_0'),s('type.num.num','const.num.|48|_0'))),s('fun'('type.num.num','bool'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','bool')),'=_0'),s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('bool'),V_27v_27),s('fun'('type.num.num','fun'('type.num.num','type.list.list'('bool'))),'_dst_x00x01x11_3'(s('fun'('type.list.list'('bool'),'fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.list.APPEND_0'),s('fun'('type.num.num','type.list.list'('bool')),'_dst_x0x1x0x0_4'(s('fun'('type.num.num','fun'('type.num.num','fun'('type.list.list'('bool'),'type.list.list'('bool')))),'const.bitstring.field_0'),s('fun'('type.num.num','type.num.num'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.num.|48|_0'),s('type.list.list'('bool'),V_27v_27))),s('fun'('type.num.num','fun'('type.num.num','type.list.list'('bool'))),'_dst_x11x00_2'(s('fun'('type.num.num','fun'('type.num.num','fun'('type.list.list'('bool'),'type.list.list'('bool')))),'_dst_x0x1_2'(s('fun'('type.num.num','fun'('type.num.num','fun'('type.list.list'('bool'),'type.list.list'('bool')))),'const.bitstring.field_0'),s('fun'('type.num.num','type.num.num'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('bool'),V_27v_27))))))),s('fun'('type.num.num','type.num.num'),'const.arithmetic.MOD_1'(s('type.num.num',V_27m_27))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27)))))).
fof('thm.bitstring.testbit_def', axiom, ![V_27b_27, V_27v_27]: (p(s('bool','const.bitstring.testbit_2'(s('type.num.num',V_27b_27),s('type.list.list'('bool'),V_27v_27)))) <=> s('type.list.list'('bool'),'const.bitstring.field_3'(s('type.num.num',V_27b_27),s('type.num.num',V_27b_27),s('type.list.list'('bool'),V_27v_27))) = s('type.list.list'('bool'),'const.list.CONS_2'(s('bool','T_0'),s('type.list.list'('bool'),'const.list.NIL_0'))))).
fof('thm.bitstring.w2v_def', axiom, ![V_27A_27]: ![V_27w_27]: s('type.list.list'('bool'),'const.bitstring.w2v_1'(s('type.fcp.cart'('bool',V_27A_27),V_27w_27))) = s('type.list.list'('bool'),'const.list.GENLIST_2'(s('fun'('type.num.num','bool'),'_dst_x0x1_2'(s('fun'('type.num.num','bool'),'const.fcp.fcp_index_1'(s('type.fcp.cart'('bool',V_27A_27),V_27w_27))),s('fun'('type.num.num','type.num.num'),'const.arithmetic.-_1'(s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.arithmetic.-_1'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0')))))).
fof('ARITY_0_2_const.bitstring.testbit', axiom, ![VV0, VV1]: s('bool','happ'(s('fun'('type.list.list'('bool'),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('bool'),'bool')),'const.bitstring.testbit_0'),s('type.num.num',VV0))),s('type.list.list'('bool'),VV1))) = s('bool','const.bitstring.testbit_2'(s('type.num.num',VV0),s('type.list.list'('bool'),VV1)))).
fof('thm.bitstring.v2w_def', axiom, ![V_27A_27]: ![V_27v_27]: s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))) = s('type.fcp.cart'('bool',V_27A_27),'const.fcp.FCP_1'(s('fun'('type.num.num','bool'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.list.list'('bool'),'bool')),'const.bitstring.testbit_0'),s('type.list.list'('bool'),V_27v_27)))))).
fof('thm.bitstring.rev_count_list_def', axiom, ![V_27n_27]: s('type.list.list'('type.num.num'),'const.bitstring.rev_count_list_1'(s('type.num.num',V_27n_27))) = s('type.list.list'('type.num.num'),'const.list.GENLIST_2'(s('fun'('type.num.num','type.num.num'),'const.arithmetic.-_1'(s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.arithmetic.-_1'(s('type.num.num',V_27n_27))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',V_27n_27)))).
fof('thm.bitstring.modify_def', axiom, ![V_27f_27, V_27v_27]: s('type.list.list'('bool'),'const.bitstring.modify_2'(s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.list.list'('bool'),V_27v_27))) = s('type.list.list'('bool'),'const.list.MAP_2'(s('fun'('type.pair.prod'('type.num.num','bool'),'bool'),'const.pair.UNCURRY_1'(s('fun'('type.num.num','fun'('bool','bool')),V_27f_27))),s('type.list.list'('type.pair.prod'('type.num.num','bool')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.num.num'),'type.list.list'('bool')),'const.pair.,_2'(s('type.list.list'('type.num.num'),'const.bitstring.rev_count_list_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27))))),s('type.list.list'('bool'),V_27v_27)))))))).
fof('ARITY_1_2_const.bitstring.modify', axiom, ![VV0, VV1]: s('type.list.list'('bool'),'happ'(s('fun'('type.list.list'('bool'),'type.list.list'('bool')),'const.bitstring.modify_1'(s('fun'('type.num.num','fun'('bool','bool')),VV0))),s('type.list.list'('bool'),VV1))) = s('type.list.list'('bool'),'const.bitstring.modify_2'(s('fun'('type.num.num','fun'('bool','bool')),VV0),s('type.list.list'('bool'),VV1)))).
fof('ARITY_2_3_const.bitstring.field_insert', axiom, ![VV0, VV1, VV2]: s('fun'('type.list.list'('bool'),'type.list.list'('bool')),'happ'(s('fun'('type.list.list'('bool'),'fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.bitstring.field_insert_2'(s('type.num.num',VV0),s('type.num.num',VV1))),s('type.list.list'('bool'),VV2))) = s('fun'('type.list.list'('bool'),'type.list.list'('bool')),'const.bitstring.field_insert_3'(s('type.num.num',VV0),s('type.num.num',VV1),s('type.list.list'('bool'),VV2)))).
fof('thm.bitstring.field_insert_def', axiom, ![V_27h_27, V_27l_27, V_27s_27]: s('fun'('type.list.list'('bool'),'type.list.list'('bool')),'const.bitstring.field_insert_3'(s('type.num.num',V_27h_27),s('type.num.num',V_27l_27),s('type.list.list'('bool'),V_27s_27))) = s('fun'('type.list.list'('bool'),'type.list.list'('bool')),'const.bitstring.modify_1'(s('fun'('type.num.num','fun'('bool','bool')),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','fun'('bool','bool'))),'const.bool.COND_0'),s('fun'('type.num.num','bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.num.num','bool'),'happ'(s('fun'('type.num.num','fun'('type.num.num','bool')),'const.arithmetic.<=_0'),s('type.num.num',V_27l_27))),s('fun'('type.num.num','bool'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','bool')),'const.arithmetic.<=_0'),s('type.num.num',V_27h_27))))),s('fun'('type.num.num','bool'),'_dst_x0x1x0_3'(s('fun'('type.num.num','fun'('type.list.list'('bool'),'bool')),'const.bitstring.testbit_0'),s('fun'('type.num.num','type.num.num'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',V_27l_27))),s('type.list.list'('bool'),V_27s_27)))))))).
fof('ARITY_0_2_const.bitstring.zero_extend', axiom, ![VV0, VV1]: s('type.list.list'('bool'),'happ'(s('fun'('type.list.list'('bool'),'type.list.list'('bool')),'happ'(s('fun'('type.num.num','fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.bitstring.zero_extend_0'),s('type.num.num',VV0))),s('type.list.list'('bool'),VV1))) = s('type.list.list'('bool'),'const.bitstring.zero_extend_2'(s('type.num.num',VV0),s('type.list.list'('bool'),VV1)))).
fof('thm.bitstring.add_def', axiom, ![V_27a_27, V_27b_27]: s('type.list.list'('bool'),'const.bitstring.add_2'(s('type.list.list'('bool'),V_27a_27),s('type.list.list'('bool'),V_27b_27))) = s('type.list.list'('bool'),'const.bool.LET_2'(s('fun'('type.num.num','type.list.list'('bool')),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.bitstring.zero_extend_0'),s('type.list.list'('bool'),'const.bitstring.n2v_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27a_27))),s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27b_27))))))))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27a_27))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27b_27)))))))).
fof('ARITY_1_3_const.bitstring.bitwise', axiom, ![VV0, VV1, VV2]: s('type.list.list'('bool'),'happ'(s('fun'('type.list.list'('bool'),'type.list.list'('bool')),'happ'(s('fun'('type.list.list'('bool'),'fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.bitstring.bitwise_1'(s('fun'('bool','fun'('bool','bool')),VV0))),s('type.list.list'('bool'),VV1))),s('type.list.list'('bool'),VV2))) = s('type.list.list'('bool'),'const.bitstring.bitwise_3'(s('fun'('bool','fun'('bool','bool')),VV0),s('type.list.list'('bool'),VV1),s('type.list.list'('bool'),VV2)))).
fof('ARITY_0_2_const.bitstring.fixwidth', axiom, ![VV0, VV1]: s('type.list.list'('bool'),'happ'(s('fun'('type.list.list'('bool'),'type.list.list'('bool')),'happ'(s('fun'('type.num.num','fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.bitstring.fixwidth_0'),s('type.num.num',VV0))),s('type.list.list'('bool'),VV1))) = s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num',VV0),s('type.list.list'('bool'),VV1)))).
fof('thm.bitstring.bitwise_def', axiom, ![V_27f_27, V_27v_7c49_7c_27, V_27v2_27]: s('type.list.list'('bool'),'const.bitstring.bitwise_3'(s('fun'('bool','fun'('bool','bool')),V_27f_27),s('type.list.list'('bool'),V_27v_7c49_7c_27),s('type.list.list'('bool'),V_27v2_27))) = s('type.list.list'('bool'),'const.bool.LET_2'(s('fun'('type.num.num','type.list.list'('bool')),'_dst_x0x1_2'(s('fun'('type.list.list'('type.pair.prod'('bool','bool')),'type.list.list'('bool')),'const.list.MAP_1'(s('fun'('type.pair.prod'('bool','bool'),'bool'),'const.pair.UNCURRY_1'(s('fun'('bool','fun'('bool','bool')),V_27f_27))))),s('fun'('type.num.num','type.list.list'('type.pair.prod'('bool','bool'))),'_dst_x0x1_2'(s('fun'('type.pair.prod'('type.list.list'('bool'),'type.list.list'('bool')),'type.list.list'('type.pair.prod'('bool','bool'))),'const.list.ZIP_0'),s('fun'('type.num.num','type.pair.prod'('type.list.list'('bool'),'type.list.list'('bool'))),'_dst_x0x1x1_3'(s('fun'('type.list.list'('bool'),'fun'('type.list.list'('bool'),'type.pair.prod'('type.list.list'('bool'),'type.list.list'('bool')))),'const.pair.,_0'),s('fun'('type.num.num','type.list.list'('bool')),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.bitstring.fixwidth_0'),s('type.list.list'('bool'),V_27v_7c49_7c_27))),s('fun'('type.num.num','type.list.list'('bool')),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.bitstring.fixwidth_0'),s('type.list.list'('bool'),V_27v2_27))))))))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_7c49_7c_27))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v2_27)))))))).
fof('thm.bitstring.bnot_def', axiom, s('fun'('type.list.list'('bool'),'type.list.list'('bool')),'const.bitstring.bnot_0') = s('fun'('type.list.list'('bool'),'type.list.list'('bool')),'const.list.MAP_1'(s('fun'('bool','bool'),'|dollar|not_0')))).
fof('thm.bitstring.bor_def', axiom, s('fun'('type.list.list'('bool'),'fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.bitstring.bor_0') = s('fun'('type.list.list'('bool'),'fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.bitstring.bitwise_1'(s('fun'('bool','fun'('bool','bool')),'|dollar|or_0')))).
fof('thm.bitstring.band_def', axiom, s('fun'('type.list.list'('bool'),'fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.bitstring.band_0') = s('fun'('type.list.list'('bool'),'fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.bitstring.bitwise_1'(s('fun'('bool','fun'('bool','bool')),'|dollar|and_0')))).
fof('ARITY_0_2_const.bitstring.bxor', axiom, ![VV0, VV1]: s('type.list.list'('bool'),'happ'(s('fun'('type.list.list'('bool'),'type.list.list'('bool')),'happ'(s('fun'('type.list.list'('bool'),'fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.bitstring.bxor_0'),s('type.list.list'('bool'),VV0))),s('type.list.list'('bool'),VV1))) = s('type.list.list'('bool'),'const.bitstring.bxor_2'(s('type.list.list'('bool'),VV0),s('type.list.list'('bool'),VV1)))).
fof('thm.bitstring.bxor_def', axiom, s('fun'('type.list.list'('bool'),'fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.bitstring.bxor_0') = s('fun'('type.list.list'('bool'),'fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.bitstring.bitwise_1'(s('fun'('bool','fun'('bool','bool')),'_dst_x00x11_2'(s('fun'('bool','bool'),'~_0'),s('fun'('bool','fun'('bool','bool')),'=_0')))))).
fof('thm.bitstring.bnor_def', axiom, s('fun'('type.list.list'('bool'),'fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.bitstring.bnor_0') = s('fun'('type.list.list'('bool'),'fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.bitstring.bitwise_1'(s('fun'('bool','fun'('bool','bool')),'_dst_x00x11_2'(s('fun'('bool','bool'),'~_0'),s('fun'('bool','fun'('bool','bool')),'|bslash||slash|_0')))))).
fof('thm.bitstring.bxnor_def', axiom, s('fun'('type.list.list'('bool'),'fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.bitstring.bxnor_0') = s('fun'('type.list.list'('bool'),'fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.bitstring.bitwise_1'(s('fun'('bool','fun'('bool','bool')),'|dollar|equals_0')))).
fof('thm.bitstring.bnand_def', axiom, s('fun'('type.list.list'('bool'),'fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.bitstring.bnand_0') = s('fun'('type.list.list'('bool'),'fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.bitstring.bitwise_1'(s('fun'('bool','fun'('bool','bool')),'_dst_x00x11_2'(s('fun'('bool','bool'),'~_0'),s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0')))))).
fof('thm.bitstring.replicate_def', axiom, ![V_27v_27, V_27n_27]: s('type.list.list'('bool'),'const.bitstring.replicate_2'(s('type.list.list'('bool'),V_27v_27),s('type.num.num',V_27n_27))) = s('type.list.list'('bool'),'const.list.FLAT_1'(s('type.list.list'('type.list.list'('bool')),'const.list.GENLIST_2'(s('fun'('type.num.num','type.list.list'('bool')),'const.combin.K_1'(s('type.list.list'('bool'),V_27v_27))),s('type.num.num',V_27n_27)))))).
fof('thm.bitstring.extend_cons', axiom, ![V_27n_27, V_27c_27, V_27l_27]: s('type.list.list'('bool'),'const.bitstring.extend_3'(s('bool',V_27c_27),s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27))),s('type.list.list'('bool'),V_27l_27))) = s('type.list.list'('bool'),'const.list.CONS_2'(s('bool',V_27c_27),s('type.list.list'('bool'),'const.bitstring.extend_3'(s('bool',V_27c_27),s('type.num.num',V_27n_27),s('type.list.list'('bool'),V_27l_27)))))).
fof('thm.bitstring.pad_left_extend', axiom, ![V_27n_27, V_27l_27, V_27c_27]: s('type.list.list'('bool'),'const.list.PAD_LEFT_3'(s('bool',V_27c_27),s('type.num.num',V_27n_27),s('type.list.list'('bool'),V_27l_27))) = s('type.list.list'('bool'),'const.bitstring.extend_3'(s('bool',V_27c_27),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27n_27),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27l_27))))),s('type.list.list'('bool'),V_27l_27)))).
fof('thm.bitstring.extend|split|0', axiom, ![V_27n_27, V_27v_27]: s('type.list.list'('bool'),'const.bitstring.zero_extend_2'(s('type.num.num',V_27n_27),s('type.list.list'('bool'),V_27v_27))) = s('type.list.list'('bool'),'const.bitstring.extend_3'(s('bool','F_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27n_27),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27))))),s('type.list.list'('bool'),V_27v_27)))).
fof('thm.bitstring.extend|split|1', axiom, ![V_27n_27, V_27v_27]: s('type.list.list'('bool'),'const.bitstring.sign_extend_2'(s('type.num.num',V_27n_27),s('type.list.list'('bool'),V_27v_27))) = s('type.list.list'('bool'),'const.bitstring.extend_3'(s('bool','const.list.HD_1'(s('type.list.list'('bool'),V_27v_27))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27n_27),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27))))),s('type.list.list'('bool'),V_27v_27)))).
fof('ARITY_1_3_const.bitstring.extend', axiom, ![VV0, VV1, VV2]: s('type.list.list'('bool'),'happ'(s('fun'('type.list.list'('bool'),'type.list.list'('bool')),'happ'(s('fun'('type.num.num','fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.bitstring.extend_1'(s('bool',VV0))),s('type.num.num',VV1))),s('type.list.list'('bool'),VV2))) = s('type.list.list'('bool'),'const.bitstring.extend_3'(s('bool',VV0),s('type.num.num',VV1),s('type.list.list'('bool'),VV2)))).
fof('thm.bitstring.fixwidth', axiom, ![V_27n_27, V_27v_27]: s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num',V_27n_27),s('type.list.list'('bool'),V_27v_27))) = s('type.list.list'('bool'),'const.bool.LET_2'(s('fun'('type.num.num','type.list.list'('bool')),'_dst_x0x1x1x1_4'(s('fun'('bool','fun'('type.list.list'('bool'),'fun'('type.list.list'('bool'),'type.list.list'('bool')))),'const.bool.COND_0'),s('fun'('type.num.num','bool'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','bool')),'const.prim_rec.<_0'),s('type.num.num',V_27n_27))),s('fun'('type.num.num','type.list.list'('bool')),'_dst_x0x1x0_3'(s('fun'('type.num.num','fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.bitstring.extend_1'(s('bool','F_0'))),s('fun'('type.num.num','type.num.num'),'happ'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',V_27n_27))),s('type.list.list'('bool'),V_27v_27))),s('fun'('type.num.num','type.list.list'('bool')),'_dst_x0x1x0_3'(s('fun'('type.num.num','fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.list.DROP_0'),s('fun'('type.num.num','type.num.num'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',V_27n_27))),s('type.list.list'('bool'),V_27v_27))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27)))))).
fof('thm.bitstring.fixwidth_id', axiom, ![V_27w_27]: s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27w_27))),s('type.list.list'('bool'),V_27w_27))) = s('type.list.list'('bool'),V_27w_27)).
fof('thm.bitstring.fixwidth_id_imp', axiom, ![V_27n_27, V_27w_27]: (s('type.num.num',V_27n_27) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27w_27))) => s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num',V_27n_27),s('type.list.list'('bool'),V_27w_27))) = s('type.list.list'('bool'),V_27w_27))).
fof('thm.bitstring.boolify_reverse_map', axiom, ![V_27v_27, V_27a_27]: s('type.list.list'('bool'),'const.bitstring.boolify_2'(s('type.list.list'('bool'),V_27a_27),s('type.list.list'('type.num.num'),V_27v_27))) = s('type.list.list'('bool'),'const.list.APPEND_2'(s('type.list.list'('bool'),'const.list.REVERSE_1'(s('type.list.list'('bool'),'const.list.MAP_2'(s('fun'('type.num.num','bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.num.num','bool'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','bool')),'=_0'),s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.num.num'),V_27v_27))))),s('type.list.list'('bool'),V_27a_27)))).
fof('thm.bitstring.bitify_reverse_map', axiom, ![V_27v_27, V_27a_27]: s('type.list.list'('type.num.num'),'const.bitstring.bitify_2'(s('type.list.list'('type.num.num'),V_27a_27),s('type.list.list'('bool'),V_27v_27))) = s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.list.REVERSE_1'(s('type.list.list'('type.num.num'),'const.list.MAP_2'(s('fun'('bool','type.num.num'),'_dst_x1x0x0_3'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('bool'),V_27v_27))))),s('type.list.list'('type.num.num'),V_27a_27)))).
fof('thm.bitstring.every_bit_bitify', axiom, ![V_27v_27]: p(s('bool','const.list.EVERY_2'(s('fun'('type.num.num','bool'),'const.arithmetic.>_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.num.num'),'const.bitstring.bitify_2'(s('type.list.list'('type.num.num'),'const.list.NIL_0'),s('type.list.list'('bool'),V_27v_27))))))).
fof('thm.bitstring.length_pad_left', axiom, ![V_27A_27]: ![V_27x_27, V_27n_27, V_27a_27]: s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(V_27A_27),'const.list.PAD_LEFT_3'(s(V_27A_27,V_27x_27),s('type.num.num',V_27n_27),s('type.list.list'(V_27A_27),V_27a_27))))) = s('type.num.num','const.bool.COND_3'(s('bool','const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(V_27A_27),V_27a_27))),s('type.num.num',V_27n_27))),s('type.num.num',V_27n_27),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(V_27A_27),V_27a_27)))))).
fof('thm.bitstring.length_pad_right', axiom, ![V_27A_27]: ![V_27x_27, V_27n_27, V_27a_27]: s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(V_27A_27),'const.list.PAD_RIGHT_3'(s(V_27A_27,V_27x_27),s('type.num.num',V_27n_27),s('type.list.list'(V_27A_27),V_27a_27))))) = s('type.num.num','const.bool.COND_3'(s('bool','const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(V_27A_27),V_27a_27))),s('type.num.num',V_27n_27))),s('type.num.num',V_27n_27),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(V_27A_27),V_27a_27)))))).
fof('thm.bitstring.length_zero_extend', axiom, ![V_27n_27, V_27v_27]: (p(s('bool','const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27))),s('type.num.num',V_27n_27)))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),'const.bitstring.zero_extend_2'(s('type.num.num',V_27n_27),s('type.list.list'('bool'),V_27v_27))))) = s('type.num.num',V_27n_27))).
fof('thm.bitstring.length_sign_extend', axiom, ![V_27A_27]: ![V_27n_27, V_27v_27]: (p(s('bool','const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(V_27A_27),V_27v_27))),s('type.num.num',V_27n_27)))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(V_27A_27),'const.bitstring.sign_extend_2'(s('type.num.num',V_27n_27),s('type.list.list'(V_27A_27),V_27v_27))))) = s('type.num.num',V_27n_27))).
fof('thm.bitstring.length_fixwidth', axiom, ![V_27n_27, V_27v_27]: s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num',V_27n_27),s('type.list.list'('bool'),V_27v_27))))) = s('type.num.num',V_27n_27)).
fof('thm.bitstring.length_field', axiom, ![V_27h_27, V_27l_27, V_27v_27]: s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),'const.bitstring.field_3'(s('type.num.num',V_27h_27),s('type.num.num',V_27l_27),s('type.list.list'('bool'),V_27v_27))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27h_27))),s('type.num.num',V_27l_27)))).
fof('thm.bitstring.length_bitify', axiom, ![V_27v_27, V_27l_27]: s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.num.num'),'const.bitstring.bitify_2'(s('type.list.list'('type.num.num'),V_27l_27),s('type.list.list'('bool'),V_27v_27))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.num.num'),V_27l_27))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27)))))).
fof('thm.bitstring.length_bitify_null', axiom, ![V_27A_27]: ![V_27v_27, V_27l_27]: s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.num.num'),'const.bitstring.bitify_2'(s('type.list.list'('type.num.num'),'const.list.NIL_0'),s('type.list.list'('bool'),V_27v_27))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27)))).
fof('thm.bitstring.length_shiftr', axiom, ![V_27v_27, V_27n_27]: s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),'const.bitstring.shiftr_2'(s('type.list.list'('bool'),V_27v_27),s('type.num.num',V_27n_27))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27))),s('type.num.num',V_27n_27)))).
fof('thm.bitstring.length_rev_count_list', axiom, ![V_27n_27]: s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.num.num'),'const.bitstring.rev_count_list_1'(s('type.num.num',V_27n_27))))) = s('type.num.num',V_27n_27)).
fof('thm.bitstring.length_w2v', axiom, ![V_27A_27]: ![V_27w_27]: s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),'const.bitstring.w2v_1'(s('type.fcp.cart'('bool',V_27A_27),V_27w_27))))) = s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0')))).
fof('thm.bitstring.length_rotate', axiom, ![V_27v_27, V_27n_27]: s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),'const.bitstring.rotate_2'(s('type.list.list'('bool'),V_27v_27),s('type.num.num',V_27n_27))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27)))).
fof('thm.bitstring.el_rev_count_list', axiom, ![V_27n_27, V_27i_27]: (p(s('bool','const.prim_rec.<_2'(s('type.num.num',V_27i_27),s('type.num.num',V_27n_27)))) => s('type.num.num','const.list.EL_2'(s('type.num.num',V_27i_27),s('type.list.list'('type.num.num'),'const.bitstring.rev_count_list_1'(s('type.num.num',V_27n_27))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27n_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',V_27i_27))))).
fof('thm.bitstring.bitstring_57_prove_ltb', axiom, ![V_27v_27, V_27i_27, V_27a_27]: (p(s('bool','const.prim_rec.<_2'(s('type.num.num',V_27i_27),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27)))))) => (p(s('bool','const.list.EL_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27i_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('bool'),V_27v_27)))) <=> s('type.num.num','const.list.EL_2'(s('type.num.num',V_27i_27),s('type.list.list'('type.num.num'),'const.bitstring.bitify_2'(s('type.list.list'('type.num.num'),V_27a_27),s('type.list.list'('bool'),V_27v_27))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))).
fof('thm.bitstring.el_zero_extend', axiom, ![V_27n_27, V_27i_27, V_27v_27]: (p(s('bool','const.list.EL_2'(s('type.num.num',V_27i_27),s('type.list.list'('bool'),'const.bitstring.zero_extend_2'(s('type.num.num',V_27n_27),s('type.list.list'('bool'),V_27v_27)))))) <=> (p(s('bool','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27n_27),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27))))),s('type.num.num',V_27i_27)))) & p(s('bool','const.list.EL_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27i_27),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27n_27),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27))))))),s('type.list.list'('bool'),V_27v_27))))))).
fof('thm.bitstring.el_sign_extend', axiom, ![V_27A_27]: ![V_27n_27, V_27i_27, V_27v_27]: s(V_27A_27,'const.list.EL_2'(s('type.num.num',V_27i_27),s('type.list.list'(V_27A_27),'const.bitstring.sign_extend_2'(s('type.num.num',V_27n_27),s('type.list.list'(V_27A_27),V_27v_27))))) = s(V_27A_27,'const.bool.COND_3'(s('bool','const.prim_rec.<_2'(s('type.num.num',V_27i_27),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27n_27),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(V_27A_27),V_27v_27))))))),s(V_27A_27,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(V_27A_27),V_27v_27))),s(V_27A_27,'const.list.EL_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27i_27),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27n_27),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(V_27A_27),V_27v_27))))))),s('type.list.list'(V_27A_27),V_27v_27)))))).
fof('thm.bitstring.el_fixwidth', axiom, ![V_27i_27, V_27n_27, V_27w_27]: (p(s('bool','const.prim_rec.<_2'(s('type.num.num',V_27i_27),s('type.num.num',V_27n_27)))) => ?[Vv]: ((p(s('bool',Vv)) <=> (p(s('bool','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27n_27),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27w_27))))),s('type.num.num',V_27i_27)))) & p(s('bool','const.list.EL_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27i_27),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27n_27),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27w_27))))))),s('type.list.list'('bool'),V_27w_27)))))) & s('bool','const.list.EL_2'(s('type.num.num',V_27i_27),s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num',V_27n_27),s('type.list.list'('bool'),V_27w_27))))) = s('bool','const.bool.COND_3'(s('bool','const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27w_27))),s('type.num.num',V_27n_27))),s('bool',Vv),s('bool','const.list.EL_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27i_27),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27w_27))),s('type.num.num',V_27n_27))))),s('type.list.list'('bool'),V_27w_27)))))))).
fof('thm.bitstring.el_field', axiom, ![V_27v_27, V_27h_27, V_27l_27, V_27i_27]: (p(s('bool','const.prim_rec.<_2'(s('type.num.num',V_27i_27),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27h_27))),s('type.num.num',V_27l_27)))))) => (p(s('bool','const.list.EL_2'(s('type.num.num',V_27i_27),s('type.list.list'('bool'),'const.bitstring.field_3'(s('type.num.num',V_27h_27),s('type.num.num',V_27l_27),s('type.list.list'('bool'),V_27v_27)))))) <=> (p(s('bool','const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27h_27))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27i_27),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27)))))))) & p(s('bool','const.list.EL_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27i_27),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27h_27))))),s('type.list.list'('bool'),V_27v_27)))))))).
fof('thm.bitstring.bitstring_62_prove_ltb', axiom, ![V_27A_27]: ![V_27n_27, V_27l_27, V_27v_27]: (~ (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27l_27))) = s('type.num.num','const.num.|48|_0')) => s('type.list.list'('bool'),'const.bitstring.shiftr_2'(s('type.list.list'('bool'),V_27l_27),s('type.num.num',V_27n_27))) = s('type.list.list'('bool'),'const.bitstring.field_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27l_27))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',V_27n_27),s('type.list.list'('bool'),V_27l_27))))).
fof('thm.bitstring.el_w2v', axiom, ![V_27A_27]: ![V_27w_27, V_27n_27]: (p(s('bool','const.prim_rec.<_2'(s('type.num.num',V_27n_27),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0')))))) => s('bool','const.list.EL_2'(s('type.num.num',V_27n_27),s('type.list.list'('bool'),'const.bitstring.w2v_1'(s('type.fcp.cart'('bool',V_27A_27),V_27w_27))))) = s('bool','const.fcp.fcp_index_2'(s('type.fcp.cart'('bool',V_27A_27),V_27w_27),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',V_27n_27))))))).
fof('thm.bitstring.el_shiftr', axiom, ![V_27i_27, V_27v_27, V_27n_27, V_27d_27]: ((p(s('bool','const.prim_rec.<_2'(s('type.num.num',V_27n_27),s('type.num.num',V_27d_27)))) & (p(s('bool','const.prim_rec.<_2'(s('type.num.num',V_27i_27),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27d_27),s('type.num.num',V_27n_27)))))) & p(s('bool','const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',V_27d_27)))))) => (p(s('bool','const.list.EL_2'(s('type.num.num',V_27i_27),s('type.list.list'('bool'),'const.bitstring.shiftr_2'(s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num',V_27d_27),s('type.list.list'('bool'),V_27v_27))),s('type.num.num',V_27n_27)))))) <=> (p(s('bool','const.arithmetic.<=_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27i_27),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27)))))))) & p(s('bool','const.list.EL_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27i_27),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27))))),s('type.num.num',V_27d_27))),s('type.list.list'('bool'),V_27v_27)))))))).
fof('thm.bitstring.shiftr_|48|', axiom, ![V_27v_27]: s('type.list.list'('bool'),'const.bitstring.shiftr_2'(s('type.list.list'('bool'),V_27v_27),s('type.num.num','const.num.|48|_0'))) = s('type.list.list'('bool'),V_27v_27)).
fof('thm.bitstring.field_fixwidth', axiom, ![V_27h_27, V_27v_27]: s('type.list.list'('bool'),'const.bitstring.field_3'(s('type.num.num',V_27h_27),s('type.num.num','const.num.|48|_0'),s('type.list.list'('bool'),V_27v_27))) = s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27h_27))),s('type.list.list'('bool'),V_27v_27)))).
fof('thm.bitstring.testbit', axiom, ![V_27b_27, V_27v_27]: s('bool','const.bitstring.testbit_2'(s('type.num.num',V_27b_27),s('type.list.list'('bool'),V_27v_27))) = s('bool','const.bool.LET_2'(s('fun'('type.num.num','bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.num.num','bool'),'const.prim_rec.<_1'(s('type.num.num',V_27b_27))),s('fun'('type.num.num','bool'),'_dst_x0x1x0_3'(s('fun'('type.num.num','fun'('type.list.list'('bool'),'bool')),'const.list.EL_0'),s('fun'('type.num.num','type.num.num'),'_dst_x0x1x0_3'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('fun'('type.num.num','type.num.num'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',V_27b_27))),s('type.list.list'('bool'),V_27v_27))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27)))))).
fof('thm.bitstring.testbit_geq_len', axiom, ![V_27v_27, V_27i_27]: (p(s('bool','const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27))),s('type.num.num',V_27i_27)))) => ~ (p(s('bool','const.bitstring.testbit_2'(s('type.num.num',V_27i_27),s('type.list.list'('bool'),V_27v_27))))))).
fof('thm.bitstring.testbit_el', axiom, ![V_27v_27, V_27i_27]: (p(s('bool','const.prim_rec.<_2'(s('type.num.num',V_27i_27),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27)))))) => s('bool','const.bitstring.testbit_2'(s('type.num.num',V_27i_27),s('type.list.list'('bool'),V_27v_27))) = s('bool','const.list.EL_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',V_27i_27))),s('type.list.list'('bool'),V_27v_27))))).
fof('thm.bitstring.bit_v2w', axiom, ![V_27A_27]: ![V_27n_27, V_27v_27]: (p(s('bool','const.words.word_bit_2'(s('type.num.num',V_27n_27),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27)))))) <=> (p(s('bool','const.prim_rec.<_2'(s('type.num.num',V_27n_27),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0')))))) & p(s('bool','const.bitstring.testbit_2'(s('type.num.num',V_27n_27),s('type.list.list'('bool'),V_27v_27))))))).
fof('thm.bitstring.word_index_v2w', axiom, ![V_27A_27]: ![V_27index_7c32_7ctoo_7c32_7clarge_27, V_27v_27, V_27i_27]: s('bool','happ'(s('fun'('type.num.num','bool'),'happ'(s('fun'('type.fcp.cart'('bool',V_27A_27),'fun'('type.num.num','bool')),'const.fcp.fcp_index_0'),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))),s('type.num.num',V_27i_27))) = s('bool','const.bool.COND_3'(s('bool','const.prim_rec.<_2'(s('type.num.num',V_27i_27),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))))),s('bool','const.bitstring.testbit_2'(s('type.num.num',V_27i_27),s('type.list.list'('bool'),V_27v_27))),s('bool','happ'(s('fun'('type.num.num','bool'),'happ'(s('fun'('type.fcp.cart'('bool',V_27A_27),'fun'('type.num.num','bool')),'const.combin.FAIL_2'(s('fun'('type.fcp.cart'('bool',V_27A_27),'fun'('type.num.num','bool')),'const.fcp.fcp_index_0'),s('bool',V_27index_7c32_7ctoo_7c32_7clarge_27))),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))),s('type.num.num',V_27i_27)))))).
fof('thm.bitstring.testbit_w2v', axiom, ![V_27A_27]: ![V_27n_27, V_27w_27]: s('bool','const.bitstring.testbit_2'(s('type.num.num',V_27n_27),s('type.list.list'('bool'),'const.bitstring.w2v_1'(s('type.fcp.cart'('bool',V_27A_27),V_27w_27))))) = s('bool','const.words.word_bit_2'(s('type.num.num',V_27n_27),s('type.fcp.cart'('bool',V_27A_27),V_27w_27)))).
fof('thm.bitstring.w2v_v2w', axiom, ![V_27A_27]: ![V_27v_27]: s('type.list.list'('bool'),'const.bitstring.w2v_1'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.list.list'('bool'),V_27v_27)))).
fof('thm.bitstring.v2w_w2v', axiom, ![V_27A_27]: ![V_27w_27]: s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.w2v_1'(s('type.fcp.cart'('bool',V_27A_27),V_27w_27))))) = s('type.fcp.cart'('bool',V_27A_27),V_27w_27)).
fof('thm.bitstring.v2w_fixwidth', axiom, ![V_27A_27]: ![V_27v_27]: s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27)))).
fof('thm.bitstring.fixwidth_fixwidth', axiom, ![V_27n_27, V_27v_27]: s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num',V_27n_27),s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num',V_27n_27),s('type.list.list'('bool'),V_27v_27))))) = s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num',V_27n_27),s('type.list.list'('bool'),V_27v_27)))).
fof('thm.bitstring.bitstring_nchotomy', axiom, ![V_27A_27]: ![V_27w_27]: ?[V_27v_27]: s('type.fcp.cart'('bool',V_27A_27),V_27w_27) = s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27)))).
fof('thm.bitstring.ranged_bitstring_nchotomy', axiom, ![V_27A_27]: ![V_27w_27]: ?[V_27v_27]: (s('type.fcp.cart'('bool',V_27A_27),V_27w_27) = s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))) & ?[Vv]: ((p(s('bool',Vv)) <=> s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27))) = s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0')))) & p(s('bool','const.marker.Abbrev_1'(s('bool',Vv))))))).
fof('thm.bitstring.bitstring_79_prove_ltb', axiom, ![V_27A_27]: ![V_27l_7c49_7c_27, V_27l2_27]: (s('type.list.list'(V_27A_27),V_27l_7c49_7c_27) = s('type.list.list'(V_27A_27),V_27l2_27) <=> (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(V_27A_27),V_27l_7c49_7c_27))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(V_27A_27),V_27l2_27))) & ![V_27x_27]: (p(s('bool','const.prim_rec.<_2'(s('type.num.num',V_27x_27),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(V_27A_27),V_27l_7c49_7c_27)))))) => s(V_27A_27,'const.list.EL_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(V_27A_27),V_27l_7c49_7c_27))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',V_27x_27))),s('type.list.list'(V_27A_27),V_27l_7c49_7c_27))) = s(V_27A_27,'const.list.EL_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(V_27A_27),V_27l_7c49_7c_27))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',V_27x_27))),s('type.list.list'(V_27A_27),V_27l2_27))))))).
fof('thm.bitstring.fixwidth_eq', axiom, ![V_27n_27, V_27v_27, V_27w_27]: (s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num',V_27n_27),s('type.list.list'('bool'),V_27v_27))) = s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num',V_27n_27),s('type.list.list'('bool'),V_27w_27))) <=> ![V_27i_27]: (p(s('bool','const.prim_rec.<_2'(s('type.num.num',V_27i_27),s('type.num.num',V_27n_27)))) => s('bool','const.bitstring.testbit_2'(s('type.num.num',V_27i_27),s('type.list.list'('bool'),V_27v_27))) = s('bool','const.bitstring.testbit_2'(s('type.num.num',V_27i_27),s('type.list.list'('bool'),V_27w_27)))))).
fof('thm.bitstring.v2w_|49||49|', axiom, ![V_27A_27]: ![V_27v_27, V_27w_27]: (s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))) = s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27w_27))) <=> s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.list.list'('bool'),V_27v_27))) = s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.list.list'('bool'),V_27w_27))))).
fof('thm.bitstring.field_concat_right', axiom, ![V_27h_27, V_27a_27, V_27b_27]: (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27b_27))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27h_27))) => s('type.list.list'('bool'),'const.bitstring.field_3'(s('type.num.num',V_27h_27),s('type.num.num','const.num.|48|_0'),s('type.list.list'('bool'),'const.list.APPEND_2'(s('type.list.list'('bool'),V_27a_27),s('type.list.list'('bool'),V_27b_27))))) = s('type.list.list'('bool'),V_27b_27))).
fof('thm.bitstring.field_concat_left', axiom, ![V_27h_27, V_27l_27, V_27a_27, V_27b_27]: ((p(s('bool','const.arithmetic.<=_2'(s('type.num.num',V_27l_27),s('type.num.num',V_27h_27)))) & p(s('bool','const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27b_27))),s('type.num.num',V_27l_27))))) => s('type.list.list'('bool'),'const.bitstring.field_3'(s('type.num.num',V_27h_27),s('type.num.num',V_27l_27),s('type.list.list'('bool'),'const.list.APPEND_2'(s('type.list.list'('bool'),V_27a_27),s('type.list.list'('bool'),V_27b_27))))) = s('type.list.list'('bool'),'const.bitstring.field_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27h_27),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27b_27))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27l_27),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27b_27))))),s('type.list.list'('bool'),V_27a_27))))).
fof('thm.bitstring.field_id_imp', axiom, ![V_27n_27, V_27v_27]: (s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27))) => s('type.list.list'('bool'),'const.bitstring.field_3'(s('type.num.num',V_27n_27),s('type.num.num','const.num.|48|_0'),s('type.list.list'('bool'),V_27v_27))) = s('type.list.list'('bool'),V_27v_27))).
fof('thm.bitstring.shiftl_replicate_F', axiom, ![V_27v_27, V_27n_27]: s('type.list.list'('bool'),'const.bitstring.shiftl_2'(s('type.list.list'('bool'),V_27v_27),s('type.num.num',V_27n_27))) = s('type.list.list'('bool'),'const.list.APPEND_2'(s('type.list.list'('bool'),V_27v_27),s('type.list.list'('bool'),'const.bitstring.replicate_2'(s('type.list.list'('bool'),'const.list.CONS_2'(s('bool','F_0'),s('type.list.list'('bool'),'const.list.NIL_0'))),s('type.num.num',V_27n_27)))))).
fof('thm.bitstring.word_lsb_v2w', axiom, ![V_27A_27]: ![V_27v_27]: (p(s('bool','const.words.word_lsb_1'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27)))))) <=> (~ (s('type.list.list'('bool'),V_27v_27) = s('type.list.list'('bool'),'const.list.NIL_0')) & p(s('bool','const.list.LAST_1'(s('type.list.list'('bool'),V_27v_27))))))).
fof('thm.bitstring.word_msb_v2w', axiom, ![V_27A_27]: ![V_27v_27]: s('bool','const.words.word_msb_1'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('bool','const.bitstring.testbit_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('bool'),V_27v_27)))).
fof('thm.bitstring.w2w_v2w', axiom, ![V_27B_27,V_27A_27]: ![V_27v_27]: s('type.fcp.cart'('bool',V_27B_27),'const.words.w2w_1'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool',V_27B_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.bool.COND_3'(s('bool','const.prim_rec.<_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27B_27),'const.bool.the_value_0'))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27B_27),'const.bool.the_value_0'))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))))),s('type.list.list'('bool'),V_27v_27)))))).
fof('thm.bitstring.sw2sw_v2w', axiom, ![V_27A_27,V_27B_27]: ![V_27v_27]: s('type.fcp.cart'('bool',V_27B_27),'const.words.sw2sw_1'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool',V_27B_27),'const.bool.COND_3'(s('bool','const.prim_rec.<_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27B_27),'const.bool.the_value_0'))))),s('type.fcp.cart'('bool',V_27B_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.sign_extend_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27B_27),'const.bool.the_value_0'))),s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.list.list'('bool'),V_27v_27))))))),s('type.fcp.cart'('bool',V_27B_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27B_27),'const.bool.the_value_0'))),s('type.list.list'('bool'),V_27v_27)))))))).
fof('thm.bitstring.n2w_v2n', axiom, ![V_27A_27]: ![V_27v_27]: s('type.fcp.cart'('bool',V_27A_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27)))).
fof('thm.bitstring.bitstring_9|49|_prove_ltb', axiom, ![V_27l_27]: (p(s('bool','const.list.EVERY_2'(s('fun'('type.num.num','bool'),'const.arithmetic.>_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.num.num'),V_27l_27)))) => s('type.list.list'('type.num.num'),'const.list.MAP_2'(s('fun'('type.num.num','type.num.num'),'const.combin.o_2'(s('fun'('bool','type.num.num'),'_dst_x1x0x0_3'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0'))),s('fun'('type.num.num','bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.num.num','bool'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','bool')),'=_0'),s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.num.num'),V_27l_27))) = s('type.list.list'('type.num.num'),V_27l_27))).
fof('thm.bitstring.v2n_n2v', axiom, ![V_27n_27]: s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),'const.bitstring.n2v_1'(s('type.num.num',V_27n_27))))) = s('type.num.num',V_27n_27)).
fof('thm.bitstring.v2w_n2v', axiom, ![V_27A_27]: ![V_27n_27]: s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.n2v_1'(s('type.num.num',V_27n_27))))) = s('type.fcp.cart'('bool',V_27A_27),'const.words.n2w_1'(s('type.num.num',V_27n_27)))).
fof('thm.bitstring.w2n_v2w', axiom, ![V_27A_27]: ![V_27v_27]: s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.num.num','const.bit.MOD_2EXP_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27)))))).
fof('thm.bitstring.v2n_lt', axiom, ![V_27v_27]: p(s('bool','const.prim_rec.<_2'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27))))))))).
fof('ARITY_0_2_const.bitstring.band', axiom, ![VV0, VV1]: s('type.list.list'('bool'),'happ'(s('fun'('type.list.list'('bool'),'type.list.list'('bool')),'happ'(s('fun'('type.list.list'('bool'),'fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.bitstring.band_0'),s('type.list.list'('bool'),VV0))),s('type.list.list'('bool'),VV1))) = s('type.list.list'('bool'),'const.bitstring.band_2'(s('type.list.list'('bool'),VV0),s('type.list.list'('bool'),VV1)))).
fof('thm.bitstring.word_and_v2w', axiom, ![V_27A_27]: ![V_27v_27, V_27w_27]: s('type.fcp.cart'('bool',V_27A_27),'const.words.word_and_2'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27w_27))))) = s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.band_2'(s('type.list.list'('bool'),V_27v_27),s('type.list.list'('bool'),V_27w_27)))))).
fof('ARITY_0_2_const.bitstring.bor', axiom, ![VV0, VV1]: s('type.list.list'('bool'),'happ'(s('fun'('type.list.list'('bool'),'type.list.list'('bool')),'happ'(s('fun'('type.list.list'('bool'),'fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.bitstring.bor_0'),s('type.list.list'('bool'),VV0))),s('type.list.list'('bool'),VV1))) = s('type.list.list'('bool'),'const.bitstring.bor_2'(s('type.list.list'('bool'),VV0),s('type.list.list'('bool'),VV1)))).
fof('thm.bitstring.word_or_v2w', axiom, ![V_27A_27]: ![V_27v_27, V_27w_27]: s('type.fcp.cart'('bool',V_27A_27),'const.words.word_or_2'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27w_27))))) = s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.bor_2'(s('type.list.list'('bool'),V_27v_27),s('type.list.list'('bool'),V_27w_27)))))).
fof('thm.bitstring.word_xor_v2w', axiom, ![V_27A_27]: ![V_27v_27, V_27w_27]: s('type.fcp.cart'('bool',V_27A_27),'const.words.word_xor_2'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27w_27))))) = s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.bxor_2'(s('type.list.list'('bool'),V_27v_27),s('type.list.list'('bool'),V_27w_27)))))).
fof('ARITY_0_2_const.bitstring.bnand', axiom, ![VV0, VV1]: s('type.list.list'('bool'),'happ'(s('fun'('type.list.list'('bool'),'type.list.list'('bool')),'happ'(s('fun'('type.list.list'('bool'),'fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.bitstring.bnand_0'),s('type.list.list'('bool'),VV0))),s('type.list.list'('bool'),VV1))) = s('type.list.list'('bool'),'const.bitstring.bnand_2'(s('type.list.list'('bool'),VV0),s('type.list.list'('bool'),VV1)))).
fof('thm.bitstring.word_nand_v2w', axiom, ![V_27A_27]: ![V_27v_27, V_27w_27]: s('type.fcp.cart'('bool',V_27A_27),'const.words.word_nand_2'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27w_27))))) = s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.bnand_2'(s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.list.list'('bool'),V_27v_27))),s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.list.list'('bool'),V_27w_27)))))))).
fof('ARITY_0_2_const.bitstring.bnor', axiom, ![VV0, VV1]: s('type.list.list'('bool'),'happ'(s('fun'('type.list.list'('bool'),'type.list.list'('bool')),'happ'(s('fun'('type.list.list'('bool'),'fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.bitstring.bnor_0'),s('type.list.list'('bool'),VV0))),s('type.list.list'('bool'),VV1))) = s('type.list.list'('bool'),'const.bitstring.bnor_2'(s('type.list.list'('bool'),VV0),s('type.list.list'('bool'),VV1)))).
fof('thm.bitstring.word_nor_v2w', axiom, ![V_27A_27]: ![V_27v_27, V_27w_27]: s('type.fcp.cart'('bool',V_27A_27),'const.words.word_nor_2'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27w_27))))) = s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.bnor_2'(s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.list.list'('bool'),V_27v_27))),s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.list.list'('bool'),V_27w_27)))))))).
fof('ARITY_0_2_const.bitstring.bxnor', axiom, ![VV0, VV1]: s('type.list.list'('bool'),'happ'(s('fun'('type.list.list'('bool'),'type.list.list'('bool')),'happ'(s('fun'('type.list.list'('bool'),'fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.bitstring.bxnor_0'),s('type.list.list'('bool'),VV0))),s('type.list.list'('bool'),VV1))) = s('type.list.list'('bool'),'const.bitstring.bxnor_2'(s('type.list.list'('bool'),VV0),s('type.list.list'('bool'),VV1)))).
fof('thm.bitstring.word_xnor_v2w', axiom, ![V_27A_27]: ![V_27v_27, V_27w_27]: s('type.fcp.cart'('bool',V_27A_27),'const.words.word_xnor_2'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27w_27))))) = s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.bxnor_2'(s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.list.list'('bool'),V_27v_27))),s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.list.list'('bool'),V_27w_27)))))))).
fof('ARITY_0_1_const.bitstring.bnot', axiom, ![VV0]: s('type.list.list'('bool'),'happ'(s('fun'('type.list.list'('bool'),'type.list.list'('bool')),'const.bitstring.bnot_0'),s('type.list.list'('bool'),VV0))) = s('type.list.list'('bool'),'const.bitstring.bnot_1'(s('type.list.list'('bool'),VV0)))).
fof('thm.bitstring.word_|49|comp_v2w', axiom, ![V_27A_27]: ![V_27v_27]: s('type.fcp.cart'('bool',V_27A_27),'const.words.word_|49|comp_1'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.bnot_1'(s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.list.list'('bool'),V_27v_27)))))))).
fof('thm.bitstring.word_lsl_v2w', axiom, ![V_27A_27]: ![V_27n_27, V_27v_27]: s('type.fcp.cart'('bool',V_27A_27),'const.words.word_lsl_2'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.num.num',V_27n_27))) = s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.shiftl_2'(s('type.list.list'('bool'),V_27v_27),s('type.num.num',V_27n_27)))))).
fof('thm.bitstring.word_lsr_v2w', axiom, ![V_27A_27]: ![V_27n_27, V_27v_27]: s('type.fcp.cart'('bool',V_27A_27),'const.words.word_lsr_2'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.num.num',V_27n_27))) = s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.shiftr_2'(s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.list.list'('bool'),V_27v_27))),s('type.num.num',V_27n_27)))))).
fof('thm.bitstring.word_modify_v2w', axiom, ![V_27A_27]: ![V_27f_27, V_27v_27]: s('type.fcp.cart'('bool',V_27A_27),'const.words.word_modify_2'(s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.modify_2'(s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.list.list'('bool'),V_27v_27)))))))).
fof('thm.bitstring.word_bits_v2w', axiom, ![V_27A_27]: ![V_27h_27, V_27l_27, V_27v_27]: s('type.fcp.cart'('bool',V_27A_27),'const.words.word_bits_3'(s('type.num.num',V_27h_27),s('type.num.num',V_27l_27),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.field_3'(s('type.num.num',V_27h_27),s('type.num.num',V_27l_27),s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.list.list'('bool'),V_27v_27)))))))).
fof('thm.bitstring.word_extract_v2w', axiom, ![V_27B_27,V_27A_27]: ![V_27h_27, V_27l_27, V_27v_27]: s('type.fcp.cart'('bool',V_27B_27),'const.words.word_extract_3'(s('type.num.num',V_27h_27),s('type.num.num',V_27l_27),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool',V_27B_27),'const.words.w2w_1'(s('type.fcp.cart'('bool',V_27A_27),'const.words.word_bits_3'(s('type.num.num',V_27h_27),s('type.num.num',V_27l_27),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27)))))))).
fof('thm.bitstring.word_slice_v2w', axiom, ![V_27A_27]: ![V_27h_27, V_27l_27, V_27v_27]: s('type.fcp.cart'('bool',V_27A_27),'const.words.word_slice_3'(s('type.num.num',V_27h_27),s('type.num.num',V_27l_27),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.shiftl_2'(s('type.list.list'('bool'),'const.bitstring.field_3'(s('type.num.num',V_27h_27),s('type.num.num',V_27l_27),s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.list.list'('bool'),V_27v_27))))),s('type.num.num',V_27l_27)))))).
fof('thm.bitstring.bitstring_|49||48|9_prove_ltb|split|0', axiom, ![V_27A_27]: s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.list.PAD_LEFT_3'(s('bool','F_0'),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.list.list'('bool'),'const.list.CONS_2'(s('bool','F_0'),s('type.list.list'('bool'),'const.list.NIL_0'))))))) = s('type.fcp.cart'('bool',V_27A_27),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0')))).
fof('thm.bitstring.bitstring_|49||48|9_prove_ltb|split|1', axiom, ![V_27A_27]: s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.list.PAD_LEFT_3'(s('bool','T_0'),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.list.list'('bool'),'const.list.CONS_2'(s('bool','T_0'),s('type.list.list'('bool'),'const.list.NIL_0'))))))) = s('type.fcp.cart'('bool',V_27A_27),'const.words.word_2comp_1'(s('type.fcp.cart'('bool',V_27A_27),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))).
fof('ARITY_0_1_const.bitstring.v2w', axiom, ![V_27A_27]: ![VV0]: s('type.fcp.cart'('bool',V_27A_27),'happ'(s('fun'('type.list.list'('bool'),'type.fcp.cart'('bool',V_27A_27)),'const.bitstring.v2w_0'),s('type.list.list'('bool'),VV0))) = s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),VV0)))).
fof('ARITY_1_2_const.bitstring.sign_extend', axiom, ![V_27A_27]: ![VV0, VV1]: s('type.list.list'(V_27A_27),'happ'(s('fun'('type.list.list'(V_27A_27),'type.list.list'(V_27A_27)),'const.bitstring.sign_extend_1'(s('type.num.num',VV0))),s('type.list.list'(V_27A_27),VV1))) = s('type.list.list'(V_27A_27),'const.bitstring.sign_extend_2'(s('type.num.num',VV0),s('type.list.list'(V_27A_27),VV1)))).
fof('ARITY_0_2_const.bitstring.shiftr', axiom, ![VV0, VV1]: s('type.list.list'('bool'),'happ'(s('fun'('type.num.num','type.list.list'('bool')),'happ'(s('fun'('type.list.list'('bool'),'fun'('type.num.num','type.list.list'('bool'))),'const.bitstring.shiftr_0'),s('type.list.list'('bool'),VV0))),s('type.num.num',VV1))) = s('type.list.list'('bool'),'const.bitstring.shiftr_2'(s('type.list.list'('bool'),VV0),s('type.num.num',VV1)))).
fof('thm.bitstring.word_asr_v2w', axiom, ![V_27A_27]: ![V_27n_27, V_27v_27]: s('type.fcp.cart'('bool',V_27A_27),'const.words.word_asr_2'(s('type.fcp.cart'('bool',V_27A_27),'happ'(s('fun'('type.list.list'('bool'),'type.fcp.cart'('bool',V_27A_27)),'const.bitstring.v2w_0'),s('type.list.list'('bool'),V_27v_27))),s('type.num.num',V_27n_27))) = s('type.fcp.cart'('bool',V_27A_27),'const.bool.LET_2'(s('fun'('type.list.list'('bool'),'type.fcp.cart'('bool',V_27A_27)),'_dst_x0x1_2'(s('fun'('type.list.list'('bool'),'type.fcp.cart'('bool',V_27A_27)),'const.bitstring.v2w_0'),s('fun'('type.list.list'('bool'),'type.list.list'('bool')),'_dst_x0x1_2'(s('fun'('type.list.list'('bool'),'type.list.list'('bool')),'const.bitstring.sign_extend_1'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))))),s('fun'('type.list.list'('bool'),'type.list.list'('bool')),'_dst_x0x1x1_3'(s('fun'('type.list.list'('bool'),'fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.bool.COND_1'(s('bool','const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.num.num',V_27n_27))))),s('fun'('type.list.list'('bool'),'type.list.list'('bool')),'_dst_x0x1x0_3'(s('fun'('bool','fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.list.CONS_0'),s('fun'('type.list.list'('bool'),'bool'),'const.list.HD_0'),s('type.list.list'('bool'),'const.list.NIL_0'))),s('fun'('type.list.list'('bool'),'type.list.list'('bool')),'_dst_x1x0_2'(s('fun'('type.list.list'('bool'),'fun'('type.num.num','type.list.list'('bool'))),'const.bitstring.shiftr_0'),s('type.num.num',V_27n_27))))))))),s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.list.list'('bool'),V_27v_27)))))).
fof('thm.bitstring.word_ror_v2w', axiom, ![V_27A_27]: ![V_27n_27, V_27v_27]: s('type.fcp.cart'('bool',V_27A_27),'const.words.word_ror_2'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.num.num',V_27n_27))) = s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.rotate_2'(s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.list.list'('bool'),V_27v_27))),s('type.num.num',V_27n_27)))))).
fof('thm.bitstring.word_reverse_v2w', axiom, ![V_27A_27]: ![V_27v_27]: s('type.fcp.cart'('bool',V_27A_27),'const.words.word_reverse_1'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.list.REVERSE_1'(s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.list.list'('bool'),V_27v_27)))))))).
fof('thm.bitstring.word_join_v2w', axiom, ![V_27A_27,V_27B_27]: ![V_27v_7c49_7c_27, V_27v2_27]: ((p(s('bool','const.pred_set.FINITE_1'(s('fun'(V_27A_27,'bool'),'const.pred_set.UNIV_0')))) & p(s('bool','const.pred_set.FINITE_1'(s('fun'(V_27B_27,'bool'),'const.pred_set.UNIV_0'))))) => s('type.fcp.cart'('bool','type.sum.sum'(V_27A_27,V_27B_27)),'const.words.word_join_2'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_7c49_7c_27))),s('type.fcp.cart'('bool',V_27B_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v2_27))))) = s('type.fcp.cart'('bool','type.sum.sum'(V_27A_27,V_27B_27)),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.list.APPEND_2'(s('type.list.list'('bool'),V_27v_7c49_7c_27),s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27B_27),'const.bool.the_value_0'))),s('type.list.list'('bool'),V_27v2_27))))))))).
fof('thm.bitstring.word_concat_v2w', axiom, ![V_27C_27,V_27A_27,V_27B_27]: ![V_27v_7c49_7c_27, V_27v2_27]: ((p(s('bool','const.pred_set.FINITE_1'(s('fun'(V_27A_27,'bool'),'const.pred_set.UNIV_0')))) & p(s('bool','const.pred_set.FINITE_1'(s('fun'(V_27B_27,'bool'),'const.pred_set.UNIV_0'))))) => s('type.fcp.cart'('bool',V_27C_27),'const.words.word_concat_2'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_7c49_7c_27))),s('type.fcp.cart'('bool',V_27B_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v2_27))))) = s('type.fcp.cart'('bool',V_27C_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27C_27),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27B_27),'const.bool.the_value_0'))))))),s('type.list.list'('bool'),'const.list.APPEND_2'(s('type.list.list'('bool'),V_27v_7c49_7c_27),s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27B_27),'const.bool.the_value_0'))),s('type.list.list'('bool'),V_27v2_27))))))))))).
fof('ARITY_0_2_const.words.word_join', axiom, ![V_27A_27,V_27B_27]: ![VV0, VV1]: s('type.fcp.cart'('bool','type.sum.sum'(V_27A_27,V_27B_27)),'happ'(s('fun'('type.fcp.cart'('bool',V_27B_27),'type.fcp.cart'('bool','type.sum.sum'(V_27A_27,V_27B_27))),'happ'(s('fun'('type.fcp.cart'('bool',V_27A_27),'fun'('type.fcp.cart'('bool',V_27B_27),'type.fcp.cart'('bool','type.sum.sum'(V_27A_27,V_27B_27)))),'const.words.word_join_0'),s('type.fcp.cart'('bool',V_27A_27),VV0))),s('type.fcp.cart'('bool',V_27B_27),VV1))) = s('type.fcp.cart'('bool','type.sum.sum'(V_27A_27,V_27B_27)),'const.words.word_join_2'(s('type.fcp.cart'('bool',V_27A_27),VV0),s('type.fcp.cart'('bool',V_27B_27),VV1)))).
fof('thm.bitstring.word_join_v2w_rwt', axiom, ![V_27A_27,V_27B_27]: ![V_27bad_7c32_7cdomain_27, V_27v_7c49_7c_27, V_27v2_27]: ?[Vv]: ((p(s('bool',Vv)) <=> (p(s('bool','const.pred_set.FINITE_1'(s('fun'(V_27A_27,'bool'),'const.pred_set.UNIV_0')))) & p(s('bool','const.pred_set.FINITE_1'(s('fun'(V_27B_27,'bool'),'const.pred_set.UNIV_0')))))) & s('type.fcp.cart'('bool','type.sum.sum'(V_27A_27,V_27B_27)),'happ'(s('fun'('type.fcp.cart'('bool',V_27B_27),'type.fcp.cart'('bool','type.sum.sum'(V_27A_27,V_27B_27))),'happ'(s('fun'('type.fcp.cart'('bool',V_27A_27),'fun'('type.fcp.cart'('bool',V_27B_27),'type.fcp.cart'('bool','type.sum.sum'(V_27A_27,V_27B_27)))),'const.words.word_join_0'),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_7c49_7c_27))))),s('type.fcp.cart'('bool',V_27B_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v2_27))))) = s('type.fcp.cart'('bool','type.sum.sum'(V_27A_27,V_27B_27)),'const.bool.COND_3'(s('bool',Vv),s('type.fcp.cart'('bool','type.sum.sum'(V_27A_27,V_27B_27)),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.list.APPEND_2'(s('type.list.list'('bool'),V_27v_7c49_7c_27),s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27B_27),'const.bool.the_value_0'))),s('type.list.list'('bool'),V_27v2_27))))))),s('type.fcp.cart'('bool','type.sum.sum'(V_27A_27,V_27B_27)),'happ'(s('fun'('type.fcp.cart'('bool',V_27B_27),'type.fcp.cart'('bool','type.sum.sum'(V_27A_27,V_27B_27))),'happ'(s('fun'('type.fcp.cart'('bool',V_27A_27),'fun'('type.fcp.cart'('bool',V_27B_27),'type.fcp.cart'('bool','type.sum.sum'(V_27A_27,V_27B_27)))),'const.combin.FAIL_2'(s('fun'('type.fcp.cart'('bool',V_27A_27),'fun'('type.fcp.cart'('bool',V_27B_27),'type.fcp.cart'('bool','type.sum.sum'(V_27A_27,V_27B_27)))),'const.words.word_join_0'),s('bool',V_27bad_7c32_7cdomain_27))),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_7c49_7c_27))))),s('type.fcp.cart'('bool',V_27B_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v2_27))))))))).
fof('ARITY_0_2_const.words.word_concat', axiom, ![V_27C_27,V_27A_27,V_27B_27]: ![VV0, VV1]: s('type.fcp.cart'('bool',V_27C_27),'happ'(s('fun'('type.fcp.cart'('bool',V_27B_27),'type.fcp.cart'('bool',V_27C_27)),'happ'(s('fun'('type.fcp.cart'('bool',V_27A_27),'fun'('type.fcp.cart'('bool',V_27B_27),'type.fcp.cart'('bool',V_27C_27))),'const.words.word_concat_0'),s('type.fcp.cart'('bool',V_27A_27),VV0))),s('type.fcp.cart'('bool',V_27B_27),VV1))) = s('type.fcp.cart'('bool',V_27C_27),'const.words.word_concat_2'(s('type.fcp.cart'('bool',V_27A_27),VV0),s('type.fcp.cart'('bool',V_27B_27),VV1)))).
fof('thm.bitstring.word_concat_v2w_rwt', axiom, ![V_27C_27,V_27A_27,V_27B_27]: ![V_27bad_7c32_7cdomain_27, V_27v_7c49_7c_27, V_27v2_27]: ?[Vv]: ((p(s('bool',Vv)) <=> (p(s('bool','const.pred_set.FINITE_1'(s('fun'(V_27A_27,'bool'),'const.pred_set.UNIV_0')))) & p(s('bool','const.pred_set.FINITE_1'(s('fun'(V_27B_27,'bool'),'const.pred_set.UNIV_0')))))) & s('type.fcp.cart'('bool',V_27C_27),'happ'(s('fun'('type.fcp.cart'('bool',V_27B_27),'type.fcp.cart'('bool',V_27C_27)),'happ'(s('fun'('type.fcp.cart'('bool',V_27A_27),'fun'('type.fcp.cart'('bool',V_27B_27),'type.fcp.cart'('bool',V_27C_27))),'const.words.word_concat_0'),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_7c49_7c_27))))),s('type.fcp.cart'('bool',V_27B_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v2_27))))) = s('type.fcp.cart'('bool',V_27C_27),'const.bool.COND_3'(s('bool',Vv),s('type.fcp.cart'('bool',V_27C_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27C_27),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27B_27),'const.bool.the_value_0'))))))),s('type.list.list'('bool'),'const.list.APPEND_2'(s('type.list.list'('bool'),V_27v_7c49_7c_27),s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27B_27),'const.bool.the_value_0'))),s('type.list.list'('bool'),V_27v2_27))))))))),s('type.fcp.cart'('bool',V_27C_27),'happ'(s('fun'('type.fcp.cart'('bool',V_27B_27),'type.fcp.cart'('bool',V_27C_27)),'happ'(s('fun'('type.fcp.cart'('bool',V_27A_27),'fun'('type.fcp.cart'('bool',V_27B_27),'type.fcp.cart'('bool',V_27C_27))),'const.combin.FAIL_2'(s('fun'('type.fcp.cart'('bool',V_27A_27),'fun'('type.fcp.cart'('bool',V_27B_27),'type.fcp.cart'('bool',V_27C_27))),'const.words.word_concat_0'),s('bool',V_27bad_7c32_7cdomain_27))),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_7c49_7c_27))))),s('type.fcp.cart'('bool',V_27B_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v2_27))))))))).
fof('thm.bitstring.bitstring_|49||49|7_prove_ltb', axiom, ![V_27d_27, V_27v_27]: (p(s('bool','happ'(s('fun'('type.num.num','bool'),'const.prim_rec.<_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',V_27d_27)))) => s('type.list.list'('bool'),'const.list.GENLIST_2'(s('fun'('type.num.num','bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.num.num','bool'),'_dst_x0x1x0_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.num.num','bool'),'_dst_x0x1_2'(s('fun'('type.num.num','bool'),'const.prim_rec.<_1'(s('type.num.num',V_27d_27))),s('fun'('type.num.num','type.num.num'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'happ'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('bool','happ'(s('fun'('type.num.num','bool'),'const.prim_rec.<_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27))))))),s('fun'('type.num.num','bool'),'_dst_x0x1x0_3'(s('fun'('type.num.num','fun'('type.list.list'('bool'),'bool')),'const.list.EL_0'),s('fun'('type.num.num','type.num.num'),'_dst_x0x1_2'(s('fun'('type.num.num','type.num.num'),'const.arithmetic.-_1'(s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.arithmetic.-_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('fun'('type.num.num','type.num.num'),'_dst_x0x1_2'(s('fun'('type.num.num','type.num.num'),'const.arithmetic.-_1'(s('type.num.num',V_27d_27))),s('fun'('type.num.num','type.num.num'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('bool'),V_27v_27))))),s('type.num.num',V_27d_27))) = s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num',V_27d_27),s('type.list.list'('bool'),V_27v_27))))).
fof('thm.bitstring.word_reduce_v2w', axiom, ![V_27A_27]: ![V_27f_27, V_27v_27]: s('type.fcp.cart'('bool','type.one.one'),'const.words.word_reduce_2'(s('fun'('bool','fun'('bool','bool')),V_27f_27),s('type.fcp.cart'('bool',V_27A_27),'happ'(s('fun'('type.list.list'('bool'),'type.fcp.cart'('bool',V_27A_27)),'const.bitstring.v2w_0'),s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool','type.one.one'),'const.bool.LET_2'(s('fun'('type.list.list'('bool'),'type.fcp.cart'('bool','type.one.one')),'_dst_x0x1_2'(s('fun'('type.list.list'('bool'),'type.fcp.cart'('bool','type.one.one')),'const.bitstring.v2w_0'),s('fun'('type.list.list'('bool'),'type.list.list'('bool')),'_dst_x0x1x0_3'(s('fun'('bool','fun'('type.list.list'('bool'),'type.list.list'('bool'))),'const.list.CONS_0'),s('fun'('type.list.list'('bool'),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('type.list.list'('bool'),'bool')),'const.list.FOLDL_1'(s('fun'('bool','fun'('bool','bool')),V_27f_27))),s('fun'('type.list.list'('bool'),'bool'),'const.list.HD_0'),s('fun'('type.list.list'('bool'),'type.list.list'('bool')),'const.list.TL_0'))),s('type.list.list'('bool'),'const.list.NIL_0'))))),s('type.list.list'('bool'),'const.bitstring.fixwidth_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.list.list'('bool'),V_27v_27)))))).
fof('thm.bitstring.reduce_and_v2w', axiom, ![V_27A_27]: ![V_27v_27]: s('type.fcp.cart'('bool','type.one.one'),'const.words.reduce_and_1'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool','type.one.one'),'const.words.word_reduce_2'(s('fun'('bool','fun'('bool','bool')),'|dollar|and_0'),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27)))))).
fof('thm.bitstring.reduce_or_v2w', axiom, ![V_27A_27]: ![V_27v_27]: s('type.fcp.cart'('bool','type.one.one'),'const.words.reduce_or_1'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool','type.one.one'),'const.words.word_reduce_2'(s('fun'('bool','fun'('bool','bool')),'|dollar|or_0'),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27)))))).
fof('thm.bitstring.extract_v2w', axiom, ![V_27A_27,V_27B_27]: ![V_27h_27, V_27l_27, V_27v_27]: ((p(s('bool','const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('bool'),V_27v_27))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0')))))) & (s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27B_27),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27h_27))),s('type.num.num',V_27l_27))) & p(s('bool','const.prim_rec.<_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27B_27),'const.bool.the_value_0'))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0')))))))) => s('type.fcp.cart'('bool',V_27B_27),'const.words.word_extract_3'(s('type.num.num',V_27h_27),s('type.num.num',V_27l_27),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool',V_27B_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.field_3'(s('type.num.num',V_27h_27),s('type.num.num',V_27l_27),s('type.list.list'('bool'),V_27v_27))))))).
fof('thm.bitstring.bitstring_|49|22_prove_ltb', axiom, ![V_27A_27]: ![V_27l_27]: (~ (p(s('bool','const.list.NULL_1'(s('type.list.list'(V_27A_27),V_27l_27))))) => s('type.list.list'(V_27A_27),'const.list.DROP_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(V_27A_27),V_27l_27))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(V_27A_27),V_27l_27))) = s('type.list.list'(V_27A_27),'const.list.CONS_2'(s(V_27A_27,'const.list.LAST_1'(s('type.list.list'(V_27A_27),V_27l_27))),s('type.list.list'(V_27A_27),'const.list.NIL_0'))))).
fof('ARITY_0_1_const.list.LAST', axiom, ![V_27A_27]: ![VV0]: s(V_27A_27,'happ'(s('fun'('type.list.list'(V_27A_27),V_27A_27),'const.list.LAST_0'),s('type.list.list'(V_27A_27),VV0))) = s(V_27A_27,'const.list.LAST_1'(s('type.list.list'(V_27A_27),VV0)))).
fof('thm.bitstring.word_bit_last_shiftr', axiom, ![V_27A_27]: ![V_27i_27, V_27v_27]: (p(s('bool','const.prim_rec.<_2'(s('type.num.num',V_27i_27),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0')))))) => s('bool','const.words.word_bit_2'(s('type.num.num',V_27i_27),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('bool','const.bool.LET_2'(s('fun'('type.list.list'('bool'),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('bool'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('bool'),'bool'),'const.list.NULL_0'))),s('fun'('type.list.list'('bool'),'bool'),'const.list.LAST_0'))),s('type.list.list'('bool'),'const.bitstring.shiftr_2'(s('type.list.list'('bool'),V_27v_27),s('type.num.num',V_27i_27))))))).
fof('thm.bitstring.ops_to_v2w|split|0', axiom, ![V_27C_27]: ![V_27v_27, V_27n_27]: s('type.fcp.cart'('bool',V_27C_27),'const.words.word_or_2'(s('type.fcp.cart'('bool',V_27C_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27C_27),'const.words.n2w_1'(s('type.num.num',V_27n_27))))) = s('type.fcp.cart'('bool',V_27C_27),'const.words.word_or_2'(s('type.fcp.cart'('bool',V_27C_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27C_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.n2v_1'(s('type.num.num',V_27n_27)))))))).
fof('thm.bitstring.ops_to_v2w|split|1', axiom, ![V_27D_27]: ![V_27v_27, V_27n_27]: s('type.fcp.cart'('bool',V_27D_27),'const.words.word_or_2'(s('type.fcp.cart'('bool',V_27D_27),'const.words.n2w_1'(s('type.num.num',V_27n_27))),s('type.fcp.cart'('bool',V_27D_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool',V_27D_27),'const.words.word_or_2'(s('type.fcp.cart'('bool',V_27D_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.n2v_1'(s('type.num.num',V_27n_27))))),s('type.fcp.cart'('bool',V_27D_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27)))))).
fof('thm.bitstring.ops_to_v2w|split|2', axiom, ![V_27E_27]: ![V_27v_27, V_27n_27]: s('type.fcp.cart'('bool',V_27E_27),'const.words.word_and_2'(s('type.fcp.cart'('bool',V_27E_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27E_27),'const.words.n2w_1'(s('type.num.num',V_27n_27))))) = s('type.fcp.cart'('bool',V_27E_27),'const.words.word_and_2'(s('type.fcp.cart'('bool',V_27E_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27E_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.n2v_1'(s('type.num.num',V_27n_27)))))))).
fof('thm.bitstring.ops_to_v2w|split|3', axiom, ![V_27F_27]: ![V_27v_27, V_27n_27]: s('type.fcp.cart'('bool',V_27F_27),'const.words.word_and_2'(s('type.fcp.cart'('bool',V_27F_27),'const.words.n2w_1'(s('type.num.num',V_27n_27))),s('type.fcp.cart'('bool',V_27F_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool',V_27F_27),'const.words.word_and_2'(s('type.fcp.cart'('bool',V_27F_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.n2v_1'(s('type.num.num',V_27n_27))))),s('type.fcp.cart'('bool',V_27F_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27)))))).
fof('thm.bitstring.ops_to_v2w|split|4', axiom, ![V_27G_27]: ![V_27v_27, V_27n_27]: s('type.fcp.cart'('bool',V_27G_27),'const.words.word_xor_2'(s('type.fcp.cart'('bool',V_27G_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27G_27),'const.words.n2w_1'(s('type.num.num',V_27n_27))))) = s('type.fcp.cart'('bool',V_27G_27),'const.words.word_xor_2'(s('type.fcp.cart'('bool',V_27G_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27G_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.n2v_1'(s('type.num.num',V_27n_27)))))))).
fof('thm.bitstring.ops_to_v2w|split|5', axiom, ![V_27H_27]: ![V_27v_27, V_27n_27]: s('type.fcp.cart'('bool',V_27H_27),'const.words.word_xor_2'(s('type.fcp.cart'('bool',V_27H_27),'const.words.n2w_1'(s('type.num.num',V_27n_27))),s('type.fcp.cart'('bool',V_27H_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool',V_27H_27),'const.words.word_xor_2'(s('type.fcp.cart'('bool',V_27H_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.n2v_1'(s('type.num.num',V_27n_27))))),s('type.fcp.cart'('bool',V_27H_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27)))))).
fof('thm.bitstring.ops_to_v2w|split|6', axiom, ![V_27I_27]: ![V_27v_27, V_27n_27]: s('type.fcp.cart'('bool',V_27I_27),'const.words.word_nor_2'(s('type.fcp.cart'('bool',V_27I_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27I_27),'const.words.n2w_1'(s('type.num.num',V_27n_27))))) = s('type.fcp.cart'('bool',V_27I_27),'const.words.word_nor_2'(s('type.fcp.cart'('bool',V_27I_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27I_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.n2v_1'(s('type.num.num',V_27n_27)))))))).
fof('thm.bitstring.ops_to_v2w|split|7', axiom, ![V_27J_27]: ![V_27v_27, V_27n_27]: s('type.fcp.cart'('bool',V_27J_27),'const.words.word_nor_2'(s('type.fcp.cart'('bool',V_27J_27),'const.words.n2w_1'(s('type.num.num',V_27n_27))),s('type.fcp.cart'('bool',V_27J_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool',V_27J_27),'const.words.word_nor_2'(s('type.fcp.cart'('bool',V_27J_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.n2v_1'(s('type.num.num',V_27n_27))))),s('type.fcp.cart'('bool',V_27J_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27)))))).
fof('thm.bitstring.ops_to_v2w|split|8', axiom, ![V_27K_27]: ![V_27v_27, V_27n_27]: s('type.fcp.cart'('bool',V_27K_27),'const.words.word_nand_2'(s('type.fcp.cart'('bool',V_27K_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27K_27),'const.words.n2w_1'(s('type.num.num',V_27n_27))))) = s('type.fcp.cart'('bool',V_27K_27),'const.words.word_nand_2'(s('type.fcp.cart'('bool',V_27K_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27K_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.n2v_1'(s('type.num.num',V_27n_27)))))))).
fof('thm.bitstring.ops_to_v2w|split|9', axiom, ![V_27L_27]: ![V_27v_27, V_27n_27]: s('type.fcp.cart'('bool',V_27L_27),'const.words.word_nand_2'(s('type.fcp.cart'('bool',V_27L_27),'const.words.n2w_1'(s('type.num.num',V_27n_27))),s('type.fcp.cart'('bool',V_27L_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool',V_27L_27),'const.words.word_nand_2'(s('type.fcp.cart'('bool',V_27L_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.n2v_1'(s('type.num.num',V_27n_27))))),s('type.fcp.cart'('bool',V_27L_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27)))))).
fof('thm.bitstring.ops_to_v2w|split|10', axiom, ![V_27M_27]: ![V_27v_27, V_27n_27]: s('type.fcp.cart'('bool',V_27M_27),'const.words.word_xnor_2'(s('type.fcp.cart'('bool',V_27M_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27M_27),'const.words.n2w_1'(s('type.num.num',V_27n_27))))) = s('type.fcp.cart'('bool',V_27M_27),'const.words.word_xnor_2'(s('type.fcp.cart'('bool',V_27M_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27M_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.n2v_1'(s('type.num.num',V_27n_27)))))))).
fof('thm.bitstring.ops_to_v2w|split|11', axiom, ![V_27N_27]: ![V_27v_27, V_27n_27]: s('type.fcp.cart'('bool',V_27N_27),'const.words.word_xnor_2'(s('type.fcp.cart'('bool',V_27N_27),'const.words.n2w_1'(s('type.num.num',V_27n_27))),s('type.fcp.cart'('bool',V_27N_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool',V_27N_27),'const.words.word_xnor_2'(s('type.fcp.cart'('bool',V_27N_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.n2v_1'(s('type.num.num',V_27n_27))))),s('type.fcp.cart'('bool',V_27N_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27)))))).
fof('thm.bitstring.ops_to_v2w|split|12', axiom, ![V_27O_27,V_27A_27,V_27B_27]: ![V_27v_27, V_27n_27]: s('type.fcp.cart'('bool',V_27O_27),'const.words.word_concat_2'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27B_27),'const.words.n2w_1'(s('type.num.num',V_27n_27))))) = s('type.fcp.cart'('bool',V_27O_27),'const.words.word_concat_2'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27B_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.n2v_1'(s('type.num.num',V_27n_27)))))))).
fof('thm.bitstring.ops_to_v2w|split|13', axiom, ![V_27P_27,V_27A_27,V_27B_27]: ![V_27v_27, V_27n_27]: s('type.fcp.cart'('bool',V_27P_27),'const.words.word_concat_2'(s('type.fcp.cart'('bool',V_27A_27),'const.words.n2w_1'(s('type.num.num',V_27n_27))),s('type.fcp.cart'('bool',V_27B_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool',V_27P_27),'const.words.word_concat_2'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.n2v_1'(s('type.num.num',V_27n_27))))),s('type.fcp.cart'('bool',V_27B_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27)))))).
fof('thm.bitstring.ops_to_v2w|split|14', axiom, ![V_27Q_27,V_27R_27]: ![V_27v_27, V_27n_27]: s('type.fcp.cart'('bool','type.sum.sum'(V_27Q_27,V_27R_27)),'const.words.word_join_2'(s('type.fcp.cart'('bool',V_27Q_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27R_27),'const.words.n2w_1'(s('type.num.num',V_27n_27))))) = s('type.fcp.cart'('bool','type.sum.sum'(V_27Q_27,V_27R_27)),'const.words.word_join_2'(s('type.fcp.cart'('bool',V_27Q_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27R_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.n2v_1'(s('type.num.num',V_27n_27)))))))).
fof('thm.bitstring.ops_to_v2w|split|15', axiom, ![V_27S_27,V_27T_27]: ![V_27v_27, V_27n_27]: s('type.fcp.cart'('bool','type.sum.sum'(V_27S_27,V_27T_27)),'const.words.word_join_2'(s('type.fcp.cart'('bool',V_27S_27),'const.words.n2w_1'(s('type.num.num',V_27n_27))),s('type.fcp.cart'('bool',V_27T_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool','type.sum.sum'(V_27S_27,V_27T_27)),'const.words.word_join_2'(s('type.fcp.cart'('bool',V_27S_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),'const.bitstring.n2v_1'(s('type.num.num',V_27n_27))))),s('type.fcp.cart'('bool',V_27T_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27)))))).
fof('thm.bitstring.ops_to_n2w|split|0', axiom, ![V_27B_27]: ![V_27v_27]: s('type.fcp.cart'('bool',V_27B_27),'const.words.word_2comp_1'(s('type.fcp.cart'('bool',V_27B_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool',V_27B_27),'const.words.word_2comp_1'(s('type.fcp.cart'('bool',V_27B_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27)))))))).
fof('thm.bitstring.ops_to_n2w|split|1', axiom, ![V_27C_27]: ![V_27v_27]: s('type.fcp.cart'('bool',V_27C_27),'const.words.word_log2_1'(s('type.fcp.cart'('bool',V_27C_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool',V_27C_27),'const.words.word_log2_1'(s('type.fcp.cart'('bool',V_27C_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27)))))))).
fof('thm.bitstring.ops_to_n2w|split|2', axiom, ![V_27A_27]: ![V_27v_27, V_27n_27]: (s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))) = s('type.fcp.cart'('bool',V_27A_27),'const.words.n2w_1'(s('type.num.num',V_27n_27))) <=> s('type.fcp.cart'('bool',V_27A_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool',V_27A_27),'const.words.n2w_1'(s('type.num.num',V_27n_27))))).
fof('thm.bitstring.ops_to_n2w|split|3', axiom, ![V_27A_27]: ![V_27v_27, V_27n_27]: (s('type.fcp.cart'('bool',V_27A_27),'const.words.n2w_1'(s('type.num.num',V_27n_27))) = s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))) <=> s('type.fcp.cart'('bool',V_27A_27),'const.words.n2w_1'(s('type.num.num',V_27n_27))) = s('type.fcp.cart'('bool',V_27A_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27))))))).
fof('thm.bitstring.ops_to_n2w|split|4', axiom, ![V_27D_27]: ![V_27v_27, V_27w_27]: s('type.fcp.cart'('bool',V_27D_27),'const.words.word_add_2'(s('type.fcp.cart'('bool',V_27D_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27D_27),V_27w_27))) = s('type.fcp.cart'('bool',V_27D_27),'const.words.word_add_2'(s('type.fcp.cart'('bool',V_27D_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27))))),s('type.fcp.cart'('bool',V_27D_27),V_27w_27)))).
fof('thm.bitstring.ops_to_n2w|split|5', axiom, ![V_27E_27]: ![V_27v_27, V_27w_27]: s('type.fcp.cart'('bool',V_27E_27),'const.words.word_add_2'(s('type.fcp.cart'('bool',V_27E_27),V_27w_27),s('type.fcp.cart'('bool',V_27E_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool',V_27E_27),'const.words.word_add_2'(s('type.fcp.cart'('bool',V_27E_27),V_27w_27),s('type.fcp.cart'('bool',V_27E_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27)))))))).
fof('thm.bitstring.ops_to_n2w|split|6', axiom, ![V_27F_27]: ![V_27v_27, V_27w_27]: s('type.fcp.cart'('bool',V_27F_27),'const.words.word_sub_2'(s('type.fcp.cart'('bool',V_27F_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27F_27),V_27w_27))) = s('type.fcp.cart'('bool',V_27F_27),'const.words.word_sub_2'(s('type.fcp.cart'('bool',V_27F_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27))))),s('type.fcp.cart'('bool',V_27F_27),V_27w_27)))).
fof('thm.bitstring.ops_to_n2w|split|7', axiom, ![V_27G_27]: ![V_27v_27, V_27w_27]: s('type.fcp.cart'('bool',V_27G_27),'const.words.word_sub_2'(s('type.fcp.cart'('bool',V_27G_27),V_27w_27),s('type.fcp.cart'('bool',V_27G_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool',V_27G_27),'const.words.word_sub_2'(s('type.fcp.cart'('bool',V_27G_27),V_27w_27),s('type.fcp.cart'('bool',V_27G_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27)))))))).
fof('thm.bitstring.ops_to_n2w|split|8', axiom, ![V_27H_27]: ![V_27v_27, V_27w_27]: s('type.fcp.cart'('bool',V_27H_27),'const.words.word_mul_2'(s('type.fcp.cart'('bool',V_27H_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27H_27),V_27w_27))) = s('type.fcp.cart'('bool',V_27H_27),'const.words.word_mul_2'(s('type.fcp.cart'('bool',V_27H_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27))))),s('type.fcp.cart'('bool',V_27H_27),V_27w_27)))).
fof('thm.bitstring.ops_to_n2w|split|9', axiom, ![V_27I_27]: ![V_27v_27, V_27w_27]: s('type.fcp.cart'('bool',V_27I_27),'const.words.word_mul_2'(s('type.fcp.cart'('bool',V_27I_27),V_27w_27),s('type.fcp.cart'('bool',V_27I_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool',V_27I_27),'const.words.word_mul_2'(s('type.fcp.cart'('bool',V_27I_27),V_27w_27),s('type.fcp.cart'('bool',V_27I_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27)))))))).
fof('thm.bitstring.ops_to_n2w|split|10', axiom, ![V_27J_27]: ![V_27v_27, V_27w_27]: s('type.fcp.cart'('bool',V_27J_27),'const.words.word_sdiv_2'(s('type.fcp.cart'('bool',V_27J_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27J_27),V_27w_27))) = s('type.fcp.cart'('bool',V_27J_27),'const.words.word_sdiv_2'(s('type.fcp.cart'('bool',V_27J_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27))))),s('type.fcp.cart'('bool',V_27J_27),V_27w_27)))).
fof('thm.bitstring.ops_to_n2w|split|11', axiom, ![V_27K_27]: ![V_27v_27, V_27w_27]: s('type.fcp.cart'('bool',V_27K_27),'const.words.word_sdiv_2'(s('type.fcp.cart'('bool',V_27K_27),V_27w_27),s('type.fcp.cart'('bool',V_27K_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool',V_27K_27),'const.words.word_sdiv_2'(s('type.fcp.cart'('bool',V_27K_27),V_27w_27),s('type.fcp.cart'('bool',V_27K_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27)))))))).
fof('thm.bitstring.ops_to_n2w|split|12', axiom, ![V_27L_27]: ![V_27v_27, V_27w_27]: s('type.fcp.cart'('bool',V_27L_27),'const.words.word_div_2'(s('type.fcp.cart'('bool',V_27L_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27L_27),V_27w_27))) = s('type.fcp.cart'('bool',V_27L_27),'const.words.word_div_2'(s('type.fcp.cart'('bool',V_27L_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27))))),s('type.fcp.cart'('bool',V_27L_27),V_27w_27)))).
fof('thm.bitstring.ops_to_n2w|split|13', axiom, ![V_27M_27]: ![V_27v_27, V_27w_27]: s('type.fcp.cart'('bool',V_27M_27),'const.words.word_div_2'(s('type.fcp.cart'('bool',V_27M_27),V_27w_27),s('type.fcp.cart'('bool',V_27M_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool',V_27M_27),'const.words.word_div_2'(s('type.fcp.cart'('bool',V_27M_27),V_27w_27),s('type.fcp.cart'('bool',V_27M_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27)))))))).
fof('thm.bitstring.ops_to_n2w|split|14', axiom, ![V_27N_27]: ![V_27v_27, V_27w_27]: s('type.fcp.cart'('bool',V_27N_27),'const.words.word_mod_2'(s('type.fcp.cart'('bool',V_27N_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27N_27),V_27w_27))) = s('type.fcp.cart'('bool',V_27N_27),'const.words.word_mod_2'(s('type.fcp.cart'('bool',V_27N_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27))))),s('type.fcp.cart'('bool',V_27N_27),V_27w_27)))).
fof('thm.bitstring.ops_to_n2w|split|15', axiom, ![V_27O_27]: ![V_27v_27, V_27w_27]: s('type.fcp.cart'('bool',V_27O_27),'const.words.word_mod_2'(s('type.fcp.cart'('bool',V_27O_27),V_27w_27),s('type.fcp.cart'('bool',V_27O_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('type.fcp.cart'('bool',V_27O_27),'const.words.word_mod_2'(s('type.fcp.cart'('bool',V_27O_27),V_27w_27),s('type.fcp.cart'('bool',V_27O_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27)))))))).
fof('thm.bitstring.ops_to_n2w|split|16', axiom, ![V_27A_27]: ![V_27v_27, V_27w_27]: s('bool','const.words.word_lt_2'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27A_27),V_27w_27))) = s('bool','const.words.word_lt_2'(s('type.fcp.cart'('bool',V_27A_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27))))),s('type.fcp.cart'('bool',V_27A_27),V_27w_27)))).
fof('thm.bitstring.ops_to_n2w|split|17', axiom, ![V_27A_27]: ![V_27v_27, V_27w_27]: s('bool','const.words.word_lt_2'(s('type.fcp.cart'('bool',V_27A_27),V_27w_27),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('bool','const.words.word_lt_2'(s('type.fcp.cart'('bool',V_27A_27),V_27w_27),s('type.fcp.cart'('bool',V_27A_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27)))))))).
fof('thm.bitstring.ops_to_n2w|split|18', axiom, ![V_27A_27]: ![V_27v_27, V_27w_27]: s('bool','const.words.word_gt_2'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27A_27),V_27w_27))) = s('bool','const.words.word_gt_2'(s('type.fcp.cart'('bool',V_27A_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27))))),s('type.fcp.cart'('bool',V_27A_27),V_27w_27)))).
fof('thm.bitstring.ops_to_n2w|split|19', axiom, ![V_27A_27]: ![V_27v_27, V_27w_27]: s('bool','const.words.word_gt_2'(s('type.fcp.cart'('bool',V_27A_27),V_27w_27),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('bool','const.words.word_gt_2'(s('type.fcp.cart'('bool',V_27A_27),V_27w_27),s('type.fcp.cart'('bool',V_27A_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27)))))))).
fof('thm.bitstring.ops_to_n2w|split|20', axiom, ![V_27A_27]: ![V_27v_27, V_27w_27]: s('bool','const.words.word_le_2'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27A_27),V_27w_27))) = s('bool','const.words.word_le_2'(s('type.fcp.cart'('bool',V_27A_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27))))),s('type.fcp.cart'('bool',V_27A_27),V_27w_27)))).
fof('thm.bitstring.ops_to_n2w|split|21', axiom, ![V_27A_27]: ![V_27v_27, V_27w_27]: s('bool','const.words.word_le_2'(s('type.fcp.cart'('bool',V_27A_27),V_27w_27),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('bool','const.words.word_le_2'(s('type.fcp.cart'('bool',V_27A_27),V_27w_27),s('type.fcp.cart'('bool',V_27A_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27)))))))).
fof('thm.bitstring.ops_to_n2w|split|22', axiom, ![V_27A_27]: ![V_27v_27, V_27w_27]: s('bool','const.words.word_ge_2'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27A_27),V_27w_27))) = s('bool','const.words.word_ge_2'(s('type.fcp.cart'('bool',V_27A_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27))))),s('type.fcp.cart'('bool',V_27A_27),V_27w_27)))).
fof('thm.bitstring.ops_to_n2w|split|23', axiom, ![V_27A_27]: ![V_27v_27, V_27w_27]: s('bool','const.words.word_ge_2'(s('type.fcp.cart'('bool',V_27A_27),V_27w_27),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('bool','const.words.word_ge_2'(s('type.fcp.cart'('bool',V_27A_27),V_27w_27),s('type.fcp.cart'('bool',V_27A_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27)))))))).
fof('thm.bitstring.ops_to_n2w|split|24', axiom, ![V_27A_27]: ![V_27v_27, V_27w_27]: s('bool','const.words.word_lo_2'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27A_27),V_27w_27))) = s('bool','const.words.word_lo_2'(s('type.fcp.cart'('bool',V_27A_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27))))),s('type.fcp.cart'('bool',V_27A_27),V_27w_27)))).
fof('thm.bitstring.ops_to_n2w|split|25', axiom, ![V_27A_27]: ![V_27v_27, V_27w_27]: s('bool','const.words.word_lo_2'(s('type.fcp.cart'('bool',V_27A_27),V_27w_27),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('bool','const.words.word_lo_2'(s('type.fcp.cart'('bool',V_27A_27),V_27w_27),s('type.fcp.cart'('bool',V_27A_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27)))))))).
fof('thm.bitstring.ops_to_n2w|split|26', axiom, ![V_27A_27]: ![V_27v_27, V_27w_27]: s('bool','const.words.word_hi_2'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27A_27),V_27w_27))) = s('bool','const.words.word_hi_2'(s('type.fcp.cart'('bool',V_27A_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27))))),s('type.fcp.cart'('bool',V_27A_27),V_27w_27)))).
fof('thm.bitstring.ops_to_n2w|split|27', axiom, ![V_27A_27]: ![V_27v_27, V_27w_27]: s('bool','const.words.word_hi_2'(s('type.fcp.cart'('bool',V_27A_27),V_27w_27),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('bool','const.words.word_hi_2'(s('type.fcp.cart'('bool',V_27A_27),V_27w_27),s('type.fcp.cart'('bool',V_27A_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27)))))))).
fof('thm.bitstring.ops_to_n2w|split|28', axiom, ![V_27A_27]: ![V_27v_27, V_27w_27]: s('bool','const.words.word_ls_2'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27A_27),V_27w_27))) = s('bool','const.words.word_ls_2'(s('type.fcp.cart'('bool',V_27A_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27))))),s('type.fcp.cart'('bool',V_27A_27),V_27w_27)))).
fof('thm.bitstring.ops_to_n2w|split|29', axiom, ![V_27A_27]: ![V_27v_27, V_27w_27]: s('bool','const.words.word_ls_2'(s('type.fcp.cart'('bool',V_27A_27),V_27w_27),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('bool','const.words.word_ls_2'(s('type.fcp.cart'('bool',V_27A_27),V_27w_27),s('type.fcp.cart'('bool',V_27A_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27)))))))).
fof('thm.bitstring.ops_to_n2w|split|30', axiom, ![V_27A_27]: ![V_27v_27, V_27w_27]: s('bool','const.words.word_hs_2'(s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))),s('type.fcp.cart'('bool',V_27A_27),V_27w_27))) = s('bool','const.words.word_hs_2'(s('type.fcp.cart'('bool',V_27A_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27))))),s('type.fcp.cart'('bool',V_27A_27),V_27w_27)))).
fof('thm.bitstring.ops_to_n2w|split|31', axiom, ![V_27A_27]: ![V_27v_27, V_27w_27]: s('bool','const.words.word_hs_2'(s('type.fcp.cart'('bool',V_27A_27),V_27w_27),s('type.fcp.cart'('bool',V_27A_27),'const.bitstring.v2w_1'(s('type.list.list'('bool'),V_27v_27))))) = s('bool','const.words.word_hs_2'(s('type.fcp.cart'('bool',V_27A_27),V_27w_27),s('type.fcp.cart'('bool',V_27A_27),'const.words.n2w_1'(s('type.num.num','const.bitstring.v2n_1'(s('type.list.list'('bool'),V_27v_27)))))))).
