fof('thm.bvl_jump.bvl_jump_|49|_prove_ltb', axiom, ![V_27a_27]: (?[V_27n_27, V_27xs_27]: s('type.pair.prod'('type.num.num','type.list.list'('type.bvl.exp')),V_27a_27) = s('type.pair.prod'('type.num.num','type.list.list'('type.bvl.exp')),'const.pair.,_2'(s('type.num.num',V_27n_27),s('type.list.list'('type.bvl.exp'),V_27xs_27))) => ?[V_27n_27, V_27xs_27]: s('type.pair.prod'('type.num.num','type.list.list'('type.bvl.exp')),V_27a_27) = s('type.pair.prod'('type.num.num','type.list.list'('type.bvl.exp')),'const.pair.,_2'(s('type.num.num',V_27n_27),s('type.list.list'('type.bvl.exp'),V_27xs_27))))).
fof('thm.bvl_jump.JumpList_ind', axiom, ![V_27P_27]: (![V_27n_27, V_27xs_27]: ((![V_27l_27, V_27k_27, V_27ys_27, V_27zs_27]: ((s('type.num.num',V_27l_27) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvl.exp'),V_27xs_27))) & (~ (s('type.num.num',V_27l_27) = s('type.num.num','const.num.|48|_0')) & (~ (s('type.num.num',V_27l_27) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) & (s('type.num.num',V_27k_27) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',V_27l_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & (s('type.list.list'('type.bvl.exp'),V_27ys_27) = s('type.list.list'('type.bvl.exp'),'const.list.TAKE_2'(s('type.num.num',V_27k_27),s('type.list.list'('type.bvl.exp'),V_27xs_27))) & s('type.list.list'('type.bvl.exp'),V_27zs_27) = s('type.list.list'('type.bvl.exp'),'const.list.DROP_2'(s('type.num.num',V_27k_27),s('type.list.list'('type.bvl.exp'),V_27xs_27)))))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.bvl.exp'),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.bvl.exp'),'bool')),V_27P_27),s('type.num.num',V_27n_27))),s('type.list.list'('type.bvl.exp'),V_27ys_27))))) & ![V_27l_27, V_27k_27, V_27ys_27, V_27zs_27]: ((s('type.num.num',V_27l_27) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvl.exp'),V_27xs_27))) & (~ (s('type.num.num',V_27l_27) = s('type.num.num','const.num.|48|_0')) & (~ (s('type.num.num',V_27l_27) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) & (s('type.num.num',V_27k_27) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',V_27l_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & (s('type.list.list'('type.bvl.exp'),V_27ys_27) = s('type.list.list'('type.bvl.exp'),'const.list.TAKE_2'(s('type.num.num',V_27k_27),s('type.list.list'('type.bvl.exp'),V_27xs_27))) & s('type.list.list'('type.bvl.exp'),V_27zs_27) = s('type.list.list'('type.bvl.exp'),'const.list.DROP_2'(s('type.num.num',V_27k_27),s('type.list.list'('type.bvl.exp'),V_27xs_27)))))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.bvl.exp'),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.bvl.exp'),'bool')),V_27P_27),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27n_27),s('type.num.num',V_27k_27))))),s('type.list.list'('type.bvl.exp'),V_27zs_27)))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.bvl.exp'),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.bvl.exp'),'bool')),V_27P_27),s('type.num.num',V_27n_27))),s('type.list.list'('type.bvl.exp'),V_27xs_27))))) => ![V_27v_27, V_27v_7c49_7c_27]: p(s('bool','happ'(s('fun'('type.list.list'('type.bvl.exp'),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.bvl.exp'),'bool')),V_27P_27),s('type.num.num',V_27v_27))),s('type.list.list'('type.bvl.exp'),V_27v_7c49_7c_27)))))).
fof('ARITY_0_2_const.bvl_jump.JumpList', axiom, ![VV0, VV1]: s('type.bvl.exp','happ'(s('fun'('type.list.list'('type.bvl.exp'),'type.bvl.exp'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.bvl.exp'),'type.bvl.exp')),'const.bvl_jump.JumpList_0'),s('type.num.num',VV0))),s('type.list.list'('type.bvl.exp'),VV1))) = s('type.bvl.exp','const.bvl_jump.JumpList_2'(s('type.num.num',VV0),s('type.list.list'('type.bvl.exp'),VV1)))).
fof('_dst_x000x100x010x101_ax', axiom, ![VA,VA4,VA2,VA5,VA3,VA6,VA1]: ![V__x, V__0, V__1, V__2, V__z]: s('fun'(VA2,'fun'(VA3,VA)),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA))),'_dst_x000x100x010x101_4'(s('fun'(VA4,'fun'(VA5,'fun'(VA6,VA))),V__x),s('fun'(VA1,VA4),V__0),s('fun'(VA2,VA5),V__1),s('fun'(VA1,'fun'(VA3,VA6)),V__2))),s(VA1,V__z))) = s('fun'(VA2,'fun'(VA3,VA)),'_dst_x00x00x10x01_4'(s('fun'(VA4,'fun'(VA5,'fun'(VA6,VA))),V__x),s(VA4,'happ'(s('fun'(VA1,VA4),V__0),s(VA1,V__z))),s('fun'(VA2,VA5),V__1),s('fun'(VA3,VA6),'happ'(s('fun'(VA1,'fun'(VA3,VA6)),V__2),s(VA1,V__z)))))).
fof('thm.bvl_jump.JumpList_def', axiom, ![V_27xs_27, V_27n_27]: s('type.bvl.exp','happ'(s('fun'('type.list.list'('type.bvl.exp'),'type.bvl.exp'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.bvl.exp'),'type.bvl.exp')),'const.bvl_jump.JumpList_0'),s('type.num.num',V_27n_27))),s('type.list.list'('type.bvl.exp'),V_27xs_27))) = s('type.bvl.exp','happ'(s('fun'('type.num.num','type.bvl.exp'),'happ'(s('fun'('fun'('type.num.num','type.bvl.exp'),'fun'('type.num.num','type.bvl.exp')),'const.bool.LET_0'),s('fun'('type.num.num','type.bvl.exp'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.bvl.exp','fun'('type.bvl.exp','type.bvl.exp'))),'const.bool.COND_0'),s('fun'('type.num.num','bool'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','bool')),'=_0'),s('type.num.num','const.num.|48|_0'))),s('type.bvl.exp','happ'(s('fun'('type.list.list'('type.bvl.exp'),'type.bvl.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.bvl.exp'),'type.bvl.exp')),'const.bvl.Op_0'),s('type.closLang.op','happ'(s('fun'('type.integer.int','type.closLang.op'),'const.closLang.Const_0'),s('type.integer.int','happ'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))),s('fun'('type.num.num','type.bvl.exp'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.bvl.exp','fun'('type.bvl.exp','type.bvl.exp'))),'const.bool.COND_0'),s('fun'('type.num.num','bool'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','bool')),'=_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.bvl.exp','const.list.HD_1'(s('type.list.list'('type.bvl.exp'),V_27xs_27))),s('fun'('type.num.num','type.bvl.exp'),'_dst_x0x1_2'(s('fun'('type.num.num','type.bvl.exp'),'happ'(s('fun'('fun'('type.num.num','type.bvl.exp'),'fun'('type.num.num','type.bvl.exp')),'const.bool.LET_0'),s('fun'('type.num.num','type.bvl.exp'),'_dst_x0x1x1_3'(s('fun'('fun'('type.list.list'('type.bvl.exp'),'type.bvl.exp'),'fun'('type.list.list'('type.bvl.exp'),'type.bvl.exp')),'const.bool.LET_0'),s('fun'('type.num.num','fun'('type.list.list'('type.bvl.exp'),'type.bvl.exp')),'_dst_x00x11x10_3'(s('fun'('fun'('type.list.list'('type.bvl.exp'),'type.bvl.exp'),'fun'('type.list.list'('type.bvl.exp'),'type.bvl.exp')),'const.bool.LET_0'),s('fun'('type.num.num','fun'('type.list.list'('type.bvl.exp'),'fun'('type.list.list'('type.bvl.exp'),'type.bvl.exp'))),'_dst_x000x100x010x101_4'(s('fun'('type.bvl.exp','fun'('type.bvl.exp','fun'('type.bvl.exp','type.bvl.exp'))),'const.bvl.If_0'),s('fun'('type.num.num','type.bvl.exp'),'_dst_x0x1_2'(s('fun'('type.list.list'('type.bvl.exp'),'type.bvl.exp'),'happ'(s('fun'('type.closLang.op','fun'('type.list.list'('type.bvl.exp'),'type.bvl.exp')),'const.bvl.Op_0'),s('type.closLang.op','const.closLang.Less_0'))),s('fun'('type.num.num','type.list.list'('type.bvl.exp')),'_dst_x0x1x0_3'(s('fun'('type.bvl.exp','fun'('type.list.list'('type.bvl.exp'),'type.list.list'('type.bvl.exp'))),'const.list.CONS_0'),s('fun'('type.num.num','type.bvl.exp'),'_dst_x0x1x0_3'(s('fun'('type.closLang.op','fun'('type.list.list'('type.bvl.exp'),'type.bvl.exp')),'const.bvl.Op_0'),s('fun'('type.num.num','type.closLang.op'),'_dst_x0x1_2'(s('fun'('type.integer.int','type.closLang.op'),'const.closLang.Const_0'),s('fun'('type.num.num','type.integer.int'),'_dst_x0x1_2'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('fun'('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num',V_27n_27))))))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))),s('type.list.list'('type.bvl.exp'),'happ'(s('fun'('type.list.list'('type.bvl.exp'),'type.list.list'('type.bvl.exp')),'happ'(s('fun'('type.bvl.exp','fun'('type.list.list'('type.bvl.exp'),'type.list.list'('type.bvl.exp'))),'const.list.CONS_0'),s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.bvl.exp'),'type.bvl.exp'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.bvl.exp'),'type.bvl.exp')),'const.bvl_jump.JumpList_0'),s('type.num.num',V_27n_27))),s('fun'('type.num.num','fun'('type.list.list'('type.bvl.exp'),'type.bvl.exp')),'_dst_x0x1_2'(s('fun'('type.num.num','fun'('type.list.list'('type.bvl.exp'),'type.bvl.exp')),'const.bvl_jump.JumpList_0'),s('fun'('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num',V_27n_27))))))),s('fun'('type.num.num','type.list.list'('type.bvl.exp')),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.list.list'('type.bvl.exp'),'type.list.list'('type.bvl.exp'))),'const.list.DROP_0'),s('type.list.list'('type.bvl.exp'),V_27xs_27))))),s('fun'('type.num.num','type.list.list'('type.bvl.exp')),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.list.list'('type.bvl.exp'),'type.list.list'('type.bvl.exp'))),'const.list.TAKE_0'),s('type.list.list'('type.bvl.exp'),V_27xs_27))))))),s('fun'('type.num.num','type.num.num'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.DIV_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvl.exp'),V_27xs_27)))))).
fof('thm.bvl_jump.Jump_def', axiom, ![V_27x_27, V_27xs_27]: s('type.bvl.exp','const.bvl_jump.Jump_2'(s('type.bvl.exp',V_27x_27),s('type.list.list'('type.bvl.exp'),V_27xs_27))) = s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',V_27x_27),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))),s('type.bvl.exp','const.bvl_jump.JumpList_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.bvl.exp'),V_27xs_27)))))).
fof('ARITY_0_1_const.clos_call.has_side_effect', axiom, ![VV0]: s('bool','happ'(s('fun'('type.closLang.exp','bool'),'const.clos_call.has_side_effect_0'),s('type.closLang.exp',VV0))) = s('bool','const.clos_call.has_side_effect_1'(s('type.closLang.exp',VV0)))).
