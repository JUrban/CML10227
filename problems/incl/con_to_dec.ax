fof('thm.con_to_dec.init_globals_def|split|0', axiom, ![V_27idx_27]: s('type.conLang.exp','const.con_to_dec.init_globals_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'),s('type.num.num',V_27idx_27))) = s('type.conLang.exp','const.conLang.Con_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conLang.exp'),'const.list.NIL_0')))).
fof('thm.con_to_dec.init_globals_def|split|1', axiom, ![V_27x_27, V_27vars_27, V_27idx_27]: s('type.conLang.exp','const.con_to_dec.init_globals_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.CONS_2'(s('type.list.list'('type.string.char'),V_27x_27),s('type.list.list'('type.list.list'('type.string.char')),V_27vars_27))),s('type.num.num',V_27idx_27))) = s('type.conLang.exp','const.conLang.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.conLang.exp','const.conLang.App_2'(s('type.conLang.op','const.conLang.Init_global_var_1'(s('type.num.num',V_27idx_27))),s('type.list.list'('type.conLang.exp'),'const.list.CONS_2'(s('type.conLang.exp','const.conLang.Var_local_1'(s('type.list.list'('type.string.char'),V_27x_27))),s('type.list.list'('type.conLang.exp'),'const.list.NIL_0'))))),s('type.conLang.exp','const.con_to_dec.init_globals_2'(s('type.list.list'('type.list.list'('type.string.char')),V_27vars_27),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27idx_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))).
fof('thm.con_to_dec.con_to_dec_2_prove_ltb', axiom, ![V_27A_27]: ![V_27a_27]: ((?[V_27next_27]: s('type.pair.prod'('type.num.num','type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')))),V_27a_27) = s('type.pair.prod'('type.num.num','type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')))),'const.pair.,_2'(s('type.num.num',V_27next_27),s('type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.list.NIL_0'))) | ?[V_27next_27, V_27f_27, V_27x_27, V_27e_27, V_27funs_27]: s('type.pair.prod'('type.num.num','type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')))),V_27a_27) = s('type.pair.prod'('type.num.num','type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')))),'const.pair.,_2'(s('type.num.num',V_27next_27),s('type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.list.CONS_2'(s('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')),'const.pair.,_2'(s(V_27A_27,V_27f_27),s('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),V_27x_27),s('type.conLang.exp',V_27e_27))))),s('type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),V_27funs_27)))))) => (?[V_27next_27]: s('type.pair.prod'('type.num.num','type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')))),V_27a_27) = s('type.pair.prod'('type.num.num','type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')))),'const.pair.,_2'(s('type.num.num',V_27next_27),s('type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.list.NIL_0'))) | ?[V_27next_27, V_27f_27, V_27x_27, V_27e_27, V_27funs_27]: s('type.pair.prod'('type.num.num','type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')))),V_27a_27) = s('type.pair.prod'('type.num.num','type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')))),'const.pair.,_2'(s('type.num.num',V_27next_27),s('type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.list.CONS_2'(s('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')),'const.pair.,_2'(s(V_27A_27,V_27f_27),s('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),V_27x_27),s('type.conLang.exp',V_27e_27))))),s('type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),V_27funs_27)))))))).
fof('thm.con_to_dec.init_global_funs_ind', axiom, ![V_27A_27]: ![V_27P_27]: ((![V_27next_27]: p(s('bool','happ'(s('fun'('type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'bool')),V_27P_27),s('type.num.num',V_27next_27))),s('type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.list.NIL_0')))) & ![V_27next_27, V_27f_27, V_27x_27, V_27e_27, V_27funs_27]: (p(s('bool','happ'(s('fun'('type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'bool')),V_27P_27),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27next_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),V_27funs_27)))) => p(s('bool','happ'(s('fun'('type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'bool')),V_27P_27),s('type.num.num',V_27next_27))),s('type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.list.CONS_2'(s('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')),'const.pair.,_2'(s(V_27A_27,V_27f_27),s('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),V_27x_27),s('type.conLang.exp',V_27e_27))))),s('type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),V_27funs_27)))))))) => ![V_27v_27, V_27v_7c49_7c_27]: p(s('bool','happ'(s('fun'('type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'bool'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'bool')),V_27P_27),s('type.num.num',V_27v_27))),s('type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),V_27v_7c49_7c_27)))))).
fof('thm.con_to_dec.init_global_funs_def|split|0', axiom, ![V_27A_27]: ![V_27next_27]: s('type.conLang.exp','const.con_to_dec.init_global_funs_2'(s('type.num.num',V_27next_27),s('type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.list.NIL_0'))) = s('type.conLang.exp','const.conLang.Con_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conLang.exp'),'const.list.NIL_0')))).
fof('thm.con_to_dec.init_global_funs_def|split|1', axiom, ![V_27A_27]: ![V_27x_27, V_27next_27, V_27funs_27, V_27f_27, V_27e_27]: s('type.conLang.exp','const.con_to_dec.init_global_funs_2'(s('type.num.num',V_27next_27),s('type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.list.CONS_2'(s('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')),'const.pair.,_2'(s(V_27A_27,V_27f_27),s('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),V_27x_27),s('type.conLang.exp',V_27e_27))))),s('type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),V_27funs_27))))) = s('type.conLang.exp','const.conLang.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.conLang.exp','const.conLang.App_2'(s('type.conLang.op','const.conLang.Init_global_var_1'(s('type.num.num',V_27next_27))),s('type.list.list'('type.conLang.exp'),'const.list.CONS_2'(s('type.conLang.exp','const.conLang.Fun_2'(s('type.list.list'('type.string.char'),V_27x_27),s('type.conLang.exp',V_27e_27))),s('type.list.list'('type.conLang.exp'),'const.list.NIL_0'))))),s('type.conLang.exp','const.con_to_dec.init_global_funs_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27next_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),V_27funs_27)))))).
fof('thm.con_to_dec.compile_decs_def|split|0', axiom, ![V_27next_27]: s('type.conLang.exp','const.con_to_dec.compile_decs_2'(s('type.num.num',V_27next_27),s('type.list.list'('type.conLang.dec'),'const.list.NIL_0'))) = s('type.conLang.exp','const.conLang.Con_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conLang.exp'),'const.list.NIL_0')))).
fof('ARITY_0_2_const.con_to_dec.init_globals', axiom, ![VV0, VV1]: s('type.conLang.exp','happ'(s('fun'('type.num.num','type.conLang.exp'),'happ'(s('fun'('type.list.list'('type.list.list'('type.string.char')),'fun'('type.num.num','type.conLang.exp')),'const.con_to_dec.init_globals_0'),s('type.list.list'('type.list.list'('type.string.char')),VV0))),s('type.num.num',VV1))) = s('type.conLang.exp','const.con_to_dec.init_globals_2'(s('type.list.list'('type.list.list'('type.string.char')),VV0),s('type.num.num',VV1)))).
fof('ARITY_1_2_const.con_to_dec.init_global_funs', axiom, ![V_27A_27]: ![VV0, VV1]: s('type.conLang.exp','happ'(s('fun'('type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'type.conLang.exp'),'const.con_to_dec.init_global_funs_1'(s('type.num.num',VV0))),s('type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),VV1))) = s('type.conLang.exp','const.con_to_dec.init_global_funs_2'(s('type.num.num',VV0),s('type.list.list'('type.pair.prod'(V_27A_27,'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),VV1)))).
fof('ARITY_0_2_const.con_to_dec.compile_decs', axiom, ![VV0, VV1]: s('type.conLang.exp','happ'(s('fun'('type.list.list'('type.conLang.dec'),'type.conLang.exp'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.conLang.dec'),'type.conLang.exp')),'const.con_to_dec.compile_decs_0'),s('type.num.num',VV0))),s('type.list.list'('type.conLang.dec'),VV1))) = s('type.conLang.exp','const.con_to_dec.compile_decs_2'(s('type.num.num',VV0),s('type.list.list'('type.conLang.dec'),VV1)))).
fof('ARITY_1_3_const.conLang.Let', axiom, ![VV0, VV1, VV2]: s('type.conLang.exp','happ'(s('fun'('type.conLang.exp','type.conLang.exp'),'happ'(s('fun'('type.conLang.exp','fun'('type.conLang.exp','type.conLang.exp')),'const.conLang.Let_1'(s('type.option.option'('type.list.list'('type.string.char')),VV0))),s('type.conLang.exp',VV1))),s('type.conLang.exp',VV2))) = s('type.conLang.exp','const.conLang.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),VV0),s('type.conLang.exp',VV1),s('type.conLang.exp',VV2)))).
fof('ARITY_1_2_const.conLang.Pcon', axiom, ![VV0, VV1]: s('type.conLang.pat','happ'(s('fun'('type.list.list'('type.conLang.pat'),'type.conLang.pat'),'const.conLang.Pcon_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),VV0))),s('type.list.list'('type.conLang.pat'),VV1))) = s('type.conLang.pat','const.conLang.Pcon_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),VV0),s('type.list.list'('type.conLang.pat'),VV1)))).
fof('thm.con_to_dec.compile_decs_def|split|1', axiom, ![V_27next_27, V_27d_27, V_27ds_27]: s('type.conLang.exp','happ'(s('fun'('type.list.list'('type.conLang.dec'),'type.conLang.exp'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.conLang.dec'),'type.conLang.exp')),'const.con_to_dec.compile_decs_0'),s('type.num.num',V_27next_27))),s('type.list.list'('type.conLang.dec'),'happ'(s('fun'('type.list.list'('type.conLang.dec'),'type.list.list'('type.conLang.dec')),'happ'(s('fun'('type.conLang.dec','fun'('type.list.list'('type.conLang.dec'),'type.list.list'('type.conLang.dec'))),'const.list.CONS_0'),s('type.conLang.dec',V_27d_27))),s('type.list.list'('type.conLang.dec'),V_27ds_27))))) = s('type.conLang.exp','const.conLang.dec_CASE_3'(s('type.conLang.dec',V_27d_27),s('fun'('type.num.num','fun'('type.conLang.exp','type.conLang.exp')),'_dst_x00x11x10_3'(s('fun'('fun'('type.list.list'('type.list.list'('type.string.char')),'type.conLang.exp'),'fun'('type.list.list'('type.list.list'('type.string.char')),'type.conLang.exp')),'const.bool.LET_0'),s('fun'('type.num.num','fun'('type.conLang.exp','fun'('type.list.list'('type.list.list'('type.string.char')),'type.conLang.exp'))),'_dst_x000x011x100_3'(s('fun'('type.conLang.exp','fun'('type.conLang.exp','type.conLang.exp')),'const.conLang.Let_1'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'))),s('fun'('type.conLang.exp','fun'('type.list.list'('type.list.list'('type.string.char')),'type.conLang.exp')),'_dst_x00x10x01_3'(s('fun'('type.conLang.exp','fun'('type.list.list'('type.pair.prod'('type.conLang.pat','type.conLang.exp')),'type.conLang.exp')),'const.conLang.Mat_0'),s('fun'('type.conLang.exp','type.conLang.exp'),'_i_0_0'),s('fun'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.pair.prod'('type.conLang.pat','type.conLang.exp'))),'_dst_x0x1x0_3'(s('fun'('type.pair.prod'('type.conLang.pat','type.conLang.exp'),'fun'('type.list.list'('type.pair.prod'('type.conLang.pat','type.conLang.exp')),'type.list.list'('type.pair.prod'('type.conLang.pat','type.conLang.exp')))),'const.list.CONS_0'),s('fun'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.conLang.pat','type.conLang.exp')),'_dst_x0x1x1_3'(s('fun'('type.conLang.pat','fun'('type.conLang.exp','type.pair.prod'('type.conLang.pat','type.conLang.exp'))),'const.pair.,_0'),s('fun'('type.list.list'('type.list.list'('type.string.char')),'type.conLang.pat'),'_dst_x0x1_2'(s('fun'('type.list.list'('type.conLang.pat'),'type.conLang.pat'),'const.conLang.Pcon_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'))),s('fun'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.conLang.pat')),'const.list.MAP_1'(s('fun'('type.list.list'('type.string.char'),'type.conLang.pat'),'const.conLang.Pvar_0'))))),s('fun'('type.list.list'('type.list.list'('type.string.char')),'type.conLang.exp'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.list.list'('type.string.char')),'fun'('type.num.num','type.conLang.exp')),'const.con_to_dec.init_globals_0'),s('type.num.num',V_27next_27))))),s('type.list.list'('type.pair.prod'('type.conLang.pat','type.conLang.exp')),'const.list.NIL_0'))))),s('fun'('type.num.num','type.conLang.exp'),'_dst_x0x1x0_3'(s('fun'('type.num.num','fun'('type.list.list'('type.conLang.dec'),'type.conLang.exp')),'const.con_to_dec.compile_decs_0'),s('fun'('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num',V_27next_27))),s('type.list.list'('type.conLang.dec'),V_27ds_27))))),s('fun'('type.num.num','type.list.list'('type.list.list'('type.string.char'))),'const.list.GENLIST_1'(s('fun'('type.num.num','type.list.list'('type.string.char')),'_dst_x0x1_2'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'const.list.APPEND_1'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('type.num.num','type.list.list'('type.string.char')),'const.ASCIInumbers.num_to_dec_string_0'))))))),s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'type.conLang.exp'),'_dst_x0x1x1_3'(s('fun'('fun'('type.num.num','type.conLang.exp'),'fun'('type.num.num','type.conLang.exp')),'const.bool.LET_0'),s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'fun'('type.num.num','type.conLang.exp')),'_dst_x00x10x01_3'(s('fun'('type.conLang.exp','fun'('type.conLang.exp','type.conLang.exp')),'const.conLang.Let_1'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'))),s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'type.conLang.exp'),'const.con_to_dec.init_global_funs_1'(s('type.num.num',V_27next_27))),s('fun'('type.num.num','type.conLang.exp'),'_dst_x0x1x0_3'(s('fun'('type.num.num','fun'('type.list.list'('type.conLang.dec'),'type.conLang.exp')),'const.con_to_dec.compile_decs_0'),s('fun'('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num',V_27next_27))),s('type.list.list'('type.conLang.dec'),V_27ds_27))))),s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'type.num.num'),'const.list.LENGTH_0')))))).
fof('ARITY_1_2_const.con_to_dec.compile_decs', axiom, ![VV0, VV1]: s('type.conLang.exp','happ'(s('fun'('type.list.list'('type.conLang.dec'),'type.conLang.exp'),'const.con_to_dec.compile_decs_1'(s('type.num.num',VV0))),s('type.list.list'('type.conLang.dec'),VV1))) = s('type.conLang.exp','const.con_to_dec.compile_decs_2'(s('type.num.num',VV0),s('type.list.list'('type.conLang.dec'),VV1)))).
fof('thm.con_to_dec.compile_prompt_def', axiom, ![V_27none__tag_27, V_27some__tag_27, V_27next_27, V_27prompt_27]: s('type.pair.prod'('type.num.num','type.conLang.exp'),'const.con_to_dec.compile_prompt_4'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),V_27none__tag_27),s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),V_27some__tag_27),s('type.num.num',V_27next_27),s('type.conLang.prompt',V_27prompt_27))) = s('type.pair.prod'('type.num.num','type.conLang.exp'),'const.conLang.prompt_CASE_2'(s('type.conLang.prompt',V_27prompt_27),s('fun'('type.list.list'('type.conLang.dec'),'type.pair.prod'('type.num.num','type.conLang.exp')),'_dst_x0x1x1_3'(s('fun'('fun'('type.num.num','type.pair.prod'('type.num.num','type.conLang.exp')),'fun'('type.num.num','type.pair.prod'('type.num.num','type.conLang.exp'))),'const.bool.LET_0'),s('fun'('type.list.list'('type.conLang.dec'),'fun'('type.num.num','type.pair.prod'('type.num.num','type.conLang.exp'))),'_dst_x00x01x11_3'(s('fun'('type.num.num','fun'('type.conLang.exp','type.pair.prod'('type.num.num','type.conLang.exp'))),'const.pair.,_0'),s('fun'('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num',V_27next_27))),s('fun'('type.list.list'('type.conLang.dec'),'fun'('type.num.num','type.conLang.exp')),'_dst_x00x01x10_3'(s('fun'('type.conLang.exp','fun'('type.conLang.exp','type.conLang.exp')),'const.conLang.Let_1'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'))),s('fun'('type.num.num','type.conLang.exp'),'const.conLang.Extend_global_0'),s('fun'('type.list.list'('type.conLang.dec'),'type.conLang.exp'),'_dst_x0x1x0_3'(s('fun'('type.conLang.exp','fun'('type.list.list'('type.pair.prod'('type.conLang.pat','type.conLang.exp')),'type.conLang.exp')),'const.conLang.Handle_0'),s('fun'('type.list.list'('type.conLang.dec'),'type.conLang.exp'),'_dst_x0x1x0_3'(s('fun'('type.conLang.exp','fun'('type.conLang.exp','type.conLang.exp')),'const.conLang.Let_1'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'))),s('fun'('type.list.list'('type.conLang.dec'),'type.conLang.exp'),'const.con_to_dec.compile_decs_1'(s('type.num.num',V_27next_27))),s('type.conLang.exp','const.conLang.Con_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),V_27none__tag_27))),s('type.list.list'('type.conLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.pair.prod'('type.conLang.pat','type.conLang.exp')),'const.list.CONS_2'(s('type.pair.prod'('type.conLang.pat','type.conLang.exp'),'happ'(s('fun'('type.conLang.exp','type.pair.prod'('type.conLang.pat','type.conLang.exp')),'happ'(s('fun'('type.conLang.pat','fun'('type.conLang.exp','type.pair.prod'('type.conLang.pat','type.conLang.exp'))),'const.pair.,_0'),s('type.conLang.pat','const.conLang.Pvar_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.conLang.exp','const.conLang.Con_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),V_27some__tag_27))),s('type.list.list'('type.conLang.exp'),'const.list.CONS_2'(s('type.conLang.exp','const.conLang.Var_local_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.conLang.exp'),'const.list.NIL_0'))))))),s('type.list.list'('type.pair.prod'('type.conLang.pat','type.conLang.exp')),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.conLang.dec'),'type.num.num'),'const.conLang.num_defs_0')))))).
fof('thm.con_to_dec.compile_prog_def|split|0', axiom, ![V_27none__tag_27, V_27some__tag_27, V_27next_27]: s('type.pair.prod'('type.num.num','type.conLang.exp'),'const.con_to_dec.compile_prog_4'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),V_27none__tag_27),s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),V_27some__tag_27),s('type.num.num',V_27next_27),s('type.list.list'('type.conLang.prompt'),'const.list.NIL_0'))) = s('type.pair.prod'('type.num.num','type.conLang.exp'),'const.pair.,_2'(s('type.num.num',V_27next_27),s('type.conLang.exp','const.conLang.Con_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),V_27none__tag_27))),s('type.list.list'('type.conLang.exp'),'const.list.NIL_0')))))).
fof('ARITY_2_4_const.con_to_dec.compile_prog', axiom, ![VV0, VV1, VV2, VV3]: s('type.pair.prod'('type.num.num','type.conLang.exp'),'happ'(s('fun'('type.list.list'('type.conLang.prompt'),'type.pair.prod'('type.num.num','type.conLang.exp')),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.conLang.prompt'),'type.pair.prod'('type.num.num','type.conLang.exp'))),'const.con_to_dec.compile_prog_2'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),VV0),s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),VV1))),s('type.num.num',VV2))),s('type.list.list'('type.conLang.prompt'),VV3))) = s('type.pair.prod'('type.num.num','type.conLang.exp'),'const.con_to_dec.compile_prog_4'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),VV0),s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),VV1),s('type.num.num',VV2),s('type.list.list'('type.conLang.prompt'),VV3)))).
fof('thm.con_to_dec.compile_prog_def|split|1', axiom, ![V_27none__tag_27, V_27some__tag_27, V_27next_27, V_27p_27, V_27ps_27]: s('type.pair.prod'('type.num.num','type.conLang.exp'),'happ'(s('fun'('type.list.list'('type.conLang.prompt'),'type.pair.prod'('type.num.num','type.conLang.exp')),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.conLang.prompt'),'type.pair.prod'('type.num.num','type.conLang.exp'))),'const.con_to_dec.compile_prog_2'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),V_27none__tag_27),s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),V_27some__tag_27))),s('type.num.num',V_27next_27))),s('type.list.list'('type.conLang.prompt'),'happ'(s('fun'('type.list.list'('type.conLang.prompt'),'type.list.list'('type.conLang.prompt')),'happ'(s('fun'('type.conLang.prompt','fun'('type.list.list'('type.conLang.prompt'),'type.list.list'('type.conLang.prompt'))),'const.list.CONS_0'),s('type.conLang.prompt',V_27p_27))),s('type.list.list'('type.conLang.prompt'),V_27ps_27))))) = s('type.pair.prod'('type.num.num','type.conLang.exp'),'happ'(s('fun'('type.pair.prod'('type.num.num','type.conLang.exp'),'type.pair.prod'('type.num.num','type.conLang.exp')),'happ'(s('fun'('fun'('type.pair.prod'('type.num.num','type.conLang.exp'),'type.pair.prod'('type.num.num','type.conLang.exp')),'fun'('type.pair.prod'('type.num.num','type.conLang.exp'),'type.pair.prod'('type.num.num','type.conLang.exp'))),'const.bool.LET_0'),s('fun'('type.pair.prod'('type.num.num','type.conLang.exp'),'type.pair.prod'('type.num.num','type.conLang.exp')),'happ'(s('fun'('fun'('type.num.num','fun'('type.conLang.exp','type.pair.prod'('type.num.num','type.conLang.exp'))),'fun'('type.pair.prod'('type.num.num','type.conLang.exp'),'type.pair.prod'('type.num.num','type.conLang.exp'))),'const.pair.UNCURRY_0'),s('fun'('type.num.num','fun'('type.conLang.exp','type.pair.prod'('type.num.num','type.conLang.exp'))),'_dst_x00x01x10_3'(s('fun'('fun'('type.pair.prod'('type.num.num','type.conLang.exp'),'type.pair.prod'('type.num.num','type.conLang.exp')),'fun'('type.pair.prod'('type.num.num','type.conLang.exp'),'type.pair.prod'('type.num.num','type.conLang.exp'))),'const.bool.LET_0'),s('fun'('type.conLang.exp','fun'('type.pair.prod'('type.num.num','type.conLang.exp'),'type.pair.prod'('type.num.num','type.conLang.exp'))),'_dst_x0x1_2'(s('fun'('fun'('type.num.num','fun'('type.conLang.exp','type.pair.prod'('type.num.num','type.conLang.exp'))),'fun'('type.pair.prod'('type.num.num','type.conLang.exp'),'type.pair.prod'('type.num.num','type.conLang.exp'))),'const.pair.UNCURRY_0'),s('fun'('type.conLang.exp','fun'('type.num.num','fun'('type.conLang.exp','type.pair.prod'('type.num.num','type.conLang.exp')))),'_dst_x000x010x101_3'(s('fun'('type.num.num','fun'('type.conLang.exp','type.pair.prod'('type.num.num','type.conLang.exp'))),'const.pair.,_0'),s('fun'('type.num.num','type.num.num'),'_i_0_0'),s('fun'('type.conLang.exp','fun'('type.conLang.exp','type.conLang.exp')),'_dst_x00x10x01_3'(s('fun'('type.conLang.exp','fun'('type.list.list'('type.pair.prod'('type.conLang.pat','type.conLang.exp')),'type.conLang.exp')),'const.conLang.Mat_0'),s('fun'('type.conLang.exp','type.conLang.exp'),'_i_0_0'),s('fun'('type.conLang.exp','type.list.list'('type.pair.prod'('type.conLang.pat','type.conLang.exp'))),'_dst_x0x1x0_3'(s('fun'('type.pair.prod'('type.conLang.pat','type.conLang.exp'),'fun'('type.list.list'('type.pair.prod'('type.conLang.pat','type.conLang.exp')),'type.list.list'('type.pair.prod'('type.conLang.pat','type.conLang.exp')))),'const.list.CONS_0'),s('fun'('type.conLang.exp','type.pair.prod'('type.conLang.pat','type.conLang.exp')),'happ'(s('fun'('type.conLang.pat','fun'('type.conLang.exp','type.pair.prod'('type.conLang.pat','type.conLang.exp'))),'const.pair.,_0'),s('type.conLang.pat','const.conLang.Pcon_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),V_27none__tag_27))),s('type.list.list'('type.conLang.pat'),'const.list.NIL_0'))))),s('type.list.list'('type.pair.prod'('type.conLang.pat','type.conLang.exp')),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.conLang.pat','type.conLang.exp')),'type.list.list'('type.pair.prod'('type.conLang.pat','type.conLang.exp'))),'happ'(s('fun'('type.pair.prod'('type.conLang.pat','type.conLang.exp'),'fun'('type.list.list'('type.pair.prod'('type.conLang.pat','type.conLang.exp')),'type.list.list'('type.pair.prod'('type.conLang.pat','type.conLang.exp')))),'const.list.CONS_0'),s('type.pair.prod'('type.conLang.pat','type.conLang.exp'),'happ'(s('fun'('type.conLang.exp','type.pair.prod'('type.conLang.pat','type.conLang.exp')),'happ'(s('fun'('type.conLang.pat','fun'('type.conLang.exp','type.pair.prod'('type.conLang.pat','type.conLang.exp'))),'const.pair.,_0'),s('type.conLang.pat','const.conLang.Pvar_1'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.conLang.exp','const.conLang.Var_local_1'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.pair.prod'('type.conLang.pat','type.conLang.exp')),'const.list.NIL_0'))))))))))),s('fun'('type.num.num','type.pair.prod'('type.num.num','type.conLang.exp')),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.list.list'('type.conLang.prompt'),'type.pair.prod'('type.num.num','type.conLang.exp'))),'const.con_to_dec.compile_prog_2'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),V_27none__tag_27),s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),V_27some__tag_27))),s('type.list.list'('type.conLang.prompt'),V_27ps_27))))))))),s('type.pair.prod'('type.num.num','type.conLang.exp'),'const.con_to_dec.compile_prompt_4'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),V_27none__tag_27),s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),V_27some__tag_27),s('type.num.num',V_27next_27),s('type.conLang.prompt',V_27p_27)))))).
fof('thm.con_to_dec.compile_def', axiom, s('fun'('type.num.num','fun'('type.list.list'('type.conLang.prompt'),'type.pair.prod'('type.num.num','type.conLang.exp'))),'const.con_to_dec.compile_0') = s('fun'('type.num.num','fun'('type.list.list'('type.conLang.prompt'),'type.pair.prod'('type.num.num','type.conLang.exp'))),'const.con_to_dec.compile_prog_2'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num','const.conLang.none_tag_0'),s('type.semanticPrimitives.tid_or_exn','const.semanticPrimitives.TypeId_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))),s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num','const.conLang.some_tag_0'),s('type.semanticPrimitives.tid_or_exn','const.semanticPrimitives.TypeId_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))))))).
