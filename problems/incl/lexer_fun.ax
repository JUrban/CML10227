fof('thm.lexer_fun.symbol_TY_DEF', axiom, ?[V_27rep_27]: p(s('bool','const.bool.TYPE_DEFINITION_2'(s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'bool'),'_dst_x0x1_2'(s('fun'('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'bool'),'bool'),'bool'),'!_0'),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'bool'),'bool')),'_dst_x00x01x11_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'bool'),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'bool'),'bool'),'!_0'),s('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'bool'),'fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'bool')),'_dst_x00x01x11_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|bslash||slash|_0'),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.string.char'),'bool'),'bool'),'?_0'),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'fun'('type.list.list'('type.string.char'),'bool')),'_dst_x00x10x01_3'(s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'bool')),'=_0'),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'_i_0_0'),s('fun'('type.list.list'('type.string.char'),'type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'_dst_x0x1x0_3'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')),'fun'('fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.pair.prod'('type.string.char','type.integer.int'),'type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'const.pair.,_0'),s('type.pair.prod'('type.string.char','type.integer.int'),'happ'(s('fun'('type.integer.int','type.pair.prod'('type.string.char','type.integer.int')),'happ'(s('fun'('type.string.char','fun'('type.integer.int','type.pair.prod'('type.string.char','type.integer.int'))),'const.pair.,_0'),s('type.string.char','const.bool.ARB_0'))),s('type.integer.int','const.bool.ARB_0'))))),s('fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'_dst_x0_1'(s('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'const.ind_type.BOTTOM_0'))))))))),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|bslash||slash|_0'),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.string.char','bool'),'bool'),'?_0'),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'fun'('type.string.char','bool')),'_dst_x00x10x01_3'(s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'bool')),'=_0'),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'_i_0_0'),s('fun'('type.string.char','type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'_dst_x0x1x0_3'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')),'fun'('fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('fun'('type.string.char','type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'_dst_x0x1_2'(s('fun'('type.pair.prod'('type.string.char','type.integer.int'),'type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.pair.prod'('type.string.char','type.integer.int'),'type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'const.pair.,_0'),s('type.list.list'('type.string.char'),'const.bool.ARB_0'))),s('fun'('type.string.char','type.pair.prod'('type.string.char','type.integer.int')),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.integer.int','type.pair.prod'('type.string.char','type.integer.int'))),'const.pair.,_0'),s('type.integer.int','const.bool.ARB_0'))))),s('fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'_dst_x0_1'(s('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'const.ind_type.BOTTOM_0'))))))))),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|bslash||slash|_0'),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.integer.int','bool'),'bool'),'?_0'),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'fun'('type.integer.int','bool')),'_dst_x00x10x01_3'(s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'bool')),'=_0'),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'_i_0_0'),s('fun'('type.integer.int','type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'_dst_x0x1x0_3'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')),'fun'('fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('fun'('type.integer.int','type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'_dst_x0x1_2'(s('fun'('type.pair.prod'('type.string.char','type.integer.int'),'type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.pair.prod'('type.string.char','type.integer.int'),'type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'const.pair.,_0'),s('type.list.list'('type.string.char'),'const.bool.ARB_0'))),s('fun'('type.integer.int','type.pair.prod'('type.string.char','type.integer.int')),'happ'(s('fun'('type.string.char','fun'('type.integer.int','type.pair.prod'('type.string.char','type.integer.int'))),'const.pair.,_0'),s('type.string.char','const.bool.ARB_0'))))),s('fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'_dst_x0_1'(s('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'const.ind_type.BOTTOM_0'))))))))),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|bslash||slash|_0'),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.string.char'),'bool'),'bool'),'?_0'),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'fun'('type.list.list'('type.string.char'),'bool')),'_dst_x00x10x01_3'(s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'bool')),'=_0'),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'_i_0_0'),s('fun'('type.list.list'('type.string.char'),'type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'_dst_x0x1x0_3'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')),'fun'('fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))),s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.pair.prod'('type.string.char','type.integer.int'),'type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'const.pair.,_0'),s('type.pair.prod'('type.string.char','type.integer.int'),'happ'(s('fun'('type.integer.int','type.pair.prod'('type.string.char','type.integer.int')),'happ'(s('fun'('type.string.char','fun'('type.integer.int','type.pair.prod'('type.string.char','type.integer.int'))),'const.pair.,_0'),s('type.string.char','const.bool.ARB_0'))),s('type.integer.int','const.bool.ARB_0'))))),s('fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'_dst_x0_1'(s('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'const.ind_type.BOTTOM_0'))))))))),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|bslash||slash|_0'),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.string.char'),'bool'),'bool'),'?_0'),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'fun'('type.list.list'('type.string.char'),'bool')),'_dst_x00x10x01_3'(s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'bool')),'=_0'),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'_i_0_0'),s('fun'('type.list.list'('type.string.char'),'type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'_dst_x0x1x0_3'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')),'fun'('fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))))),s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.pair.prod'('type.string.char','type.integer.int'),'type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'const.pair.,_0'),s('type.pair.prod'('type.string.char','type.integer.int'),'happ'(s('fun'('type.integer.int','type.pair.prod'('type.string.char','type.integer.int')),'happ'(s('fun'('type.string.char','fun'('type.integer.int','type.pair.prod'('type.string.char','type.integer.int'))),'const.pair.,_0'),s('type.string.char','const.bool.ARB_0'))),s('type.integer.int','const.bool.ARB_0'))))),s('fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'_dst_x0_1'(s('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'const.ind_type.BOTTOM_0'))))))))),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'bool'),'_dst_x1x0_2'(s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'bool')),'=_0'),s('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'happ'(s('fun'('fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'happ'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')),'fun'('fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))))))),s('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')),'happ'(s('fun'('type.pair.prod'('type.string.char','type.integer.int'),'type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.pair.prod'('type.string.char','type.integer.int'),'type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'const.pair.,_0'),s('type.list.list'('type.string.char'),'const.bool.ARB_0'))),s('type.pair.prod'('type.string.char','type.integer.int'),'happ'(s('fun'('type.integer.int','type.pair.prod'('type.string.char','type.integer.int')),'happ'(s('fun'('type.string.char','fun'('type.integer.int','type.pair.prod'('type.string.char','type.integer.int'))),'const.pair.,_0'),s('type.string.char','const.bool.ARB_0'))),s('type.integer.int','const.bool.ARB_0'))))))),s('fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'_dst_x0_1'(s('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'const.ind_type.BOTTOM_0'))))))))))))))))),s('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'bool'),'fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'bool')),'_i_0_0'))))),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'bool'),'bool')),'_dstsel_1_x10_1'(s('fun'('type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int'))),'type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),'_i_0_0'))))))),s('fun'('type.lexer_fun.symbol','type.ind_type.recspace'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.string.char','type.integer.int')))),V_27rep_27))))).
fof('thm.lexer_fun.symbol_case_def|split|0', axiom, ![V_27A_27]: ![V_27a_27, V_27f_27, V_27f_7c49_7c_27, V_27f2_27, V_27f3_27, V_27f4_27, V_27v_27]: s(V_27A_27,'const.lexer_fun.symbol_CASE_7'(s('type.lexer_fun.symbol','const.lexer_fun.StringS_1'(s('type.list.list'('type.string.char'),V_27a_27))),s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f_27),s('fun'('type.string.char',V_27A_27),V_27f_7c49_7c_27),s('fun'('type.integer.int',V_27A_27),V_27f2_27),s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f3_27),s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f4_27),s(V_27A_27,V_27v_27))) = s(V_27A_27,'happ'(s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f_27),s('type.list.list'('type.string.char'),V_27a_27)))).
fof('thm.lexer_fun.symbol_case_def|split|1', axiom, ![V_27A_27]: ![V_27a_27, V_27f_27, V_27f_7c49_7c_27, V_27f2_27, V_27f3_27, V_27f4_27, V_27v_27]: s(V_27A_27,'const.lexer_fun.symbol_CASE_7'(s('type.lexer_fun.symbol','const.lexer_fun.CharS_1'(s('type.string.char',V_27a_27))),s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f_27),s('fun'('type.string.char',V_27A_27),V_27f_7c49_7c_27),s('fun'('type.integer.int',V_27A_27),V_27f2_27),s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f3_27),s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f4_27),s(V_27A_27,V_27v_27))) = s(V_27A_27,'happ'(s('fun'('type.string.char',V_27A_27),V_27f_7c49_7c_27),s('type.string.char',V_27a_27)))).
fof('thm.lexer_fun.symbol_case_def|split|2', axiom, ![V_27A_27]: ![V_27a_27, V_27f_27, V_27f_7c49_7c_27, V_27f2_27, V_27f3_27, V_27f4_27, V_27v_27]: s(V_27A_27,'const.lexer_fun.symbol_CASE_7'(s('type.lexer_fun.symbol','const.lexer_fun.NumberS_1'(s('type.integer.int',V_27a_27))),s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f_27),s('fun'('type.string.char',V_27A_27),V_27f_7c49_7c_27),s('fun'('type.integer.int',V_27A_27),V_27f2_27),s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f3_27),s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f4_27),s(V_27A_27,V_27v_27))) = s(V_27A_27,'happ'(s('fun'('type.integer.int',V_27A_27),V_27f2_27),s('type.integer.int',V_27a_27)))).
fof('thm.lexer_fun.symbol_case_def|split|3', axiom, ![V_27A_27]: ![V_27a_27, V_27f_27, V_27f_7c49_7c_27, V_27f2_27, V_27f3_27, V_27f4_27, V_27v_27]: s(V_27A_27,'const.lexer_fun.symbol_CASE_7'(s('type.lexer_fun.symbol','const.lexer_fun.LongS_1'(s('type.list.list'('type.string.char'),V_27a_27))),s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f_27),s('fun'('type.string.char',V_27A_27),V_27f_7c49_7c_27),s('fun'('type.integer.int',V_27A_27),V_27f2_27),s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f3_27),s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f4_27),s(V_27A_27,V_27v_27))) = s(V_27A_27,'happ'(s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f3_27),s('type.list.list'('type.string.char'),V_27a_27)))).
fof('thm.lexer_fun.symbol_case_def|split|4', axiom, ![V_27A_27]: ![V_27a_27, V_27f_27, V_27f_7c49_7c_27, V_27f2_27, V_27f3_27, V_27f4_27, V_27v_27]: s(V_27A_27,'const.lexer_fun.symbol_CASE_7'(s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),V_27a_27))),s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f_27),s('fun'('type.string.char',V_27A_27),V_27f_7c49_7c_27),s('fun'('type.integer.int',V_27A_27),V_27f2_27),s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f3_27),s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f4_27),s(V_27A_27,V_27v_27))) = s(V_27A_27,'happ'(s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f4_27),s('type.list.list'('type.string.char'),V_27a_27)))).
fof('thm.lexer_fun.symbol_case_def|split|5', axiom, ![V_27A_27]: ![V_27f_27, V_27f_7c49_7c_27, V_27f2_27, V_27f3_27, V_27f4_27, V_27v_27]: s(V_27A_27,'const.lexer_fun.symbol_CASE_7'(s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'),s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f_27),s('fun'('type.string.char',V_27A_27),V_27f_7c49_7c_27),s('fun'('type.integer.int',V_27A_27),V_27f2_27),s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f3_27),s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f4_27),s(V_27A_27,V_27v_27))) = s(V_27A_27,V_27v_27)).
fof('thm.lexer_fun.symbol_size_def|split|0', axiom, ![V_27a_27]: s('type.num.num','const.lexer_fun.symbol_size_1'(s('type.lexer_fun.symbol','const.lexer_fun.StringS_1'(s('type.list.list'('type.string.char'),V_27a_27))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.list_size_2'(s('fun'('type.string.char','type.num.num'),'const.string.char_size_0'),s('type.list.list'('type.string.char'),V_27a_27)))))).
fof('thm.lexer_fun.symbol_size_def|split|1', axiom, ![V_27a_27]: s('type.num.num','const.lexer_fun.symbol_size_1'(s('type.lexer_fun.symbol','const.lexer_fun.CharS_1'(s('type.string.char',V_27a_27))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.string.char_size_1'(s('type.string.char',V_27a_27)))))).
fof('thm.lexer_fun.symbol_size_def|split|2', axiom, ![V_27a_27]: s('type.num.num','const.lexer_fun.symbol_size_1'(s('type.lexer_fun.symbol','const.lexer_fun.NumberS_1'(s('type.integer.int',V_27a_27))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))).
fof('thm.lexer_fun.symbol_size_def|split|3', axiom, ![V_27a_27]: s('type.num.num','const.lexer_fun.symbol_size_1'(s('type.lexer_fun.symbol','const.lexer_fun.LongS_1'(s('type.list.list'('type.string.char'),V_27a_27))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.list_size_2'(s('fun'('type.string.char','type.num.num'),'const.string.char_size_0'),s('type.list.list'('type.string.char'),V_27a_27)))))).
fof('thm.lexer_fun.symbol_size_def|split|4', axiom, ![V_27a_27]: s('type.num.num','const.lexer_fun.symbol_size_1'(s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),V_27a_27))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.list_size_2'(s('fun'('type.string.char','type.num.num'),'const.string.char_size_0'),s('type.list.list'('type.string.char'),V_27a_27)))))).
fof('thm.lexer_fun.symbol_size_def|split|5', axiom, s('type.num.num','const.lexer_fun.symbol_size_1'(s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'))) = s('type.num.num','const.num.|48|_0')).
fof('ARITY_0_1_const.lexer_fun.LongS', axiom, ![VV0]: s('type.lexer_fun.symbol','happ'(s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'const.lexer_fun.LongS_0'),s('type.list.list'('type.string.char'),VV0))) = s('type.lexer_fun.symbol','const.lexer_fun.LongS_1'(s('type.list.list'('type.string.char'),VV0)))).
fof('ARITY_0_1_const.lexer_fun.OtherS', axiom, ![VV0]: s('type.lexer_fun.symbol','happ'(s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'const.lexer_fun.OtherS_0'),s('type.list.list'('type.string.char'),VV0))) = s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),VV0)))).
fof('ARITY_0_1_const.lexer_fun.CharS', axiom, ![VV0]: s('type.lexer_fun.symbol','happ'(s('fun'('type.string.char','type.lexer_fun.symbol'),'const.lexer_fun.CharS_0'),s('type.string.char',VV0))) = s('type.lexer_fun.symbol','const.lexer_fun.CharS_1'(s('type.string.char',VV0)))).
fof('ARITY_0_1_const.lexer_fun.NumberS', axiom, ![VV0]: s('type.lexer_fun.symbol','happ'(s('fun'('type.integer.int','type.lexer_fun.symbol'),'const.lexer_fun.NumberS_0'),s('type.integer.int',VV0))) = s('type.lexer_fun.symbol','const.lexer_fun.NumberS_1'(s('type.integer.int',VV0)))).
fof('ARITY_0_1_const.lexer_fun.StringS', axiom, ![VV0]: s('type.lexer_fun.symbol','happ'(s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'const.lexer_fun.StringS_0'),s('type.list.list'('type.string.char'),VV0))) = s('type.lexer_fun.symbol','const.lexer_fun.StringS_1'(s('type.list.list'('type.string.char'),VV0)))).
fof('thm.lexer_fun.datatype_symbol', axiom, ![V_27symbol_27]: p(s('bool','const.bool.DATATYPE_1'(s('bool','happ'(s('fun'('type.lexer_fun.symbol','bool'),'happ'(s('fun'('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'fun'('type.lexer_fun.symbol','bool')),'happ'(s('fun'('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'fun'('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'fun'('type.lexer_fun.symbol','bool'))),'happ'(s('fun'('fun'('type.integer.int','type.lexer_fun.symbol'),'fun'('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'fun'('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'fun'('type.lexer_fun.symbol','bool')))),'happ'(s('fun'('fun'('type.string.char','type.lexer_fun.symbol'),'fun'('fun'('type.integer.int','type.lexer_fun.symbol'),'fun'('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'fun'('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'fun'('type.lexer_fun.symbol','bool'))))),'happ'(s('fun'('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'fun'('fun'('type.string.char','type.lexer_fun.symbol'),'fun'('fun'('type.integer.int','type.lexer_fun.symbol'),'fun'('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'fun'('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'fun'('type.lexer_fun.symbol','bool')))))),V_27symbol_27),s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'const.lexer_fun.StringS_0'))),s('fun'('type.string.char','type.lexer_fun.symbol'),'const.lexer_fun.CharS_0'))),s('fun'('type.integer.int','type.lexer_fun.symbol'),'const.lexer_fun.NumberS_0'))),s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'const.lexer_fun.LongS_0'))),s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'const.lexer_fun.OtherS_0'))),s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'))))))).
fof('thm.lexer_fun.symbol_|49||49||split|0', axiom, ![V_27a_27, V_27a_7c39_7c_27]: (s('type.lexer_fun.symbol','const.lexer_fun.StringS_1'(s('type.list.list'('type.string.char'),V_27a_27))) = s('type.lexer_fun.symbol','const.lexer_fun.StringS_1'(s('type.list.list'('type.string.char'),V_27a_7c39_7c_27))) <=> s('type.list.list'('type.string.char'),V_27a_27) = s('type.list.list'('type.string.char'),V_27a_7c39_7c_27))).
fof('thm.lexer_fun.symbol_|49||49||split|1', axiom, ![V_27a_27, V_27a_7c39_7c_27]: (s('type.lexer_fun.symbol','const.lexer_fun.CharS_1'(s('type.string.char',V_27a_27))) = s('type.lexer_fun.symbol','const.lexer_fun.CharS_1'(s('type.string.char',V_27a_7c39_7c_27))) <=> s('type.string.char',V_27a_27) = s('type.string.char',V_27a_7c39_7c_27))).
fof('thm.lexer_fun.symbol_|49||49||split|2', axiom, ![V_27a_27, V_27a_7c39_7c_27]: (s('type.lexer_fun.symbol','const.lexer_fun.NumberS_1'(s('type.integer.int',V_27a_27))) = s('type.lexer_fun.symbol','const.lexer_fun.NumberS_1'(s('type.integer.int',V_27a_7c39_7c_27))) <=> s('type.integer.int',V_27a_27) = s('type.integer.int',V_27a_7c39_7c_27))).
fof('thm.lexer_fun.symbol_|49||49||split|3', axiom, ![V_27a_27, V_27a_7c39_7c_27]: (s('type.lexer_fun.symbol','const.lexer_fun.LongS_1'(s('type.list.list'('type.string.char'),V_27a_27))) = s('type.lexer_fun.symbol','const.lexer_fun.LongS_1'(s('type.list.list'('type.string.char'),V_27a_7c39_7c_27))) <=> s('type.list.list'('type.string.char'),V_27a_27) = s('type.list.list'('type.string.char'),V_27a_7c39_7c_27))).
fof('thm.lexer_fun.symbol_|49||49||split|4', axiom, ![V_27a_27, V_27a_7c39_7c_27]: (s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),V_27a_27))) = s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),V_27a_7c39_7c_27))) <=> s('type.list.list'('type.string.char'),V_27a_27) = s('type.list.list'('type.string.char'),V_27a_7c39_7c_27))).
fof('thm.lexer_fun.symbol_distinct|split|0', axiom, ![V_27a_7c39_7c_27, V_27a_27]: ~ (s('type.lexer_fun.symbol','const.lexer_fun.StringS_1'(s('type.list.list'('type.string.char'),V_27a_27))) = s('type.lexer_fun.symbol','const.lexer_fun.CharS_1'(s('type.string.char',V_27a_7c39_7c_27))))).
fof('thm.lexer_fun.symbol_distinct|split|1', axiom, ![V_27a_7c39_7c_27, V_27a_27]: ~ (s('type.lexer_fun.symbol','const.lexer_fun.StringS_1'(s('type.list.list'('type.string.char'),V_27a_27))) = s('type.lexer_fun.symbol','const.lexer_fun.NumberS_1'(s('type.integer.int',V_27a_7c39_7c_27))))).
fof('thm.lexer_fun.symbol_distinct|split|2', axiom, ![V_27a_7c39_7c_27, V_27a_27]: ~ (s('type.lexer_fun.symbol','const.lexer_fun.StringS_1'(s('type.list.list'('type.string.char'),V_27a_27))) = s('type.lexer_fun.symbol','const.lexer_fun.LongS_1'(s('type.list.list'('type.string.char'),V_27a_7c39_7c_27))))).
fof('thm.lexer_fun.symbol_distinct|split|3', axiom, ![V_27a_7c39_7c_27, V_27a_27]: ~ (s('type.lexer_fun.symbol','const.lexer_fun.StringS_1'(s('type.list.list'('type.string.char'),V_27a_27))) = s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),V_27a_7c39_7c_27))))).
fof('thm.lexer_fun.symbol_distinct|split|4', axiom, ![V_27a_27]: ~ (s('type.lexer_fun.symbol','const.lexer_fun.StringS_1'(s('type.list.list'('type.string.char'),V_27a_27))) = s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'))).
fof('thm.lexer_fun.symbol_distinct|split|5', axiom, ![V_27a_7c39_7c_27, V_27a_27]: ~ (s('type.lexer_fun.symbol','const.lexer_fun.CharS_1'(s('type.string.char',V_27a_27))) = s('type.lexer_fun.symbol','const.lexer_fun.NumberS_1'(s('type.integer.int',V_27a_7c39_7c_27))))).
fof('thm.lexer_fun.symbol_distinct|split|6', axiom, ![V_27a_7c39_7c_27, V_27a_27]: ~ (s('type.lexer_fun.symbol','const.lexer_fun.CharS_1'(s('type.string.char',V_27a_27))) = s('type.lexer_fun.symbol','const.lexer_fun.LongS_1'(s('type.list.list'('type.string.char'),V_27a_7c39_7c_27))))).
fof('thm.lexer_fun.symbol_distinct|split|7', axiom, ![V_27a_7c39_7c_27, V_27a_27]: ~ (s('type.lexer_fun.symbol','const.lexer_fun.CharS_1'(s('type.string.char',V_27a_27))) = s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),V_27a_7c39_7c_27))))).
fof('thm.lexer_fun.symbol_distinct|split|8', axiom, ![V_27a_27]: ~ (s('type.lexer_fun.symbol','const.lexer_fun.CharS_1'(s('type.string.char',V_27a_27))) = s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'))).
fof('thm.lexer_fun.symbol_distinct|split|9', axiom, ![V_27a_7c39_7c_27, V_27a_27]: ~ (s('type.lexer_fun.symbol','const.lexer_fun.NumberS_1'(s('type.integer.int',V_27a_27))) = s('type.lexer_fun.symbol','const.lexer_fun.LongS_1'(s('type.list.list'('type.string.char'),V_27a_7c39_7c_27))))).
fof('thm.lexer_fun.symbol_distinct|split|10', axiom, ![V_27a_7c39_7c_27, V_27a_27]: ~ (s('type.lexer_fun.symbol','const.lexer_fun.NumberS_1'(s('type.integer.int',V_27a_27))) = s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),V_27a_7c39_7c_27))))).
fof('thm.lexer_fun.symbol_distinct|split|11', axiom, ![V_27a_27]: ~ (s('type.lexer_fun.symbol','const.lexer_fun.NumberS_1'(s('type.integer.int',V_27a_27))) = s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'))).
fof('thm.lexer_fun.symbol_distinct|split|12', axiom, ![V_27a_7c39_7c_27, V_27a_27]: ~ (s('type.lexer_fun.symbol','const.lexer_fun.LongS_1'(s('type.list.list'('type.string.char'),V_27a_27))) = s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),V_27a_7c39_7c_27))))).
fof('thm.lexer_fun.symbol_distinct|split|13', axiom, ![V_27a_27]: ~ (s('type.lexer_fun.symbol','const.lexer_fun.LongS_1'(s('type.list.list'('type.string.char'),V_27a_27))) = s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'))).
fof('thm.lexer_fun.symbol_distinct|split|14', axiom, ![V_27a_27]: ~ (s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),V_27a_27))) = s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'))).
fof('thm.lexer_fun.symbol_case_cong', axiom, ![V_27A_27]: ![V_27v_7c39_7c_27, V_27f4_7c39_7c_27, V_27f3_7c39_7c_27, V_27f2_7c39_7c_27, V_27f_7c49_7c_7c39_7c_27, V_27f_7c39_7c_27, V_27M_27, V_27M_7c39_7c_27, V_27f_27, V_27f_7c49_7c_27, V_27f2_27, V_27f3_27, V_27f4_27, V_27v_27]: ((s('type.lexer_fun.symbol',V_27M_27) = s('type.lexer_fun.symbol',V_27M_7c39_7c_27) & (![V_27a_27]: (s('type.lexer_fun.symbol',V_27M_7c39_7c_27) = s('type.lexer_fun.symbol','const.lexer_fun.StringS_1'(s('type.list.list'('type.string.char'),V_27a_27))) => s(V_27A_27,'happ'(s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f_27),s('type.list.list'('type.string.char'),V_27a_27))) = s(V_27A_27,'happ'(s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f_7c39_7c_27),s('type.list.list'('type.string.char'),V_27a_27)))) & (![V_27a_27]: (s('type.lexer_fun.symbol',V_27M_7c39_7c_27) = s('type.lexer_fun.symbol','const.lexer_fun.CharS_1'(s('type.string.char',V_27a_27))) => s(V_27A_27,'happ'(s('fun'('type.string.char',V_27A_27),V_27f_7c49_7c_27),s('type.string.char',V_27a_27))) = s(V_27A_27,'happ'(s('fun'('type.string.char',V_27A_27),V_27f_7c49_7c_7c39_7c_27),s('type.string.char',V_27a_27)))) & (![V_27a_27]: (s('type.lexer_fun.symbol',V_27M_7c39_7c_27) = s('type.lexer_fun.symbol','const.lexer_fun.NumberS_1'(s('type.integer.int',V_27a_27))) => s(V_27A_27,'happ'(s('fun'('type.integer.int',V_27A_27),V_27f2_27),s('type.integer.int',V_27a_27))) = s(V_27A_27,'happ'(s('fun'('type.integer.int',V_27A_27),V_27f2_7c39_7c_27),s('type.integer.int',V_27a_27)))) & (![V_27a_27]: (s('type.lexer_fun.symbol',V_27M_7c39_7c_27) = s('type.lexer_fun.symbol','const.lexer_fun.LongS_1'(s('type.list.list'('type.string.char'),V_27a_27))) => s(V_27A_27,'happ'(s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f3_27),s('type.list.list'('type.string.char'),V_27a_27))) = s(V_27A_27,'happ'(s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f3_7c39_7c_27),s('type.list.list'('type.string.char'),V_27a_27)))) & (![V_27a_27]: (s('type.lexer_fun.symbol',V_27M_7c39_7c_27) = s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),V_27a_27))) => s(V_27A_27,'happ'(s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f4_27),s('type.list.list'('type.string.char'),V_27a_27))) = s(V_27A_27,'happ'(s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f4_7c39_7c_27),s('type.list.list'('type.string.char'),V_27a_27)))) & (s('type.lexer_fun.symbol',V_27M_7c39_7c_27) = s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0') => s(V_27A_27,V_27v_27) = s(V_27A_27,V_27v_7c39_7c_27)))))))) => s(V_27A_27,'const.lexer_fun.symbol_CASE_7'(s('type.lexer_fun.symbol',V_27M_27),s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f_27),s('fun'('type.string.char',V_27A_27),V_27f_7c49_7c_27),s('fun'('type.integer.int',V_27A_27),V_27f2_27),s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f3_27),s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f4_27),s(V_27A_27,V_27v_27))) = s(V_27A_27,'const.lexer_fun.symbol_CASE_7'(s('type.lexer_fun.symbol',V_27M_7c39_7c_27),s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f_7c39_7c_27),s('fun'('type.string.char',V_27A_27),V_27f_7c49_7c_7c39_7c_27),s('fun'('type.integer.int',V_27A_27),V_27f2_7c39_7c_27),s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f3_7c39_7c_27),s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f4_7c39_7c_27),s(V_27A_27,V_27v_7c39_7c_27))))).
fof('thm.lexer_fun.symbol_nchotomy', axiom, ![V_27ss_27]: (?[V_27s_27]: s('type.lexer_fun.symbol',V_27ss_27) = s('type.lexer_fun.symbol','const.lexer_fun.StringS_1'(s('type.list.list'('type.string.char'),V_27s_27))) | (?[V_27c_27]: s('type.lexer_fun.symbol',V_27ss_27) = s('type.lexer_fun.symbol','const.lexer_fun.CharS_1'(s('type.string.char',V_27c_27))) | (?[V_27i_27]: s('type.lexer_fun.symbol',V_27ss_27) = s('type.lexer_fun.symbol','const.lexer_fun.NumberS_1'(s('type.integer.int',V_27i_27))) | (?[V_27s_27]: s('type.lexer_fun.symbol',V_27ss_27) = s('type.lexer_fun.symbol','const.lexer_fun.LongS_1'(s('type.list.list'('type.string.char'),V_27s_27))) | (?[V_27s_27]: s('type.lexer_fun.symbol',V_27ss_27) = s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),V_27s_27))) | s('type.lexer_fun.symbol',V_27ss_27) = s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'))))))).
fof('thm.lexer_fun.symbol_Axiom', axiom, ![V_27A_27]: ![V_27f_7c48_7c_27, V_27f_7c49_7c_27, V_27f2_27, V_27f3_27, V_27f4_27, V_27f5_27]: ?[V_27fn_27]: (![V_27a_27]: s(V_27A_27,'happ'(s('fun'('type.lexer_fun.symbol',V_27A_27),V_27fn_27),s('type.lexer_fun.symbol','const.lexer_fun.StringS_1'(s('type.list.list'('type.string.char'),V_27a_27))))) = s(V_27A_27,'happ'(s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f_7c48_7c_27),s('type.list.list'('type.string.char'),V_27a_27))) & (![V_27a_27]: s(V_27A_27,'happ'(s('fun'('type.lexer_fun.symbol',V_27A_27),V_27fn_27),s('type.lexer_fun.symbol','const.lexer_fun.CharS_1'(s('type.string.char',V_27a_27))))) = s(V_27A_27,'happ'(s('fun'('type.string.char',V_27A_27),V_27f_7c49_7c_27),s('type.string.char',V_27a_27))) & (![V_27a_27]: s(V_27A_27,'happ'(s('fun'('type.lexer_fun.symbol',V_27A_27),V_27fn_27),s('type.lexer_fun.symbol','const.lexer_fun.NumberS_1'(s('type.integer.int',V_27a_27))))) = s(V_27A_27,'happ'(s('fun'('type.integer.int',V_27A_27),V_27f2_27),s('type.integer.int',V_27a_27))) & (![V_27a_27]: s(V_27A_27,'happ'(s('fun'('type.lexer_fun.symbol',V_27A_27),V_27fn_27),s('type.lexer_fun.symbol','const.lexer_fun.LongS_1'(s('type.list.list'('type.string.char'),V_27a_27))))) = s(V_27A_27,'happ'(s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f3_27),s('type.list.list'('type.string.char'),V_27a_27))) & (![V_27a_27]: s(V_27A_27,'happ'(s('fun'('type.lexer_fun.symbol',V_27A_27),V_27fn_27),s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),V_27a_27))))) = s(V_27A_27,'happ'(s('fun'('type.list.list'('type.string.char'),V_27A_27),V_27f4_27),s('type.list.list'('type.string.char'),V_27a_27))) & s(V_27A_27,'happ'(s('fun'('type.lexer_fun.symbol',V_27A_27),V_27fn_27),s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'))) = s(V_27A_27,V_27f5_27))))))).
fof('thm.lexer_fun.symbol_induction', axiom, ![V_27P_27]: ((![V_27s_27]: p(s('bool','happ'(s('fun'('type.lexer_fun.symbol','bool'),V_27P_27),s('type.lexer_fun.symbol','const.lexer_fun.StringS_1'(s('type.list.list'('type.string.char'),V_27s_27)))))) & (![V_27c_27]: p(s('bool','happ'(s('fun'('type.lexer_fun.symbol','bool'),V_27P_27),s('type.lexer_fun.symbol','const.lexer_fun.CharS_1'(s('type.string.char',V_27c_27)))))) & (![V_27i_27]: p(s('bool','happ'(s('fun'('type.lexer_fun.symbol','bool'),V_27P_27),s('type.lexer_fun.symbol','const.lexer_fun.NumberS_1'(s('type.integer.int',V_27i_27)))))) & (![V_27s_27]: p(s('bool','happ'(s('fun'('type.lexer_fun.symbol','bool'),V_27P_27),s('type.lexer_fun.symbol','const.lexer_fun.LongS_1'(s('type.list.list'('type.string.char'),V_27s_27)))))) & (![V_27s_27]: p(s('bool','happ'(s('fun'('type.lexer_fun.symbol','bool'),V_27P_27),s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),V_27s_27)))))) & p(s('bool','happ'(s('fun'('type.lexer_fun.symbol','bool'),V_27P_27),s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'))))))))) => ![V_27s_27]: p(s('bool','happ'(s('fun'('type.lexer_fun.symbol','bool'),V_27P_27),s('type.lexer_fun.symbol',V_27s_27)))))).
fof('ARITY_0_7_const.lexer_fun.symbol_CASE', axiom, ![V_27A_27]: ![VV0, VV1, VV2, VV3, VV4, VV5, VV6]: s(V_27A_27,'happ'(s('fun'(V_27A_27,V_27A_27),'happ'(s('fun'('fun'('type.list.list'('type.string.char'),V_27A_27),'fun'(V_27A_27,V_27A_27)),'happ'(s('fun'('fun'('type.list.list'('type.string.char'),V_27A_27),'fun'('fun'('type.list.list'('type.string.char'),V_27A_27),'fun'(V_27A_27,V_27A_27))),'happ'(s('fun'('fun'('type.integer.int',V_27A_27),'fun'('fun'('type.list.list'('type.string.char'),V_27A_27),'fun'('fun'('type.list.list'('type.string.char'),V_27A_27),'fun'(V_27A_27,V_27A_27)))),'happ'(s('fun'('fun'('type.string.char',V_27A_27),'fun'('fun'('type.integer.int',V_27A_27),'fun'('fun'('type.list.list'('type.string.char'),V_27A_27),'fun'('fun'('type.list.list'('type.string.char'),V_27A_27),'fun'(V_27A_27,V_27A_27))))),'happ'(s('fun'('fun'('type.list.list'('type.string.char'),V_27A_27),'fun'('fun'('type.string.char',V_27A_27),'fun'('fun'('type.integer.int',V_27A_27),'fun'('fun'('type.list.list'('type.string.char'),V_27A_27),'fun'('fun'('type.list.list'('type.string.char'),V_27A_27),'fun'(V_27A_27,V_27A_27)))))),'happ'(s('fun'('type.lexer_fun.symbol','fun'('fun'('type.list.list'('type.string.char'),V_27A_27),'fun'('fun'('type.string.char',V_27A_27),'fun'('fun'('type.integer.int',V_27A_27),'fun'('fun'('type.list.list'('type.string.char'),V_27A_27),'fun'('fun'('type.list.list'('type.string.char'),V_27A_27),'fun'(V_27A_27,V_27A_27))))))),'const.lexer_fun.symbol_CASE_0'),s('type.lexer_fun.symbol',VV0))),s('fun'('type.list.list'('type.string.char'),V_27A_27),VV1))),s('fun'('type.string.char',V_27A_27),VV2))),s('fun'('type.integer.int',V_27A_27),VV3))),s('fun'('type.list.list'('type.string.char'),V_27A_27),VV4))),s('fun'('type.list.list'('type.string.char'),V_27A_27),VV5))),s(V_27A_27,VV6))) = s(V_27A_27,'const.lexer_fun.symbol_CASE_7'(s('type.lexer_fun.symbol',VV0),s('fun'('type.list.list'('type.string.char'),V_27A_27),VV1),s('fun'('type.string.char',V_27A_27),VV2),s('fun'('type.integer.int',V_27A_27),VV3),s('fun'('type.list.list'('type.string.char'),V_27A_27),VV4),s('fun'('type.list.list'('type.string.char'),V_27A_27),VV5),s(V_27A_27,VV6)))).
fof('ARITY_0_1_const.lexer_fun.mkCharS', axiom, ![VV0]: s('type.lexer_fun.symbol','happ'(s('fun'('type.lexer_fun.symbol','type.lexer_fun.symbol'),'const.lexer_fun.mkCharS_0'),s('type.lexer_fun.symbol',VV0))) = s('type.lexer_fun.symbol','const.lexer_fun.mkCharS_1'(s('type.lexer_fun.symbol',VV0)))).
fof('thm.lexer_fun.mkCharS_primitive_def', axiom, s('fun'('type.lexer_fun.symbol','type.lexer_fun.symbol'),'const.lexer_fun.mkCharS_0') = s('fun'('type.lexer_fun.symbol','type.lexer_fun.symbol'),'const.relation.WFREC_2'(s('fun'('type.lexer_fun.symbol','fun'('type.lexer_fun.symbol','bool')),'const.min.@_1'(s('fun'('fun'('type.lexer_fun.symbol','fun'('type.lexer_fun.symbol','bool')),'bool'),'const.relation.WF_0'))),s('fun'('fun'('type.lexer_fun.symbol','type.lexer_fun.symbol'),'fun'('type.lexer_fun.symbol','type.lexer_fun.symbol')),'_dst_x0_1'(s('fun'('type.lexer_fun.symbol','type.lexer_fun.symbol'),'_dst_x1x0x0x0x0x0x0_7'(s('fun'('type.lexer_fun.symbol','fun'('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'fun'('fun'('type.string.char','type.lexer_fun.symbol'),'fun'('fun'('type.integer.int','type.lexer_fun.symbol'),'fun'('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'fun'('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'fun'('type.lexer_fun.symbol','type.lexer_fun.symbol'))))))),'const.lexer_fun.symbol_CASE_0'),s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'_dst_x0x1_2'(s('fun'('type.lexer_fun.symbol','type.lexer_fun.symbol'),'const.combin.I_0'),s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'_dst_x0x1x1x0_4'(s('fun'('bool','fun'('type.lexer_fun.symbol','fun'('type.lexer_fun.symbol','type.lexer_fun.symbol'))),'const.bool.COND_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1x0_3'(s('fun'('type.num.num','fun'('type.num.num','bool')),'=_0'),s('fun'('type.list.list'('type.string.char'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'_dst_x0x1_2'(s('fun'('type.string.char','type.lexer_fun.symbol'),'const.lexer_fun.CharS_0'),s('fun'('type.list.list'('type.string.char'),'type.string.char'),'const.list.HD_0'))),s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'))))),s('fun'('type.string.char','type.lexer_fun.symbol'),'_dst_x0_1'(s('type.lexer_fun.symbol','happ'(s('fun'('type.lexer_fun.symbol','type.lexer_fun.symbol'),'const.combin.I_0'),s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'))))),s('fun'('type.integer.int','type.lexer_fun.symbol'),'_dst_x0_1'(s('type.lexer_fun.symbol','happ'(s('fun'('type.lexer_fun.symbol','type.lexer_fun.symbol'),'const.combin.I_0'),s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'))))),s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'_dst_x0_1'(s('type.lexer_fun.symbol','happ'(s('fun'('type.lexer_fun.symbol','type.lexer_fun.symbol'),'const.combin.I_0'),s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'))))),s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'_dst_x0_1'(s('type.lexer_fun.symbol','happ'(s('fun'('type.lexer_fun.symbol','type.lexer_fun.symbol'),'const.combin.I_0'),s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'))))),s('type.lexer_fun.symbol','happ'(s('fun'('type.lexer_fun.symbol','type.lexer_fun.symbol'),'const.combin.I_0'),s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0')))))))))).
fof('thm.lexer_fun.lexer_fun_24_prove_ltb', axiom, ![V_27a_27]: ((?[V_27s_27]: s('type.lexer_fun.symbol',V_27a_27) = s('type.lexer_fun.symbol','const.lexer_fun.StringS_1'(s('type.list.list'('type.string.char'),V_27s_27))) | (?[V_27v_7c49_7c_27]: s('type.lexer_fun.symbol',V_27a_27) = s('type.lexer_fun.symbol','const.lexer_fun.CharS_1'(s('type.string.char',V_27v_7c49_7c_27))) | (?[V_27v2_27]: s('type.lexer_fun.symbol',V_27a_27) = s('type.lexer_fun.symbol','const.lexer_fun.NumberS_1'(s('type.integer.int',V_27v2_27))) | (?[V_27v3_27]: s('type.lexer_fun.symbol',V_27a_27) = s('type.lexer_fun.symbol','const.lexer_fun.LongS_1'(s('type.list.list'('type.string.char'),V_27v3_27))) | (?[V_27v4_27]: s('type.lexer_fun.symbol',V_27a_27) = s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),V_27v4_27))) | s('type.lexer_fun.symbol',V_27a_27) = s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0')))))) => (?[V_27s_27]: s('type.lexer_fun.symbol',V_27a_27) = s('type.lexer_fun.symbol','const.lexer_fun.StringS_1'(s('type.list.list'('type.string.char'),V_27s_27))) | (?[V_27v_7c49_7c_27]: s('type.lexer_fun.symbol',V_27a_27) = s('type.lexer_fun.symbol','const.lexer_fun.CharS_1'(s('type.string.char',V_27v_7c49_7c_27))) | (?[V_27v2_27]: s('type.lexer_fun.symbol',V_27a_27) = s('type.lexer_fun.symbol','const.lexer_fun.NumberS_1'(s('type.integer.int',V_27v2_27))) | (?[V_27v3_27]: s('type.lexer_fun.symbol',V_27a_27) = s('type.lexer_fun.symbol','const.lexer_fun.LongS_1'(s('type.list.list'('type.string.char'),V_27v3_27))) | (?[V_27v4_27]: s('type.lexer_fun.symbol',V_27a_27) = s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),V_27v4_27))) | s('type.lexer_fun.symbol',V_27a_27) = s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0')))))))).
fof('thm.lexer_fun.mkCharS_ind', axiom, ![V_27P_27]: ((![V_27s_27]: p(s('bool','happ'(s('fun'('type.lexer_fun.symbol','bool'),V_27P_27),s('type.lexer_fun.symbol','const.lexer_fun.StringS_1'(s('type.list.list'('type.string.char'),V_27s_27)))))) & (![V_27v_7c49_7c_27]: p(s('bool','happ'(s('fun'('type.lexer_fun.symbol','bool'),V_27P_27),s('type.lexer_fun.symbol','const.lexer_fun.CharS_1'(s('type.string.char',V_27v_7c49_7c_27)))))) & (![V_27v2_27]: p(s('bool','happ'(s('fun'('type.lexer_fun.symbol','bool'),V_27P_27),s('type.lexer_fun.symbol','const.lexer_fun.NumberS_1'(s('type.integer.int',V_27v2_27)))))) & (![V_27v3_27]: p(s('bool','happ'(s('fun'('type.lexer_fun.symbol','bool'),V_27P_27),s('type.lexer_fun.symbol','const.lexer_fun.LongS_1'(s('type.list.list'('type.string.char'),V_27v3_27)))))) & (![V_27v4_27]: p(s('bool','happ'(s('fun'('type.lexer_fun.symbol','bool'),V_27P_27),s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),V_27v4_27)))))) & p(s('bool','happ'(s('fun'('type.lexer_fun.symbol','bool'),V_27P_27),s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'))))))))) => ![V_27v_27]: p(s('bool','happ'(s('fun'('type.lexer_fun.symbol','bool'),V_27P_27),s('type.lexer_fun.symbol',V_27v_27)))))).
fof('thm.lexer_fun.mkCharS_def|split|0', axiom, ![V_27s_27]: ?[Vv]: ((p(s('bool',Vv)) <=> s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),V_27s_27))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) & s('type.lexer_fun.symbol','const.lexer_fun.mkCharS_1'(s('type.lexer_fun.symbol','const.lexer_fun.StringS_1'(s('type.list.list'('type.string.char'),V_27s_27))))) = s('type.lexer_fun.symbol','const.bool.COND_3'(s('bool',Vv),s('type.lexer_fun.symbol','const.lexer_fun.CharS_1'(s('type.string.char','const.list.HD_1'(s('type.list.list'('type.string.char'),V_27s_27))))),s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'))))).
fof('thm.lexer_fun.mkCharS_def|split|1', axiom, ![V_27v_7c49_7c_27]: s('type.lexer_fun.symbol','const.lexer_fun.mkCharS_1'(s('type.lexer_fun.symbol','const.lexer_fun.CharS_1'(s('type.string.char',V_27v_7c49_7c_27))))) = s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0')).
fof('thm.lexer_fun.mkCharS_def|split|2', axiom, ![V_27v2_27]: s('type.lexer_fun.symbol','const.lexer_fun.mkCharS_1'(s('type.lexer_fun.symbol','const.lexer_fun.NumberS_1'(s('type.integer.int',V_27v2_27))))) = s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0')).
fof('thm.lexer_fun.mkCharS_def|split|3', axiom, ![V_27v3_27]: s('type.lexer_fun.symbol','const.lexer_fun.mkCharS_1'(s('type.lexer_fun.symbol','const.lexer_fun.LongS_1'(s('type.list.list'('type.string.char'),V_27v3_27))))) = s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0')).
fof('thm.lexer_fun.mkCharS_def|split|4', axiom, ![V_27v4_27]: s('type.lexer_fun.symbol','const.lexer_fun.mkCharS_1'(s('type.lexer_fun.symbol','const.lexer_fun.OtherS_1'(s('type.list.list'('type.string.char'),V_27v4_27))))) = s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0')).
fof('thm.lexer_fun.mkCharS_def|split|5', axiom, s('type.lexer_fun.symbol','const.lexer_fun.mkCharS_1'(s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'))) = s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0')).
fof('thm.lexer_fun.read_while_def|split|0', axiom, ![V_27P_27, V_27s_27]: s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'const.lexer_fun.read_while_3'(s('fun'('type.string.char','bool'),V_27P_27),s('type.list.list'('type.string.char'),'const.list.NIL_0'),s('type.list.list'('type.string.char'),V_27s_27))) = s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'const.pair.,_2'(s('type.list.list'('type.string.char'),'const.string.IMPLODE_1'(s('type.list.list'('type.string.char'),'const.list.REVERSE_1'(s('type.list.list'('type.string.char'),V_27s_27))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))).
fof('thm.lexer_fun.read_while_def|split|1', axiom, ![V_27P_27, V_27c_27, V_27cs_27, V_27s_27]: s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'const.lexer_fun.read_while_3'(s('fun'('type.string.char','bool'),V_27P_27),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27c_27),s('type.list.list'('type.string.char'),V_27cs_27))),s('type.list.list'('type.string.char'),V_27s_27))) = s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'const.bool.COND_3'(s('bool','happ'(s('fun'('type.string.char','bool'),V_27P_27),s('type.string.char',V_27c_27))),s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'const.lexer_fun.read_while_3'(s('fun'('type.string.char','bool'),V_27P_27),s('type.list.list'('type.string.char'),V_27cs_27),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27c_27),s('type.list.list'('type.string.char'),V_27s_27))))),s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'const.pair.,_2'(s('type.list.list'('type.string.char'),'const.string.IMPLODE_1'(s('type.list.list'('type.string.char'),'const.list.REVERSE_1'(s('type.list.list'('type.string.char'),V_27s_27))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27c_27),s('type.list.list'('type.string.char'),V_27cs_27)))))))).
fof('thm.lexer_fun.lexer_fun_28_prove_ltb', axiom, ![V_27P_27, V_27cs_27, V_27s_27, V_27cs_7c39_7c_27, V_27s_7c39_7c_27]: (s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'const.lexer_fun.read_while_3'(s('fun'('type.string.char','bool'),V_27P_27),s('type.list.list'('type.string.char'),V_27cs_27),s('type.list.list'('type.string.char'),V_27s_27))) = s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'const.pair.,_2'(s('type.list.list'('type.string.char'),V_27s_7c39_7c_27),s('type.list.list'('type.string.char'),V_27cs_7c39_7c_27))) => p(s('bool','const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),V_27cs_7c39_7c_27))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),V_27cs_27)))))))).
fof('thm.lexer_fun.is_single_char_symbol_def', axiom, ![V_27c_27]: s('bool','const.lexer_fun.is_single_char_symbol_1'(s('type.string.char',V_27c_27))) = s('bool','const.bool.IN_2'(s('type.string.char',V_27c_27),s('fun'('type.string.char','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))))))).
fof('ARITY_0_1_const.lexer_fun.isSymbol', axiom, ![VV0]: s('bool','happ'(s('fun'('type.string.char','bool'),'const.lexer_fun.isSymbol_0'),s('type.string.char',VV0))) = s('bool','const.lexer_fun.isSymbol_1'(s('type.string.char',VV0)))).
fof('thm.lexer_fun.isSymbol_def', axiom, ![V_27c_27]: s('bool','const.lexer_fun.isSymbol_1'(s('type.string.char',V_27c_27))) = s('bool','const.bool.IN_2'(s('type.string.char',V_27c_27),s('fun'('type.string.char','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))))))))))))))))))))))))))))))).
fof('thm.lexer_fun.lexer_fun_32_prove_ltb', axiom, ![V_27a_27]: (?[V_27str_27, V_27s_27]: s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),V_27a_27) = s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'const.pair.,_2'(s('type.list.list'('type.string.char'),V_27str_27),s('type.list.list'('type.string.char'),V_27s_27))) => ?[V_27str_27, V_27s_27]: s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),V_27a_27) = s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'const.pair.,_2'(s('type.list.list'('type.string.char'),V_27str_27),s('type.list.list'('type.string.char'),V_27s_27))))).
fof('thm.lexer_fun.read_string_ind', axiom, ![V_27P_27]: (![V_27str_27, V_27s_27]: ((![V_27v2_27, V_27cs_27, V_27v4_27]: ((~ (s('type.list.list'('type.string.char'),V_27str_27) = s('type.list.list'('type.string.char'),'const.list.NIL_0')) & (~ (s('type.string.char','const.list.HD_1'(s('type.list.list'('type.string.char'),V_27str_27))) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))) & (~ (s('type.string.char','const.list.HD_1'(s('type.list.list'('type.string.char'),V_27str_27))) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) & (~ (~ (s('type.string.char','const.list.HD_1'(s('type.list.list'('type.string.char'),V_27str_27))) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))) & (s('type.list.list'('type.string.char'),'const.list.TL_1'(s('type.list.list'('type.string.char'),V_27str_27))) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27v2_27),s('type.list.list'('type.string.char'),V_27cs_27))) & (s('type.string.char',V_27v4_27) = s('type.string.char',V_27v2_27) & (~ (s('type.string.char',V_27v4_27) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))) & (~ (s('type.string.char',V_27v4_27) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))) & (~ (s('type.string.char',V_27v4_27) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))) & s('type.string.char',V_27v4_27) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),V_27P_27),s('type.list.list'('type.string.char'),V_27cs_27))),s('type.list.list'('type.string.char'),'const.list.APPEND_2'(s('type.list.list'('type.string.char'),V_27s_27),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))) & (![V_27v2_27, V_27cs_27, V_27v4_27]: ((~ (s('type.list.list'('type.string.char'),V_27str_27) = s('type.list.list'('type.string.char'),'const.list.NIL_0')) & (~ (s('type.string.char','const.list.HD_1'(s('type.list.list'('type.string.char'),V_27str_27))) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))) & (~ (s('type.string.char','const.list.HD_1'(s('type.list.list'('type.string.char'),V_27str_27))) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) & (~ (~ (s('type.string.char','const.list.HD_1'(s('type.list.list'('type.string.char'),V_27str_27))) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))) & (s('type.list.list'('type.string.char'),'const.list.TL_1'(s('type.list.list'('type.string.char'),V_27str_27))) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27v2_27),s('type.list.list'('type.string.char'),V_27cs_27))) & (s('type.string.char',V_27v4_27) = s('type.string.char',V_27v2_27) & (~ (s('type.string.char',V_27v4_27) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))) & (~ (s('type.string.char',V_27v4_27) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))) & s('type.string.char',V_27v4_27) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),V_27P_27),s('type.list.list'('type.string.char'),V_27cs_27))),s('type.list.list'('type.string.char'),'const.list.APPEND_2'(s('type.list.list'('type.string.char'),V_27s_27),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))) & (![V_27v2_27, V_27cs_27, V_27v4_27]: ((~ (s('type.list.list'('type.string.char'),V_27str_27) = s('type.list.list'('type.string.char'),'const.list.NIL_0')) & (~ (s('type.string.char','const.list.HD_1'(s('type.list.list'('type.string.char'),V_27str_27))) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))) & (~ (s('type.string.char','const.list.HD_1'(s('type.list.list'('type.string.char'),V_27str_27))) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) & (~ (~ (s('type.string.char','const.list.HD_1'(s('type.list.list'('type.string.char'),V_27str_27))) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))) & (s('type.list.list'('type.string.char'),'const.list.TL_1'(s('type.list.list'('type.string.char'),V_27str_27))) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27v2_27),s('type.list.list'('type.string.char'),V_27cs_27))) & (s('type.string.char',V_27v4_27) = s('type.string.char',V_27v2_27) & (~ (s('type.string.char',V_27v4_27) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))) & s('type.string.char',V_27v4_27) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),V_27P_27),s('type.list.list'('type.string.char'),V_27cs_27))),s('type.list.list'('type.string.char'),'const.list.APPEND_2'(s('type.list.list'('type.string.char'),V_27s_27),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))) & (![V_27v2_27, V_27cs_27, V_27v4_27]: ((~ (s('type.list.list'('type.string.char'),V_27str_27) = s('type.list.list'('type.string.char'),'const.list.NIL_0')) & (~ (s('type.string.char','const.list.HD_1'(s('type.list.list'('type.string.char'),V_27str_27))) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))) & (~ (s('type.string.char','const.list.HD_1'(s('type.list.list'('type.string.char'),V_27str_27))) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) & (~ (~ (s('type.string.char','const.list.HD_1'(s('type.list.list'('type.string.char'),V_27str_27))) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))) & (s('type.list.list'('type.string.char'),'const.list.TL_1'(s('type.list.list'('type.string.char'),V_27str_27))) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27v2_27),s('type.list.list'('type.string.char'),V_27cs_27))) & (s('type.string.char',V_27v4_27) = s('type.string.char',V_27v2_27) & s('type.string.char',V_27v4_27) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),V_27P_27),s('type.list.list'('type.string.char'),V_27cs_27))),s('type.list.list'('type.string.char'),'const.list.APPEND_2'(s('type.list.list'('type.string.char'),V_27s_27),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))) & ((~ (s('type.list.list'('type.string.char'),V_27str_27) = s('type.list.list'('type.string.char'),'const.list.NIL_0')) & (~ (s('type.string.char','const.list.HD_1'(s('type.list.list'('type.string.char'),V_27str_27))) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))) & (~ (s('type.string.char','const.list.HD_1'(s('type.list.list'('type.string.char'),V_27str_27))) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) & ~ (s('type.string.char','const.list.HD_1'(s('type.list.list'('type.string.char'),V_27str_27))) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),V_27P_27),s('type.list.list'('type.string.char'),'const.list.TL_1'(s('type.list.list'('type.string.char'),V_27str_27))))),s('type.list.list'('type.string.char'),'const.list.APPEND_2'(s('type.list.list'('type.string.char'),V_27s_27),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.list.HD_1'(s('type.list.list'('type.string.char'),V_27str_27))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),V_27P_27),s('type.list.list'('type.string.char'),V_27str_27))),s('type.list.list'('type.string.char'),V_27s_27))))) => ![V_27v_27, V_27v_7c49_7c_27]: p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),V_27P_27),s('type.list.list'('type.string.char'),V_27v_27))),s('type.list.list'('type.string.char'),V_27v_7c49_7c_27)))))).
fof('thm.lexer_fun.read_string_def', axiom, ![V_27str_27, V_27s_27]: ?[Vv]: ((p(s('bool',Vv)) <=> ~ (s('type.string.char','const.list.HD_1'(s('type.list.list'('type.string.char'),V_27str_27))) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))) & ?[Vv_27]: ((p(s('bool',Vv_27)) <=> s('type.string.char','const.list.HD_1'(s('type.list.list'('type.string.char'),V_27str_27))) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) & ?[Vv_27_27]: ((p(s('bool',Vv_27_27)) <=> s('type.string.char','const.list.HD_1'(s('type.list.list'('type.string.char'),V_27str_27))) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))) & ?[Vv_27_27_27]: ((p(s('bool',Vv_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27str_27) = s('type.list.list'('type.string.char'),'const.list.NIL_0')) & s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'happ'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.lexer_fun.read_string_0'),s('type.list.list'('type.string.char'),V_27str_27))),s('type.list.list'('type.string.char'),V_27s_27))) = s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'happ'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('bool','fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.bool.COND_0'),s('bool',Vv_27_27_27))),s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'const.pair.,_2'(s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'happ'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('bool','fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.bool.COND_0'),s('bool',Vv_27_27))),s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'const.pair.,_2'(s('type.lexer_fun.symbol','const.lexer_fun.StringS_1'(s('type.list.list'('type.string.char'),V_27s_27))),s('type.list.list'('type.string.char'),'const.list.TL_1'(s('type.list.list'('type.string.char'),V_27str_27))))))),s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'happ'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('bool','fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.bool.COND_0'),s('bool',Vv_27))),s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'const.pair.,_2'(s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'),s('type.list.list'('type.string.char'),'const.list.TL_1'(s('type.list.list'('type.string.char'),V_27str_27))))))),s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'happ'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('bool','fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.bool.COND_0'),s('bool',Vv))),s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'happ'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.lexer_fun.read_string_0'),s('type.list.list'('type.string.char'),'const.list.TL_1'(s('type.list.list'('type.string.char'),V_27str_27))))),s('type.list.list'('type.string.char'),'const.list.APPEND_2'(s('type.list.list'('type.string.char'),V_27s_27),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.list.HD_1'(s('type.list.list'('type.string.char'),V_27str_27))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'const.list.list_CASE_3'(s('type.list.list'('type.string.char'),'const.list.TL_1'(s('type.list.list'('type.string.char'),V_27str_27))),s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'const.pair.,_2'(s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'),s('type.list.list'('type.string.char'),'const.list.TL_1'(s('type.list.list'('type.string.char'),V_27str_27))))),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'_dst_x00x01x10_3'(s('fun'('fun'('type.string.char','type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.string.char','type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.bool.literal_case_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'_dst_x00x01x10x11_4'(s('fun'('bool','fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.lexer_fun.read_string_0'),s('type.list.list'('type.string.char'),'const.list.APPEND_2'(s('type.list.list'('type.string.char'),V_27s_27),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'_dst_x00x01x10x11_4'(s('fun'('bool','fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.lexer_fun.read_string_0'),s('type.list.list'('type.string.char'),'const.list.APPEND_2'(s('type.list.list'('type.string.char'),V_27s_27),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'_dst_x00x01x10x11_4'(s('fun'('bool','fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.lexer_fun.read_string_0'),s('type.list.list'('type.string.char'),'const.list.APPEND_2'(s('type.list.list'('type.string.char'),V_27s_27),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'_dst_x00x01x10x00_4'(s('fun'('bool','fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.lexer_fun.read_string_0'),s('type.list.list'('type.string.char'),'const.list.APPEND_2'(s('type.list.list'('type.string.char'),V_27s_27),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'const.pair.,_2'(s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'),s('type.list.list'('type.string.char'),'const.list.TL_1'(s('type.list.list'('type.string.char'),V_27str_27))))))))))))),s('fun'('type.string.char','type.string.char'),'_i_0_0')))))))))))))))))).
fof('thm.lexer_fun.lexer_fun_36_prove_ltb', axiom, ?[V_27_7c37_7c_7c37_7cgenvar_7c37_7c_7c37_7c25_7c48_7c9_27]: ~ (p(s('bool',V_27_7c37_7c_7c37_7cgenvar_7c37_7c_7c37_7c25_7c48_7c9_27)))).
fof('thm.lexer_fun.lexer_fun_37_prove_ltb', axiom, ?[V_27_7c37_7c_7c37_7cgenvar_7c37_7c_7c37_7c26_7c48_7c7_27, V_27_7c37_7c_7c37_7cgenvar_7c37_7c_7c37_7c26_7c48_7c8_27]: ~ ((~ (p(s('bool',V_27_7c37_7c_7c37_7cgenvar_7c37_7c_7c37_7c26_7c48_7c8_27))) | ~ (p(s('bool',V_27_7c37_7c_7c37_7cgenvar_7c37_7c_7c37_7c26_7c48_7c7_27)))))).
fof('ARITY_0_2_const.lexer_fun.read_string', axiom, ![VV0, VV1]: s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'happ'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.lexer_fun.read_string_0'),s('type.list.list'('type.string.char'),VV0))),s('type.list.list'('type.string.char'),VV1))) = s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'const.lexer_fun.read_string_2'(s('type.list.list'('type.string.char'),VV0),s('type.list.list'('type.string.char'),VV1)))).
fof('thm.lexer_fun.lexer_fun_38_prove_ltb', axiom, ![V_27s_27, V_27t_27, V_27x_7c49_7c_27, V_27x2_27]: (s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'const.lexer_fun.read_string_2'(s('type.list.list'('type.string.char'),V_27s_27),s('type.list.list'('type.string.char'),V_27t_27))) = s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'const.pair.,_2'(s('type.lexer_fun.symbol',V_27x_7c49_7c_27),s('type.list.list'('type.string.char'),V_27x2_27))) => p(s('bool','const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),V_27x2_27))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),V_27s_27))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),V_27t_27)))))))))).
fof('thm.lexer_fun.lexer_fun_4|48|_prove_ltb', axiom, ![V_27a_27]: ((?[V_27d_27]: s('type.pair.prod'('type.list.list'('type.string.char'),'type.integer.int'),V_27a_27) = s('type.pair.prod'('type.list.list'('type.string.char'),'type.integer.int'),'const.pair.,_2'(s('type.list.list'('type.string.char'),'const.list.NIL_0'),s('type.integer.int',V_27d_27))) | (?[V_27x_27, V_27d_27]: s('type.pair.prod'('type.list.list'('type.string.char'),'type.integer.int'),V_27a_27) = s('type.pair.prod'('type.list.list'('type.string.char'),'type.integer.int'),'const.pair.,_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27x_27),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('type.integer.int',V_27d_27))) | ?[V_27x_27, V_27y_27, V_27xs_27, V_27d_27]: s('type.pair.prod'('type.list.list'('type.string.char'),'type.integer.int'),V_27a_27) = s('type.pair.prod'('type.list.list'('type.string.char'),'type.integer.int'),'const.pair.,_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27x_27),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27y_27),s('type.list.list'('type.string.char'),V_27xs_27))))),s('type.integer.int',V_27d_27))))) => (?[V_27d_27]: s('type.pair.prod'('type.list.list'('type.string.char'),'type.integer.int'),V_27a_27) = s('type.pair.prod'('type.list.list'('type.string.char'),'type.integer.int'),'const.pair.,_2'(s('type.list.list'('type.string.char'),'const.list.NIL_0'),s('type.integer.int',V_27d_27))) | (?[V_27x_27, V_27d_27]: s('type.pair.prod'('type.list.list'('type.string.char'),'type.integer.int'),V_27a_27) = s('type.pair.prod'('type.list.list'('type.string.char'),'type.integer.int'),'const.pair.,_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27x_27),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('type.integer.int',V_27d_27))) | ?[V_27x_27, V_27y_27, V_27xs_27, V_27d_27]: s('type.pair.prod'('type.list.list'('type.string.char'),'type.integer.int'),V_27a_27) = s('type.pair.prod'('type.list.list'('type.string.char'),'type.integer.int'),'const.pair.,_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27x_27),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27y_27),s('type.list.list'('type.string.char'),V_27xs_27))))),s('type.integer.int',V_27d_27))))))).
fof('thm.lexer_fun.skip_comment_ind', axiom, ![V_27P_27]: ((![V_27d_27]: p(s('bool','happ'(s('fun'('type.integer.int','bool'),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.integer.int','bool')),V_27P_27),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('type.integer.int',V_27d_27)))) & (![V_27x_27, V_27d_27]: p(s('bool','happ'(s('fun'('type.integer.int','bool'),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.integer.int','bool')),V_27P_27),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27x_27),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.integer.int',V_27d_27)))) & ![V_27x_27, V_27y_27, V_27xs_27, V_27d_27]: ((((~ (s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27x_27),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27y_27),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))) & ~ (s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27x_27),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27y_27),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))) => p(s('bool','happ'(s('fun'('type.integer.int','bool'),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.integer.int','bool')),V_27P_27),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27y_27),s('type.list.list'('type.string.char'),V_27xs_27))))),s('type.integer.int',V_27d_27))))) & (((~ (s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27x_27),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27y_27),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))) & (s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27x_27),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27y_27),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))) & ~ (s('type.integer.int',V_27d_27) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) => p(s('bool','happ'(s('fun'('type.integer.int','bool'),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.integer.int','bool')),V_27P_27),s('type.list.list'('type.string.char'),V_27xs_27))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',V_27d_27),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) & (s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27x_27),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27y_27),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))) => p(s('bool','happ'(s('fun'('type.integer.int','bool'),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.integer.int','bool')),V_27P_27),s('type.list.list'('type.string.char'),V_27xs_27))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',V_27d_27),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) => p(s('bool','happ'(s('fun'('type.integer.int','bool'),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.integer.int','bool')),V_27P_27),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27x_27),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27y_27),s('type.list.list'('type.string.char'),V_27xs_27))))))),s('type.integer.int',V_27d_27))))))) => ![V_27v_27, V_27v_7c49_7c_27]: p(s('bool','happ'(s('fun'('type.integer.int','bool'),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.integer.int','bool')),V_27P_27),s('type.list.list'('type.string.char'),V_27v_27))),s('type.integer.int',V_27v_7c49_7c_27)))))).
fof('thm.lexer_fun.skip_comment_def|split|0', axiom, ![V_27d_27]: s('type.option.option'('type.list.list'('type.string.char')),'const.lexer_fun.skip_comment_2'(s('type.list.list'('type.string.char'),'const.list.NIL_0'),s('type.integer.int',V_27d_27))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0')).
fof('thm.lexer_fun.skip_comment_def|split|1', axiom, ![V_27x_27, V_27d_27]: s('type.option.option'('type.list.list'('type.string.char')),'const.lexer_fun.skip_comment_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27x_27),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('type.integer.int',V_27d_27))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0')).
fof('thm.lexer_fun.skip_comment_def|split|2', axiom, ![V_27y_27, V_27xs_27, V_27x_27, V_27d_27]: ?[Vv]: ((p(s('bool',Vv)) <=> s('type.integer.int',V_27d_27) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) & ?[Vv_27]: ((p(s('bool',Vv_27)) <=> s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27x_27),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27y_27),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))) & ?[Vv_27_27]: ((p(s('bool',Vv_27_27)) <=> s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27x_27),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27y_27),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))) & s('type.option.option'('type.list.list'('type.string.char')),'const.lexer_fun.skip_comment_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27x_27),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27y_27),s('type.list.list'('type.string.char'),V_27xs_27))))),s('type.integer.int',V_27d_27))) = s('type.option.option'('type.list.list'('type.string.char')),'const.bool.COND_3'(s('bool',Vv_27_27),s('type.option.option'('type.list.list'('type.string.char')),'const.lexer_fun.skip_comment_2'(s('type.list.list'('type.string.char'),V_27xs_27),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',V_27d_27),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.option.option'('type.list.list'('type.string.char')),'const.bool.COND_3'(s('bool',Vv_27),s('type.option.option'('type.list.list'('type.string.char')),'const.bool.COND_3'(s('bool',Vv),s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),V_27xs_27))),s('type.option.option'('type.list.list'('type.string.char')),'const.lexer_fun.skip_comment_2'(s('type.list.list'('type.string.char'),V_27xs_27),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',V_27d_27),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.option.option'('type.list.list'('type.string.char')),'const.lexer_fun.skip_comment_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27y_27),s('type.list.list'('type.string.char'),V_27xs_27))),s('type.integer.int',V_27d_27))))))))))).
fof('thm.lexer_fun.lexer_fun_44_prove_ltb', axiom, ?[V_27_7c37_7c_7c37_7cgenvar_7c37_7c_7c37_7c326_7c48_7c_27]: ~ (p(s('bool',V_27_7c37_7c_7c37_7cgenvar_7c37_7c_7c37_7c326_7c48_7c_27)))).
fof('thm.lexer_fun.lexer_fun_45_prove_ltb', axiom, ![V_27xs_27, V_27d_27, V_27str_27]: (s('type.option.option'('type.list.list'('type.string.char')),'const.lexer_fun.skip_comment_2'(s('type.list.list'('type.string.char'),V_27xs_27),s('type.integer.int',V_27d_27))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),V_27str_27))) => p(s('bool','const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),V_27str_27))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),V_27xs_27)))))))).
fof('ARITY_0_1_const.lexer_fun.isAlphaNumPrime', axiom, ![VV0]: s('bool','happ'(s('fun'('type.string.char','bool'),'const.lexer_fun.isAlphaNumPrime_0'),s('type.string.char',VV0))) = s('bool','const.lexer_fun.isAlphaNumPrime_1'(s('type.string.char',VV0)))).
fof('thm.lexer_fun.isAlphaNumPrime_def', axiom, ![V_27c_27]: (p(s('bool','const.lexer_fun.isAlphaNumPrime_1'(s('type.string.char',V_27c_27)))) <=> (p(s('bool','const.string.isAlphaNum_1'(s('type.string.char',V_27c_27)))) | (s('type.string.char',V_27c_27) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) | s('type.string.char',V_27c_27) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))).
fof('ARITY_1_2_const.integer.int_sub', axiom, ![VV0, VV1]: s('type.integer.int','happ'(s('fun'('type.integer.int','type.integer.int'),'const.integer.int_sub_1'(s('type.integer.int',VV0))),s('type.integer.int',VV1))) = s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',VV0),s('type.integer.int',VV1)))).
fof('ARITY_0_1_const.string.isSpace', axiom, ![VV0]: s('bool','happ'(s('fun'('type.string.char','bool'),'const.string.isSpace_0'),s('type.string.char',VV0))) = s('bool','const.string.isSpace_1'(s('type.string.char',VV0)))).
fof('ARITY_1_3_const.lexer_fun.read_while', axiom, ![VV0, VV1, VV2]: s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')))),'const.lexer_fun.read_while_1'(s('fun'('type.string.char','bool'),VV0))),s('type.list.list'('type.string.char'),VV1))),s('type.list.list'('type.string.char'),VV2))) = s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'const.lexer_fun.read_while_3'(s('fun'('type.string.char','bool'),VV0),s('type.list.list'('type.string.char'),VV1),s('type.list.list'('type.string.char'),VV2)))).
fof('ARITY_0_1_const.lexer_fun.next_sym', axiom, ![VV0]: s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.lexer_fun.next_sym_0'),s('type.list.list'('type.string.char'),VV0))) = s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'const.lexer_fun.next_sym_1'(s('type.list.list'('type.string.char'),VV0)))).
fof('ARITY_0_2_const.lexer_fun.skip_comment', axiom, ![VV0, VV1]: s('type.option.option'('type.list.list'('type.string.char')),'happ'(s('fun'('type.integer.int','type.option.option'('type.list.list'('type.string.char'))),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.integer.int','type.option.option'('type.list.list'('type.string.char')))),'const.lexer_fun.skip_comment_0'),s('type.list.list'('type.string.char'),VV0))),s('type.integer.int',VV1))) = s('type.option.option'('type.list.list'('type.string.char')),'const.lexer_fun.skip_comment_2'(s('type.list.list'('type.string.char'),VV0),s('type.integer.int',VV1)))).
fof('ARITY_0_1_const.lexer_fun.is_single_char_symbol', axiom, ![VV0]: s('bool','happ'(s('fun'('type.string.char','bool'),'const.lexer_fun.is_single_char_symbol_0'),s('type.string.char',VV0))) = s('bool','const.lexer_fun.is_single_char_symbol_1'(s('type.string.char',VV0)))).
fof('_dst_x1x1x1_ax', axiom, ![VA,VA2,VA3,VA1]: ![V__x, V__0, V__1, V__z]: s(VA,'happ'(s('fun'(VA1,VA),'_dst_x1x1x1_3'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA))),V__x),s('fun'(VA1,VA2),V__0),s('fun'(VA1,VA3),V__1))),s(VA1,V__z))) = s(VA,'happ'(s('fun'(VA3,VA),'happ'(s('fun'(VA2,'fun'(VA3,VA)),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA))),V__x),s(VA1,V__z))),s(VA2,'happ'(s('fun'(VA1,VA2),V__0),s(VA1,V__z))))),s(VA3,'happ'(s('fun'(VA1,VA3),V__1),s(VA1,V__z)))))).
fof('_dst_x01x11x11_ax', axiom, ![VA,VA3,VA2,VA4,VA1]: ![V__x, V__0, V__1, V__z]: s('fun'(VA2,VA),'happ'(s('fun'(VA1,'fun'(VA2,VA)),'_dst_x01x11x11_3'(s('fun'(VA2,'fun'(VA3,'fun'(VA4,VA))),V__x),s('fun'(VA1,'fun'(VA2,VA3)),V__0),s('fun'(VA1,'fun'(VA2,VA4)),V__1))),s(VA1,V__z))) = s('fun'(VA2,VA),'_dst_x1x1x1_3'(s('fun'(VA2,'fun'(VA3,'fun'(VA4,VA))),V__x),s('fun'(VA2,VA3),'happ'(s('fun'(VA1,'fun'(VA2,VA3)),V__0),s(VA1,V__z))),s('fun'(VA2,VA4),'happ'(s('fun'(VA1,'fun'(VA2,VA4)),V__1),s(VA1,V__z)))))).
fof('_dst_x00x11x01x11_ax', axiom, ![VA,VA3,VA4,VA2,VA5,VA1]: ![V__x, V__0, V__1, V__2, V__z]: s('fun'(VA2,VA),'happ'(s('fun'(VA1,'fun'(VA2,VA)),'_dst_x00x11x01x11_4'(s('fun'(VA3,'fun'(VA4,'fun'(VA5,VA))),V__x),s('fun'(VA1,'fun'(VA2,VA3)),V__0),s('fun'(VA2,VA4),V__1),s('fun'(VA1,'fun'(VA2,VA5)),V__2))),s(VA1,V__z))) = s('fun'(VA2,VA),'_dst_x0x1x1x1_4'(s('fun'(VA3,'fun'(VA4,'fun'(VA5,VA))),V__x),s('fun'(VA2,VA3),'happ'(s('fun'(VA1,'fun'(VA2,VA3)),V__0),s(VA1,V__z))),s('fun'(VA2,VA4),V__1),s('fun'(VA2,VA5),'happ'(s('fun'(VA1,'fun'(VA2,VA5)),V__2),s(VA1,V__z)))))).
fof('_dst_x000x011x101x011_ax', axiom, ![VA,VA4,VA5,VA1,VA2,VA3,VA6]: ![V__x, V__0, V__1, V__2, V__z]: s('fun'(VA2,'fun'(VA3,VA)),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA))),'_dst_x000x011x101x011_4'(s('fun'(VA4,'fun'(VA5,'fun'(VA6,VA))),V__x),s('fun'(VA2,'fun'(VA3,VA4)),V__0),s('fun'(VA1,'fun'(VA3,VA5)),V__1),s('fun'(VA2,'fun'(VA3,VA6)),V__2))),s(VA1,V__z))) = s('fun'(VA2,'fun'(VA3,VA)),'_dst_x00x11x01x11_4'(s('fun'(VA4,'fun'(VA5,'fun'(VA6,VA))),V__x),s('fun'(VA2,'fun'(VA3,VA4)),V__0),s('fun'(VA3,VA5),'happ'(s('fun'(VA1,'fun'(VA3,VA5)),V__1),s(VA1,V__z))),s('fun'(VA2,'fun'(VA3,VA6)),V__2)))).
fof('_dst_x000x011x001x111_ax', axiom, ![VA,VA4,VA5,VA2,VA3,VA6,VA1]: ![V__x, V__0, V__1, V__2, V__z]: s('fun'(VA2,'fun'(VA3,VA)),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA))),'_dst_x000x011x001x111_4'(s('fun'(VA4,'fun'(VA5,'fun'(VA6,VA))),V__x),s('fun'(VA2,'fun'(VA3,VA4)),V__0),s('fun'(VA3,VA5),V__1),s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA6))),V__2))),s(VA1,V__z))) = s('fun'(VA2,'fun'(VA3,VA)),'_dst_x00x11x01x11_4'(s('fun'(VA4,'fun'(VA5,'fun'(VA6,VA))),V__x),s('fun'(VA2,'fun'(VA3,VA4)),V__0),s('fun'(VA3,VA5),V__1),s('fun'(VA2,'fun'(VA3,VA6)),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA6))),V__2),s(VA1,V__z)))))).
fof('_dst_x000x010x111x001_ax', axiom, ![VA,VA4,VA2,VA5,VA1,VA3,VA6]: ![V__x, V__0, V__1, V__2, V__z]: s('fun'(VA2,'fun'(VA3,VA)),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA))),'_dst_x000x010x111x001_4'(s('fun'(VA4,'fun'(VA5,'fun'(VA6,VA))),V__x),s('fun'(VA2,VA4),V__0),s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA5))),V__1),s('fun'(VA3,VA6),V__2))),s(VA1,V__z))) = s('fun'(VA2,'fun'(VA3,VA)),'_dst_x00x10x11x01_4'(s('fun'(VA4,'fun'(VA5,'fun'(VA6,VA))),V__x),s('fun'(VA2,VA4),V__0),s('fun'(VA2,'fun'(VA3,VA5)),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA5))),V__1),s(VA1,V__z))),s('fun'(VA3,VA6),V__2)))).
fof('_dst_x000x010x011x111_ax', axiom, ![VA,VA4,VA5,VA2,VA3,VA6,VA1]: ![V__x, V__0, V__1, V__2, V__z]: s('fun'(VA2,'fun'(VA3,VA)),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA))),'_dst_x000x010x011x111_4'(s('fun'(VA4,'fun'(VA5,'fun'(VA6,VA))),V__x),s('fun'(VA2,VA4),V__0),s('fun'(VA2,'fun'(VA3,VA5)),V__1),s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA6))),V__2))),s(VA1,V__z))) = s('fun'(VA2,'fun'(VA3,VA)),'_dst_x00x10x11x11_4'(s('fun'(VA4,'fun'(VA5,'fun'(VA6,VA))),V__x),s('fun'(VA2,VA4),V__0),s('fun'(VA2,'fun'(VA3,VA5)),V__1),s('fun'(VA2,'fun'(VA3,VA6)),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA6))),V__2),s(VA1,V__z)))))).
fof('_dst_x000x010x001x111_ax', axiom, ![VA,VA4,VA5,VA2,VA3,VA6,VA1]: ![V__x, V__0, V__1, V__2, V__z]: s('fun'(VA2,'fun'(VA3,VA)),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA))),'_dst_x000x010x001x111_4'(s('fun'(VA4,'fun'(VA5,'fun'(VA6,VA))),V__x),s('fun'(VA2,VA4),V__0),s('fun'(VA3,VA5),V__1),s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA6))),V__2))),s(VA1,V__z))) = s('fun'(VA2,'fun'(VA3,VA)),'_dst_x00x10x01x11_4'(s('fun'(VA4,'fun'(VA5,'fun'(VA6,VA))),V__x),s('fun'(VA2,VA4),V__0),s('fun'(VA3,VA5),V__1),s('fun'(VA2,'fun'(VA3,VA6)),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA6))),V__2),s(VA1,V__z)))))).
fof('_dst_x0000x0001x1010x1100_ax', axiom, ![VA,VA4,VA5,VA3,VA6,VA2,VA7,VA1]: ![V__x, V__0, V__1, V__2, V__z]: s('fun'(VA2,'fun'(VA3,'fun'(VA4,VA))),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,'fun'(VA4,VA)))),'_dst_x0000x0001x1010x1100_4'(s('fun'(VA5,'fun'(VA6,'fun'(VA7,VA))),V__x),s('fun'(VA4,VA5),V__0),s('fun'(VA1,'fun'(VA3,VA6)),V__1),s('fun'(VA1,'fun'(VA2,VA7)),V__2))),s(VA1,V__z))) = s('fun'(VA2,'fun'(VA3,'fun'(VA4,VA))),'_dst_x000x001x010x100_4'(s('fun'(VA5,'fun'(VA6,'fun'(VA7,VA))),V__x),s('fun'(VA4,VA5),V__0),s('fun'(VA3,VA6),'happ'(s('fun'(VA1,'fun'(VA3,VA6)),V__1),s(VA1,V__z))),s('fun'(VA2,VA7),'happ'(s('fun'(VA1,'fun'(VA2,VA7)),V__2),s(VA1,V__z)))))).
fof('thm.lexer_fun.next_sym_primitive_def', axiom, s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.lexer_fun.next_sym_0') = s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.relation.WFREC_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'const.min.@_1'(s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'bool'),'const.relation.WF_0'),s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.string.char'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'fun'('type.list.list'('type.string.char'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.string.char','bool'),'bool'),'!_0'),s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'fun'('type.list.list'('type.string.char'),'fun'('type.string.char','bool'))),'_dst_x000x111_2'(s('fun'('fun'('type.list.list'('type.string.char'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'fun'('type.list.list'('type.string.char'),'fun'('type.string.char','fun'('type.list.list'('type.string.char'),'bool')))),'_dst_x0000x0111x1111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','fun'('type.list.list'('type.string.char'),'bool'))),'_dst_x000x010x111_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.string.char','bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.string.char','bool'),'const.string.isSpace_0'))),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','fun'('type.list.list'('type.string.char'),'bool'))),'_dst_x000x010x111_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.string.char','bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.string.char','bool'),'const.string.isDigit_0'))),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','fun'('type.list.list'('type.string.char'),'bool'))),'_dst_x000x110x111_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','bool')),'_dst_x00x11_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','bool')),'_dst_x00x01x10_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'=_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('type.string.char','bool'),'const.string.isDigit_0'),s('fun'('type.list.list'('type.string.char'),'type.string.char'),'const.list.HD_0'))))))))),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','fun'('type.list.list'('type.string.char'),'bool'))),'_dst_x000x010x111_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.string.char','bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','fun'('type.list.list'('type.string.char'),'bool'))),'_dst_x000x010x111_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.string.char','bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','fun'('type.list.list'('type.string.char'),'bool'))),'_dst_x000x110x111_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','bool')),'_dst_x00x11_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','bool')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.string.char'),'bool'),'const.list.isPREFIX_1'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','type.list.list'('type.string.char'))),'_dst_x01x10_2'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'))))))),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','fun'('type.list.list'('type.string.char'),'bool'))),'_dst_x000x110x111_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','bool')),'_dst_x00x11_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','bool')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.string.char'),'bool'),'const.list.isPREFIX_1'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','type.list.list'('type.string.char'))),'_dst_x01x10_2'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'))))))),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','fun'('type.list.list'('type.string.char'),'bool'))),'_dst_x000x110x101_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','bool')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.string.char'),'bool'),'const.list.isPREFIX_1'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','type.list.list'('type.string.char'))),'_dst_x01x10_2'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'))))),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'_dst_x00x10x01_3'(s('fun'('type.option.option'('type.list.list'('type.string.char')),'fun'('type.option.option'('type.list.list'('type.string.char')),'bool')),'=_0'),s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'_dst_x0x1x0_3'(s('fun'('type.list.list'('type.string.char'),'fun'('type.integer.int','type.option.option'('type.list.list'('type.string.char')))),'const.lexer_fun.skip_comment_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'const.list.TL_0'),s('type.integer.int','happ'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('type.num.num','const.num.|48|_0'))))),s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'))))))))))))))))))),s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'fun'('type.list.list'('type.string.char'),'fun'('type.string.char','fun'('type.list.list'('type.string.char'),'bool')))),'_dst_x1001x0110_2'(s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool'))),'_i_0_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','type.list.list'('type.string.char'))),'_dst_x01x10_2'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'))))))))))))),s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.string.char'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'fun'('type.list.list'('type.string.char'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.string.char','bool'),'bool'),'!_0'),s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'fun'('type.list.list'('type.string.char'),'fun'('type.string.char','bool'))),'_dst_x000x001x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.string.char','bool'),'const.string.isSpace_0'),s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'fun'('type.list.list'('type.string.char'),'fun'('type.string.char','bool'))),'_dstsel_0_x010x011_2'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','type.list.list'('type.string.char'))),'_dst_x01x10_2'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'))))))))))))))))),s('fun'('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x01x00x10_3'(s('fun'('type.list.list'('type.string.char'),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.list.list_CASE_0'),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.combin.I_0'),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'const.option.NONE_0'))),s('fun'('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'_dst_x000x111_2'(s('fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.combin.I_0'),s('fun'('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'_dst_x000x010x101x111_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'const.string.isSpace_0'),s('fun'('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_i_0_0'),s('fun'('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'_dst_x000x010x011x111_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'const.string.isDigit_0'),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x10x01_3'(s('fun'('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.bool.LET_0'),s('fun'('type.string.char','fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.pair.UNCURRY_0'),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'_dst_x000x111_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x11_2'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol')),'_dst_x00x11_2'(s('fun'('type.integer.int','type.lexer_fun.symbol'),'const.lexer_fun.NumberS_0'),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.integer.int')),'_dst_x00x11_2'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.num.num')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.string.char'),'type.num.num'),'const.ASCIInumbers.num_from_dec_string_0'),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'))))))))))))),s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')))),'const.lexer_fun.read_while_1'(s('fun'('type.string.char','bool'),'const.string.isDigit_0'))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'_dst_x000x011x001x111_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'bool')),'_dst_x00x10x01_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'=_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('type.string.char','bool'),'const.string.isDigit_0'),s('fun'('type.list.list'('type.string.char'),'type.string.char'),'const.list.HD_0'))))))),s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'_dst_x0x1_2'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.bool.LET_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.pair.UNCURRY_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x11_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'_dst_x0x1_2'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'_dst_x0x1_2'(s('fun'('type.integer.int','type.lexer_fun.symbol'),'const.lexer_fun.NumberS_0'),s('fun'('type.list.list'('type.string.char'),'type.integer.int'),'_dst_x0x1_2'(s('fun'('type.integer.int','type.integer.int'),'const.integer.int_sub_1'(s('type.integer.int','happ'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('type.num.num','const.num.|48|_0'))))),s('fun'('type.list.list'('type.string.char'),'type.integer.int'),'_dst_x0x1_2'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('fun'('type.list.list'('type.string.char'),'type.num.num'),'const.ASCIInumbers.num_from_dec_string_0'))))))))))))))),s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')))),'const.lexer_fun.read_while_1'(s('fun'('type.string.char','bool'),'const.string.isDigit_0'))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'_dst_x000x010x011x111_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x11_2'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.bool.LET_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.pair.UNCURRY_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x11_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'_dst_x0x1_2'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'const.lexer_fun.OtherS_0'))))))))),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')))),'_dst_x01x10_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')))),'const.lexer_fun.read_while_1'(s('fun'('type.string.char','bool'),'const.lexer_fun.isAlphaNumPrime_0'))),s('fun'('type.string.char','type.list.list'('type.string.char')),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'_dst_x000x010x001x111_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'_dst_x0x1_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.bool.LET_0'),s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.pair.UNCURRY_0'),s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x11_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'))))))),s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.lexer_fun.read_string_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'_dst_x000x011x001x111_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'bool')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.string.char'),'bool'),'const.list.isPREFIX_1'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'))),s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'_dst_x0x1_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'_dst_x0x1_2'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'))),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'const.list.TL_0'))))),s('fun'('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'_dst_x000x011x001x111_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'bool')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.string.char'),'bool'),'const.list.isPREFIX_1'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'))),s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'_dst_x0x1_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.bool.LET_0'),s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.pair.UNCURRY_0'),s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x11_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'_dst_x0x1_2'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('fun'('type.lexer_fun.symbol','type.lexer_fun.symbol'),'const.lexer_fun.mkCharS_0'))))))))),s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'_dst_x0x1x0_3'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.lexer_fun.read_string_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'const.list.TL_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'_dst_x000x011x101x011_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'bool')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.string.char'),'bool'),'const.list.isPREFIX_1'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'))),s('fun'('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x01x00x10_4'(s('fun'('type.option.option'('type.list.list'('type.string.char')),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.option.option_CASE_0'),s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'_dst_x0x1x0_3'(s('fun'('type.list.list'('type.string.char'),'fun'('type.integer.int','type.option.option'('type.list.list'('type.string.char')))),'const.lexer_fun.skip_comment_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'const.list.TL_0'),s('type.integer.int','happ'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('type.num.num','const.num.|48|_0'))))),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'happ'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_i_0_0'))),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x10x11x11_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'const.lexer_fun.is_single_char_symbol_0'),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x11_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'_dst_x0x1_2'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('fun'('type.string.char','type.lexer_fun.symbol'),'_dst_x0x1_2'(s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'const.lexer_fun.OtherS_0'),s('fun'('type.string.char','type.list.list'('type.string.char')),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x10x11x11_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'const.lexer_fun.isSymbol_0'),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x11_2'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.bool.LET_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.pair.UNCURRY_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x11_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'_dst_x0x1_2'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'const.lexer_fun.OtherS_0'))))))))),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')))),'_dst_x01x10_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')))),'const.lexer_fun.read_while_1'(s('fun'('type.string.char','bool'),'const.lexer_fun.isSymbol_0'))),s('fun'('type.string.char','type.list.list'('type.string.char')),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x10x11x11_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'const.string.isAlpha_0'),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x11_2'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.bool.LET_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.pair.UNCURRY_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x01x11x11_3'(s('fun'('type.list.list'('type.string.char'),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.list.list_CASE_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x11_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'_dst_x0x1_2'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'const.lexer_fun.OtherS_0'))))),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))))),'_dst_x0000x1101x0010_3'(s('fun'('fun'('type.string.char','type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.string.char','type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.bool.literal_case_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'fun'('type.string.char','type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))))),'_dst_x0000x0001x1010x1100_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x01x00x10_3'(s('fun'('type.list.list'('type.string.char'),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.list.list_CASE_0'),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'happ'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'_dst_x000x010x111x111_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'const.string.isAlpha_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'_dst_x000x100x011_3'(s('fun'('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.bool.LET_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.pair.UNCURRY_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'_dst_x000x111_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x11_2'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'const.lexer_fun.LongS_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'_dst_x0x1_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.APPEND_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.APPEND_0'),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')))),'_dst_x01x10_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')))),'const.lexer_fun.read_while_1'(s('fun'('type.string.char','bool'),'const.lexer_fun.isAlphaNumPrime_0'))),s('fun'('type.string.char','type.list.list'('type.string.char')),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'_dst_x000x010x111x001_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'const.lexer_fun.isSymbol_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'_dst_x000x100x011_3'(s('fun'('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.bool.LET_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.pair.UNCURRY_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'_dst_x000x111_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x11_2'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'const.lexer_fun.LongS_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'_dst_x0x1_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.APPEND_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.APPEND_0'),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')))),'_dst_x01x10_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')))),'const.lexer_fun.read_while_1'(s('fun'('type.string.char','bool'),'const.lexer_fun.isSymbol_0'))),s('fun'('type.string.char','type.list.list'('type.string.char')),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'_dst_x0x1_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'))))))))))),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x11_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'_dst_x0x1_2'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'const.lexer_fun.OtherS_0'))))))),s('fun'('type.string.char','type.string.char'),'_i_0_0'))))))))),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')))),'_dst_x01x10_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')))),'const.lexer_fun.read_while_1'(s('fun'('type.string.char','bool'),'const.lexer_fun.isAlphaNumPrime_0'))),s('fun'('type.string.char','type.list.list'('type.string.char')),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x10x01x01_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'_dst_x0x1_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('type.lexer_fun.symbol','happ'(s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'const.lexer_fun.OtherS_0'),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'_dst_x0x1_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0')))))))))))))))))))))))))))))))))))).
fof('thm.lexer_fun.lexer_fun_48_prove_ltb', axiom, ![V_27a_27]: ((s('type.list.list'('type.string.char'),V_27a_27) = s('type.list.list'('type.string.char'),'const.list.NIL_0') | ?[V_27c_27, V_27str_27]: s('type.list.list'('type.string.char'),V_27a_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27c_27),s('type.list.list'('type.string.char'),V_27str_27)))) => (s('type.list.list'('type.string.char'),V_27a_27) = s('type.list.list'('type.string.char'),'const.list.NIL_0') | ?[V_27c_27, V_27str_27]: s('type.list.list'('type.string.char'),V_27a_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27c_27),s('type.list.list'('type.string.char'),V_27str_27)))))).
fof('thm.lexer_fun.next_sym_ind', axiom, ![V_27P_27]: ((p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),V_27P_27),s('type.list.list'('type.string.char'),'const.list.NIL_0')))) & ![V_27c_27, V_27str_27]: ((![V_27rest_27]: ((~ (p(s('bool','const.string.isSpace_1'(s('type.string.char',V_27c_27))))) & (~ (p(s('bool','const.string.isDigit_1'(s('type.string.char',V_27c_27))))) & (~ ((s('type.string.char',V_27c_27) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))) & (~ (s('type.list.list'('type.string.char'),V_27str_27) = s('type.list.list'('type.string.char'),'const.list.NIL_0')) & p(s('bool','const.string.isDigit_1'(s('type.string.char','const.list.HD_1'(s('type.list.list'('type.string.char'),V_27str_27))))))))) & (~ (s('type.string.char',V_27c_27) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))) & (~ (s('type.string.char',V_27c_27) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))) & (~ (p(s('bool','const.list.isPREFIX_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27c_27),s('type.list.list'('type.string.char'),V_27str_27))))))) & (~ (p(s('bool','const.list.isPREFIX_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27c_27),s('type.list.list'('type.string.char'),V_27str_27))))))) & (p(s('bool','const.list.isPREFIX_2'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27c_27),s('type.list.list'('type.string.char'),V_27str_27)))))) & s('type.option.option'('type.list.list'('type.string.char')),'const.lexer_fun.skip_comment_2'(s('type.list.list'('type.string.char'),'const.list.TL_1'(s('type.list.list'('type.string.char'),V_27str_27))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),V_27rest_27))))))))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),V_27P_27),s('type.list.list'('type.string.char'),V_27rest_27))))) & (p(s('bool','const.string.isSpace_1'(s('type.string.char',V_27c_27)))) => p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),V_27P_27),s('type.list.list'('type.string.char'),V_27str_27)))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),V_27P_27),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',V_27c_27),s('type.list.list'('type.string.char'),V_27str_27)))))))) => ![V_27v_27]: p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),V_27P_27),s('type.list.list'('type.string.char'),V_27v_27)))))).
fof('thm.lexer_fun.next_sym_def|split|0', axiom, s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'const.lexer_fun.next_sym_1'(s('type.list.list'('type.string.char'),'const.list.NIL_0'))) = s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'const.option.NONE_0')).
fof('thm.lexer_fun.next_sym_def|split|1', axiom, ![V_27str_27, V_27c_27]: ?[Vv]: ((p(s('bool',Vv)) <=> s('type.string.char',V_27c_27) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))) & ?[Vv_27]: ((p(s('bool',Vv_27)) <=> s('type.string.char',V_27c_27) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))) & ?[Vv_27_27]: ((p(s('bool',Vv_27_27)) <=> s('type.string.char',V_27c_27) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))) & ?[Vv_27_27_27]: ((p(s('bool',Vv_27_27_27)) <=> (s('type.string.char',V_27c_27) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))) & (~ (s('type.list.list'('type.string.char'),V_27str_27) = s('type.list.list'('type.string.char'),'const.list.NIL_0')) & p(s('bool','happ'(s('fun'('type.string.char','bool'),'const.string.isDigit_0'),s('type.string.char','const.list.HD_1'(s('type.list.list'('type.string.char'),V_27str_27))))))))) & s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.lexer_fun.next_sym_0'),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char',V_27c_27))),s('type.list.list'('type.string.char'),V_27str_27))))) = s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'happ'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('bool','const.string.isSpace_1'(s('type.string.char',V_27c_27))))),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.lexer_fun.next_sym_0'),s('type.list.list'('type.string.char'),V_27str_27))))),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'happ'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('bool','happ'(s('fun'('type.string.char','bool'),'const.string.isDigit_0'),s('type.string.char',V_27c_27))))),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.bool.LET_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.pair.UNCURRY_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x11_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'_dst_x0x1_2'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'_dst_x0x1_2'(s('fun'('type.integer.int','type.lexer_fun.symbol'),'const.lexer_fun.NumberS_0'),s('fun'('type.list.list'('type.string.char'),'type.integer.int'),'_dst_x0x1_2'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('fun'('type.list.list'('type.string.char'),'type.num.num'),'_dst_x0x1_2'(s('fun'('type.list.list'('type.string.char'),'type.num.num'),'const.ASCIInumbers.num_from_dec_string_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char',V_27c_27))))))))))))))))),s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')))),'const.lexer_fun.read_while_1'(s('fun'('type.string.char','bool'),'const.string.isDigit_0'))),s('type.list.list'('type.string.char'),V_27str_27))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'happ'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('bool',Vv_27_27_27))),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.bool.LET_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.pair.UNCURRY_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x11_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'_dst_x0x1_2'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'_dst_x0x1_2'(s('fun'('type.integer.int','type.lexer_fun.symbol'),'const.lexer_fun.NumberS_0'),s('fun'('type.list.list'('type.string.char'),'type.integer.int'),'_dst_x0x1_2'(s('fun'('type.integer.int','type.integer.int'),'const.integer.int_sub_1'(s('type.integer.int','happ'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('type.num.num','const.num.|48|_0'))))),s('fun'('type.list.list'('type.string.char'),'type.integer.int'),'_dst_x0x1_2'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('fun'('type.list.list'('type.string.char'),'type.num.num'),'const.ASCIInumbers.num_from_dec_string_0'))))))))))))))),s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')))),'const.lexer_fun.read_while_1'(s('fun'('type.string.char','bool'),'const.string.isDigit_0'))),s('type.list.list'('type.string.char'),V_27str_27))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'happ'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('bool',Vv_27_27))),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.bool.LET_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.pair.UNCURRY_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x11_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'_dst_x0x1_2'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'const.lexer_fun.OtherS_0'))))))))),s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')))),'const.lexer_fun.read_while_1'(s('fun'('type.string.char','bool'),'const.lexer_fun.isAlphaNumPrime_0'))),s('type.list.list'('type.string.char'),V_27str_27))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char',V_27c_27))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'happ'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('bool',Vv_27))),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.bool.LET_0'),s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.pair.UNCURRY_0'),s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x11_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'))))))),s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'const.lexer_fun.read_string_2'(s('type.list.list'('type.string.char'),V_27str_27),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'happ'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('bool','const.list.isPREFIX_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char',V_27c_27))),s('type.list.list'('type.string.char'),V_27str_27))))))),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'happ'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'))),s('type.list.list'('type.string.char'),'const.list.TL_1'(s('type.list.list'('type.string.char'),V_27str_27))))))))),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'happ'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('bool','const.list.isPREFIX_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char',V_27c_27))),s('type.list.list'('type.string.char'),V_27str_27))))))),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.bool.LET_0'),s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.pair.UNCURRY_0'),s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x11_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'_dst_x0x1_2'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('fun'('type.lexer_fun.symbol','type.lexer_fun.symbol'),'const.lexer_fun.mkCharS_0'))))))))),s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'const.lexer_fun.read_string_2'(s('type.list.list'('type.string.char'),'const.list.TL_1'(s('type.list.list'('type.string.char'),V_27str_27))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'happ'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('bool','const.list.isPREFIX_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char',V_27c_27))),s('type.list.list'('type.string.char'),V_27str_27))))))),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'const.option.option_CASE_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.lexer_fun.skip_comment_2'(s('type.list.list'('type.string.char'),'const.list.TL_1'(s('type.list.list'('type.string.char'),V_27str_27))),s('type.integer.int','happ'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('type.num.num','const.num.|48|_0'))))),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'happ'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.lexer_fun.next_sym_0'))))),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'happ'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('bool','const.lexer_fun.is_single_char_symbol_1'(s('type.string.char',V_27c_27))))),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'happ'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('type.lexer_fun.symbol','happ'(s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'const.lexer_fun.OtherS_0'),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char',V_27c_27))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'('type.string.char'),V_27str_27))))))),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'happ'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('bool','happ'(s('fun'('type.string.char','bool'),'const.lexer_fun.isSymbol_0'),s('type.string.char',V_27c_27))))),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.bool.LET_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.pair.UNCURRY_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x11_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'_dst_x0x1_2'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'const.lexer_fun.OtherS_0'))))))))),s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')))),'const.lexer_fun.read_while_1'(s('fun'('type.string.char','bool'),'const.lexer_fun.isSymbol_0'))),s('type.list.list'('type.string.char'),V_27str_27))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char',V_27c_27))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'happ'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('bool','happ'(s('fun'('type.string.char','bool'),'const.string.isAlpha_0'),s('type.string.char',V_27c_27))))),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.bool.LET_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.pair.UNCURRY_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x01x11x11_3'(s('fun'('type.list.list'('type.string.char'),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.list.list_CASE_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x11_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'_dst_x0x1_2'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'const.lexer_fun.OtherS_0'))))),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))))),'_dst_x0000x1101x0010_3'(s('fun'('fun'('type.string.char','type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.string.char','type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.bool.literal_case_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'fun'('type.string.char','type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))))),'_dst_x0000x0001x1010x1100_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x01x00x10_3'(s('fun'('type.list.list'('type.string.char'),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.list.list_CASE_0'),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'happ'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'_dst_x000x010x111x111_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'const.string.isAlpha_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'_dst_x000x100x011_3'(s('fun'('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.bool.LET_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.pair.UNCURRY_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'_dst_x000x111_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x11_2'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'const.lexer_fun.LongS_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'_dst_x0x1_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.APPEND_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.APPEND_0'),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')))),'_dst_x01x10_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')))),'const.lexer_fun.read_while_1'(s('fun'('type.string.char','bool'),'const.lexer_fun.isAlphaNumPrime_0'))),s('fun'('type.string.char','type.list.list'('type.string.char')),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'_dst_x000x010x111x001_4'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'const.lexer_fun.isSymbol_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'_dst_x000x100x011_3'(s('fun'('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.bool.LET_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'const.pair.UNCURRY_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'_dst_x000x111_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x11_2'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'const.lexer_fun.LongS_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'_dst_x0x1_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.APPEND_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.APPEND_0'),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')))),'_dst_x01x10_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')))),'const.lexer_fun.read_while_1'(s('fun'('type.string.char','bool'),'const.lexer_fun.isSymbol_0'))),s('fun'('type.string.char','type.list.list'('type.string.char')),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'_dst_x0x1_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'))))))))))),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'_dst_x00x11_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'_dst_x0x1_2'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'const.lexer_fun.OtherS_0'))))))),s('fun'('type.string.char','type.string.char'),'_i_0_0'))))))))),s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'happ'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')))),'const.lexer_fun.read_while_1'(s('fun'('type.string.char','bool'),'const.lexer_fun.isAlphaNumPrime_0'))),s('type.list.list'('type.string.char'),V_27str_27))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char',V_27c_27))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'happ'(s('fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))))),'happ'(s('fun'('bool','fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))))),'const.bool.COND_0'),s('bool',Vv))),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'happ'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('type.lexer_fun.symbol','happ'(s('fun'('type.list.list'('type.string.char'),'type.lexer_fun.symbol'),'const.lexer_fun.OtherS_0'),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'('type.string.char'),V_27str_27))))))),s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'happ'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'happ'(s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')))),'const.pair.,_0'),s('type.lexer_fun.symbol','const.lexer_fun.ErrorS_0'))),s('type.list.list'('type.string.char'),V_27str_27)))))))))))))))))))))))))))))))))).
fof('thm.lexer_fun.lexer_fun_5|49|_prove_ltb', axiom, ![V_27A_27,V_27B_27,V_27C_27,V_27D_27]: ![V_27z_27, V_27f_27, V_27a_27, V_27P_27]: (s(V_27A_27,'const.bool.LET_2'(s('fun'('type.pair.prod'(V_27B_27,V_27C_27),V_27A_27),'const.pair.UNCURRY_1'(s('fun'(V_27B_27,'fun'(V_27C_27,V_27A_27)),V_27f_27))),s('type.pair.prod'(V_27B_27,V_27C_27),'happ'(s('fun'(V_27D_27,'type.pair.prod'(V_27B_27,V_27C_27)),V_27z_27),s(V_27D_27,V_27a_27))))) = s(V_27A_27,'happ'(s('fun'(V_27D_27,V_27A_27),V_27P_27),s(V_27D_27,V_27a_27))) <=> p(s('bool','const.bool.LET_2'(s('fun'('type.pair.prod'(V_27B_27,V_27C_27),'bool'),'const.pair.UNCURRY_1'(s('fun'(V_27B_27,'fun'(V_27C_27,'bool')),'_dst_x00x11x00_3'(s('fun'(V_27A_27,'fun'(V_27A_27,'bool')),'=_0'),s('fun'(V_27B_27,'fun'(V_27C_27,V_27A_27)),V_27f_27),s(V_27A_27,'happ'(s('fun'(V_27D_27,V_27A_27),V_27P_27),s(V_27D_27,V_27a_27))))))),s('type.pair.prod'(V_27B_27,V_27C_27),'happ'(s('fun'(V_27D_27,'type.pair.prod'(V_27B_27,V_27C_27)),V_27z_27),s(V_27D_27,V_27a_27)))))))).
fof('thm.lexer_fun.lexer_fun_52_prove_ltb', axiom, ![V_27A_27,V_27B_27,V_27C_27]: ![V_27z_27, V_27f_27, V_27a_27, V_27P_27]: ((p(s('bool','const.bool.LET_2'(s('fun'('type.pair.prod'(V_27A_27,V_27B_27),'bool'),'const.pair.UNCURRY_1'(s('fun'(V_27A_27,'fun'(V_27B_27,'bool')),V_27f_27))),s('type.pair.prod'(V_27A_27,V_27B_27),'happ'(s('fun'(V_27C_27,'type.pair.prod'(V_27A_27,V_27B_27)),V_27z_27),s(V_27C_27,V_27a_27)))))) => p(s('bool','happ'(s('fun'(V_27C_27,'bool'),V_27P_27),s(V_27C_27,V_27a_27))))) <=> p(s('bool','const.bool.LET_2'(s('fun'('type.pair.prod'(V_27A_27,V_27B_27),'bool'),'const.pair.UNCURRY_1'(s('fun'(V_27A_27,'fun'(V_27B_27,'bool')),'_dst_x00x11x00_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'(V_27A_27,'fun'(V_27B_27,'bool')),V_27f_27),s('bool','happ'(s('fun'(V_27C_27,'bool'),V_27P_27),s(V_27C_27,V_27a_27))))))),s('type.pair.prod'(V_27A_27,V_27B_27),'happ'(s('fun'(V_27C_27,'type.pair.prod'(V_27A_27,V_27B_27)),V_27z_27),s(V_27C_27,V_27a_27)))))))).
fof('thm.lexer_fun.next_sym_LESS', axiom, ![V_27s_27, V_27rest_27, V_27input_27]: (s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'const.lexer_fun.next_sym_1'(s('type.list.list'('type.string.char'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'const.option.SOME_1'(s('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'const.pair.,_2'(s('type.lexer_fun.symbol',V_27s_27),s('type.list.list'('type.string.char'),V_27rest_27))))) => p(s('bool','const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),V_27rest_27))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),V_27input_27)))))))).
fof('thm.lexer_fun.processIdent_def', axiom, ![V_27s_27]: s('type.tokens.token','const.lexer_fun.processIdent_1'(s('type.list.list'('type.string.char'),V_27s_27))) = s('type.tokens.token','const.list.list_CASE_3'(s('type.list.list'('type.string.char'),V_27s_27),s('type.tokens.token','const.tokens.LexErrorT_0'),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.tokens.token')),'_dst_x00x10x11x11_4'(s('fun'('bool','fun'('type.tokens.token','fun'('type.tokens.token','type.tokens.token'))),'const.bool.COND_0'),s('fun'('type.string.char','bool'),'const.string.isAlpha_0'),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.tokens.token')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.AlphaT_0'),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'))),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.tokens.token')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.SymbolT_0'),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0')))))))).
fof('thm.lexer_fun.get_token_def', axiom, ![V_27s_27]: ?[Vv]: ((p(s('bool',Vv)) <=> (~ (s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.NIL_0')) & s('type.string.char','const.list.HD_1'(s('type.list.list'('type.string.char'),V_27s_27))) = s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))) & ?[Vv_27]: ((p(s('bool',Vv_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) & ?[Vv_27_27]: ((p(s('bool',Vv_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))) & ?[Vv_27_27_27]: ((p(s('bool',Vv_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))) & ?[Vv_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))) & ?[Vv_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))) & ?[Vv_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))) & ?[Vv_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))))) & ?[Vv_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))) & ?[Vv_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))) & ?[Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27)) <=> s('type.list.list'('type.string.char'),V_27s_27) = s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))) & s('type.tokens.token','const.lexer_fun.get_token_1'(s('type.list.list'('type.string.char'),V_27s_27))) = s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.HashT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.LparT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.RparT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.StarT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.CommaT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.ArrowT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.DotsT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.ColonT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.SealT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.SemicolonT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.EqualsT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.DarrowT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.LbrackT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.RbrackT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.UnderbarT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.LbraceT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.RbraceT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.BarT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.AndT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.AndalsoT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.AsT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.CaseT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.DatatypeT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.ElseT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.EndT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.EqtypeT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.ExceptionT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.FnT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.FunT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.HandleT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.IfT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.InT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.IncludeT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.LetT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.LocalT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.OfT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.OpT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.OpenT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.OrelseT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.RaiseT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.RecT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.SharingT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.SigT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.SignatureT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.StructT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27_27),s('type.tokens.token','const.tokens.StructureT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27),s('type.tokens.token','const.tokens.ThenT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27_27),s('type.tokens.token','const.tokens.TypeT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27_27),s('type.tokens.token','const.tokens.ValT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27_27),s('type.tokens.token','const.tokens.WhereT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27_27),s('type.tokens.token','const.tokens.WithT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv_27),s('type.tokens.token','const.tokens.WithtypeT_0'),s('type.tokens.token','const.bool.COND_3'(s('bool',Vv),s('type.tokens.token','const.tokens.TyvarT_1'(s('type.list.list'('type.string.char'),V_27s_27))),s('type.tokens.token','const.lexer_fun.processIdent_1'(s('type.list.list'('type.string.char'),V_27s_27))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).
fof('ARITY_0_1_const.lexer_fun.get_token', axiom, ![VV0]: s('type.tokens.token','happ'(s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.lexer_fun.get_token_0'),s('type.list.list'('type.string.char'),VV0))) = s('type.tokens.token','const.lexer_fun.get_token_1'(s('type.list.list'('type.string.char'),VV0)))).
fof('thm.lexer_fun.token_of_sym_def', axiom, ![V_27s_27]: s('type.tokens.token','const.lexer_fun.token_of_sym_1'(s('type.lexer_fun.symbol',V_27s_27))) = s('type.tokens.token','const.lexer_fun.symbol_CASE_7'(s('type.lexer_fun.symbol',V_27s_27),s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.StringT_0'),s('fun'('type.string.char','type.tokens.token'),'const.tokens.CharT_0'),s('fun'('type.integer.int','type.tokens.token'),'const.tokens.IntT_0'),s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'_dst_x0x1_2'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.tokens.token'),'const.bool.LET_1'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.tokens.token'),'const.pair.UNCURRY_1'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.tokens.token')),'_dst_x00x10x01_3'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.tokens.token')),'const.tokens.LongidT_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_dst_x1x0x0_3'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'fun'('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'type.list.list'('type.string.char')))),'const.list.list_CASE_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'),s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'_dst_x0_1'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'))))))))))),s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.rich_list.SPLITP_1'(s('fun'('type.string.char','bool'),'_dst_x1x0_2'(s('fun'('type.string.char','fun'('type.string.char','bool')),'=_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))),s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.lexer_fun.get_token_0'),s('type.tokens.token','const.tokens.LexErrorT_0')))).
fof('ARITY_0_1_const.lexer_fun.token_of_sym', axiom, ![VV0]: s('type.tokens.token','happ'(s('fun'('type.lexer_fun.symbol','type.tokens.token'),'const.lexer_fun.token_of_sym_0'),s('type.lexer_fun.symbol',VV0))) = s('type.tokens.token','const.lexer_fun.token_of_sym_1'(s('type.lexer_fun.symbol',VV0)))).
fof('thm.lexer_fun.next_token_def', axiom, ![V_27input_27]: s('type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))),'const.lexer_fun.next_token_1'(s('type.list.list'('type.string.char'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))),'const.option.option_CASE_3'(s('type.option.option'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char'))),'const.lexer_fun.next_sym_1'(s('type.list.list'('type.string.char'),V_27input_27))),s('type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))),'const.option.NONE_0'),s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')))),'_dst_x1x0_2'(s('fun'('type.pair.prod'('type.lexer_fun.symbol','type.list.list'('type.string.char')),'fun'('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))))),'type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))))),'const.pair.pair_CASE_0'),s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))))),'_dst_x00x11_2'(s('fun'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')))),'const.option.SOME_0'),s('fun'('type.lexer_fun.symbol','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')))),'_dst_x0x1_2'(s('fun'('type.tokens.token','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')))),'const.pair.,_0'),s('fun'('type.lexer_fun.symbol','type.tokens.token'),'const.lexer_fun.token_of_sym_0')))))))))).
fof('thm.lexer_fun.next_token_LESS', axiom, ![V_27s_27, V_27rest_27, V_27input_27]: (s('type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))),'const.lexer_fun.next_token_1'(s('type.list.list'('type.string.char'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))),'const.option.SOME_1'(s('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),'const.pair.,_2'(s('type.tokens.token',V_27s_27),s('type.list.list'('type.string.char'),V_27rest_27))))) => p(s('bool','const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),V_27rest_27))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),V_27input_27)))))))).
fof('ARITY_0_1_const.lexer_fun.lexer_fun', axiom, ![VV0]: s('type.list.list'('type.tokens.token'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.tokens.token')),'const.lexer_fun.lexer_fun_0'),s('type.list.list'('type.string.char'),VV0))) = s('type.list.list'('type.tokens.token'),'const.lexer_fun.lexer_fun_1'(s('type.list.list'('type.string.char'),VV0)))).
fof('ARITY_0_1_const.lexer_fun.next_token', axiom, ![VV0]: s('type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))),'happ'(s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')))),'const.lexer_fun.next_token_0'),s('type.list.list'('type.string.char'),VV0))) = s('type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))),'const.lexer_fun.next_token_1'(s('type.list.list'('type.string.char'),VV0)))).
fof('thm.lexer_fun.lexer_fun_primitive_def', axiom, s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.tokens.token')),'const.lexer_fun.lexer_fun_0') = s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.tokens.token')),'const.relation.WFREC_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'const.min.@_1'(s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'bool'),'const.relation.WF_0'),s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.string.char'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'fun'('type.list.list'('type.string.char'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),'bool'),'bool'),'!_0'),s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'fun'('type.list.list'('type.string.char'),'fun'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),'bool'))),'_dst_x000x111_2'(s('fun'('fun'('type.tokens.token','bool'),'bool'),'!_0'),s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'fun'('type.list.list'('type.string.char'),'fun'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),'fun'('type.tokens.token','bool')))),'_dst_x0000x1111_2'(s('fun'('fun'('type.list.list'('type.string.char'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'fun'('type.list.list'('type.string.char'),'fun'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),'fun'('type.tokens.token','fun'('type.list.list'('type.string.char'),'bool'))))),'_dst_x00000x01111x11001_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),'fun'('type.tokens.token','fun'('type.list.list'('type.string.char'),'bool')))),'_dst_x0000x1100x0111_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),'bool')),'_dst_x00x10x01_3'(s('fun'('type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))),'fun'('type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))),'bool')),'=_0'),s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')))),'const.lexer_fun.next_token_0'),s('fun'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),'type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')))),'const.option.SOME_0'))),s('fun'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),'fun'('type.tokens.token','fun'('type.list.list'('type.string.char'),'bool'))),'_dst_x000x100x011_3'(s('fun'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),'fun'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),'bool')),'=_0'),s('fun'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),'type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))),'_i_0_0'),s('fun'('type.tokens.token','fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')))),'const.pair.,_0'))))),s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool'))),'_i_0_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'))))))))))))))))),s('fun'('fun'('type.list.list'('type.string.char'),'type.list.list'('type.tokens.token')),'fun'('type.list.list'('type.string.char'),'type.list.list'('type.tokens.token'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'const.combin.I_0'),s('fun'('fun'('type.list.list'('type.string.char'),'type.list.list'('type.tokens.token')),'fun'('type.list.list'('type.string.char'),'type.list.list'('type.tokens.token'))),'_dst_x00x01x00x10_4'(s('fun'('type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))),'fun'('type.list.list'('type.tokens.token'),'fun'('fun'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),'type.list.list'('type.tokens.token')),'type.list.list'('type.tokens.token')))),'const.option.option_CASE_0'),s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')))),'const.lexer_fun.next_token_0'),s('type.list.list'('type.tokens.token'),'const.list.NIL_0'),s('fun'('fun'('type.list.list'('type.string.char'),'type.list.list'('type.tokens.token')),'fun'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),'type.list.list'('type.tokens.token'))),'_dst_x01x10_2'(s('fun'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),'fun'('fun'('type.tokens.token','fun'('type.list.list'('type.string.char'),'type.list.list'('type.tokens.token'))),'type.list.list'('type.tokens.token'))),'const.pair.pair_CASE_0'),s('fun'('fun'('type.list.list'('type.string.char'),'type.list.list'('type.tokens.token')),'fun'('type.tokens.token','fun'('type.list.list'('type.string.char'),'type.list.list'('type.tokens.token')))),'_dst_x000x010x101_3'(s('fun'('type.tokens.token','fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'const.list.CONS_0'),s('fun'('type.tokens.token','type.tokens.token'),'_i_0_0'),s('fun'('fun'('type.list.list'('type.string.char'),'type.list.list'('type.tokens.token')),'fun'('type.list.list'('type.string.char'),'type.list.list'('type.tokens.token'))),'_i_0_0')))))))))))).
fof('thm.lexer_fun.lexer_fun_6|48|_prove_ltb', axiom, ![V_27a_27]: (?[V_27input_27]: s('type.list.list'('type.string.char'),V_27a_27) = s('type.list.list'('type.string.char'),V_27input_27) => ?[V_27input_27]: s('type.list.list'('type.string.char'),V_27a_27) = s('type.list.list'('type.string.char'),V_27input_27))).
fof('thm.lexer_fun.lexer_fun_ind', axiom, ![V_27P_27]: (![V_27input_27]: (![V_27v_27, V_27token_27, V_27rest__of__input_27]: ((s('type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))),'const.lexer_fun.next_token_1'(s('type.list.list'('type.string.char'),V_27input_27))) = s('type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))),'const.option.SOME_1'(s('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),V_27v_27))) & s('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),V_27v_27) = s('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),'const.pair.,_2'(s('type.tokens.token',V_27token_27),s('type.list.list'('type.string.char'),V_27rest__of__input_27)))) => p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),V_27P_27),s('type.list.list'('type.string.char'),V_27rest__of__input_27))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),V_27P_27),s('type.list.list'('type.string.char'),V_27input_27))))) => ![V_27v_27]: p(s('bool','happ'(s('fun'('type.list.list'('type.string.char'),'bool'),V_27P_27),s('type.list.list'('type.string.char'),V_27v_27)))))).
fof('thm.lexer_fun.lexer_fun_def', axiom, ![V_27input_27]: s('type.list.list'('type.tokens.token'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.tokens.token')),'const.lexer_fun.lexer_fun_0'),s('type.list.list'('type.string.char'),V_27input_27))) = s('type.list.list'('type.tokens.token'),'const.option.option_CASE_3'(s('type.option.option'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char'))),'const.lexer_fun.next_token_1'(s('type.list.list'('type.string.char'),V_27input_27))),s('type.list.list'('type.tokens.token'),'const.list.NIL_0'),s('fun'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),'type.list.list'('type.tokens.token')),'_dst_x1x0_2'(s('fun'('type.pair.prod'('type.tokens.token','type.list.list'('type.string.char')),'fun'('fun'('type.tokens.token','fun'('type.list.list'('type.string.char'),'type.list.list'('type.tokens.token'))),'type.list.list'('type.tokens.token'))),'const.pair.pair_CASE_0'),s('fun'('type.tokens.token','fun'('type.list.list'('type.string.char'),'type.list.list'('type.tokens.token'))),'_dst_x00x10x01_3'(s('fun'('type.tokens.token','fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'const.list.CONS_0'),s('fun'('type.tokens.token','type.tokens.token'),'_i_0_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.tokens.token')),'const.lexer_fun.lexer_fun_0')))))))).
fof('thm.lexer_fun.toplevel_semi_dex_def|split|0', axiom, ![V_27i_27, V_27d_27]: s('type.option.option'('type.num.num'),'const.lexer_fun.toplevel_semi_dex_3'(s('type.num.num',V_27i_27),s('type.num.num',V_27d_27),s('type.list.list'('type.tokens.token'),'const.list.NIL_0'))) = s('type.option.option'('type.num.num'),'const.option.NONE_0')).
fof('thm.lexer_fun.toplevel_semi_dex_def|split|1', axiom, ![V_27i_27, V_27d_27, V_27h_27, V_27t_27]: ?[Vv]: ((p(s('bool',Vv)) <=> s('type.tokens.token',V_27h_27) = s('type.tokens.token','const.tokens.RparT_0')) & ?[Vv_27]: ((p(s('bool',Vv_27)) <=> s('type.tokens.token',V_27h_27) = s('type.tokens.token','const.tokens.EndT_0')) & ?[Vv_27_27]: ((p(s('bool',Vv_27_27)) <=> s('type.tokens.token',V_27h_27) = s('type.tokens.token','const.tokens.LparT_0')) & ?[Vv_27_27_27]: ((p(s('bool',Vv_27_27_27)) <=> s('type.tokens.token',V_27h_27) = s('type.tokens.token','const.tokens.SigT_0')) & ?[Vv_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27)) <=> s('type.tokens.token',V_27h_27) = s('type.tokens.token','const.tokens.StructT_0')) & ?[Vv_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27)) <=> s('type.tokens.token',V_27h_27) = s('type.tokens.token','const.tokens.LetT_0')) & ?[Vv_27_27_27_27_27_27]: ((p(s('bool',Vv_27_27_27_27_27_27)) <=> (s('type.tokens.token',V_27h_27) = s('type.tokens.token','const.tokens.SemicolonT_0') & s('type.num.num',V_27d_27) = s('type.num.num','const.num.|48|_0'))) & s('type.option.option'('type.num.num'),'const.lexer_fun.toplevel_semi_dex_3'(s('type.num.num',V_27i_27),s('type.num.num',V_27d_27),s('type.list.list'('type.tokens.token'),'const.list.CONS_2'(s('type.tokens.token',V_27h_27),s('type.list.list'('type.tokens.token'),V_27t_27))))) = s('type.option.option'('type.num.num'),'const.bool.COND_3'(s('bool',Vv_27_27_27_27_27_27),s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27i_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.option.option'('type.num.num'),'const.bool.COND_3'(s('bool',Vv_27_27_27_27_27),s('type.option.option'('type.num.num'),'const.lexer_fun.toplevel_semi_dex_3'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27i_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.tokens.token'),V_27t_27))),s('type.option.option'('type.num.num'),'const.bool.COND_3'(s('bool',Vv_27_27_27_27),s('type.option.option'('type.num.num'),'const.lexer_fun.toplevel_semi_dex_3'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27i_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.tokens.token'),V_27t_27))),s('type.option.option'('type.num.num'),'const.bool.COND_3'(s('bool',Vv_27_27_27),s('type.option.option'('type.num.num'),'const.lexer_fun.toplevel_semi_dex_3'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27i_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.tokens.token'),V_27t_27))),s('type.option.option'('type.num.num'),'const.bool.COND_3'(s('bool',Vv_27_27),s('type.option.option'('type.num.num'),'const.lexer_fun.toplevel_semi_dex_3'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27i_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.tokens.token'),V_27t_27))),s('type.option.option'('type.num.num'),'const.bool.COND_3'(s('bool',Vv_27),s('type.option.option'('type.num.num'),'const.lexer_fun.toplevel_semi_dex_3'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27i_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.tokens.token'),V_27t_27))),s('type.option.option'('type.num.num'),'const.bool.COND_3'(s('bool',Vv),s('type.option.option'('type.num.num'),'const.lexer_fun.toplevel_semi_dex_3'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27i_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27d_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.tokens.token'),V_27t_27))),s('type.option.option'('type.num.num'),'const.lexer_fun.toplevel_semi_dex_3'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27i_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',V_27d_27),s('type.list.list'('type.tokens.token'),V_27t_27))))))))))))))))))))))))).
fof('thm.lexer_fun.lexer_fun_64_prove_ltb', axiom, ![V_27i_27, V_27d_27, V_27toks_27, V_27j_27]: (s('type.option.option'('type.num.num'),'const.lexer_fun.toplevel_semi_dex_3'(s('type.num.num',V_27i_27),s('type.num.num',V_27d_27),s('type.list.list'('type.tokens.token'),V_27toks_27))) = s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',V_27j_27))) => p(s('bool','const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',V_27j_27)))))).
fof('ARITY_2_3_const.lexer_fun.toplevel_semi_dex', axiom, ![VV0, VV1, VV2]: s('type.option.option'('type.num.num'),'happ'(s('fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.num.num')),'const.lexer_fun.toplevel_semi_dex_2'(s('type.num.num',VV0),s('type.num.num',VV1))),s('type.list.list'('type.tokens.token'),VV2))) = s('type.option.option'('type.num.num'),'const.lexer_fun.toplevel_semi_dex_3'(s('type.num.num',VV0),s('type.num.num',VV1),s('type.list.list'('type.tokens.token'),VV2)))).
fof('_dstsel_0_x011x010_ax', axiom, ![VA,VA4,VA1,VA3,VA2]: ![V__0, V__1, V__z]: s('fun'(VA3,'fun'(VA4,VA)),'happ'(s('fun'('fun'(VA1,'fun'(VA2,VA)),'fun'(VA3,'fun'(VA4,VA))),'_dstsel_0_x011x010_2'(s('fun'(VA3,'fun'(VA4,VA1)),V__0),s('fun'(VA3,VA2),V__1))),s('fun'(VA1,'fun'(VA2,VA)),V__z))) = s('fun'(VA3,'fun'(VA4,VA)),'_dst_x00x11x10_3'(s('fun'(VA1,'fun'(VA2,VA)),V__z),s('fun'(VA3,'fun'(VA4,VA1)),V__0),s('fun'(VA3,VA2),V__1)))).
fof('thm.lexer_fun.split_top_level_semi_primitive_def', axiom, s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.list.list'('type.tokens.token'))),'const.lexer_fun.split_top_level_semi_0') = s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.list.list'('type.tokens.token'))),'const.relation.WFREC_2'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'bool')),'const.min.@_1'(s('fun'('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'bool')),'bool'),'const.relation.WF_0'),s('fun'('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.tokens.token'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'bool')),'fun'('type.list.list'('type.tokens.token'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.num.num','bool'),'bool'),'!_0'),s('fun'('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'bool')),'fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','bool')),'_dst_x00x10x01_3'(s('fun'('type.option.option'('type.num.num'),'fun'('type.option.option'('type.num.num'),'bool')),'=_0'),s('fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.num.num')),'const.lexer_fun.toplevel_semi_dex_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))),s('fun'('type.num.num','type.option.option'('type.num.num')),'const.option.SOME_0'))),s('fun'('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.tokens.token'),'bool')),'fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','bool'))),'_dstsel_0_x011x010_2'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','type.list.list'('type.tokens.token'))),'_dst_x01x10_2'(s('fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'const.list.DROP_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'))),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'))))))))))))),s('fun'('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.list.list'('type.tokens.token'))),'fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.list.list'('type.tokens.token')))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.list.list'('type.tokens.token')),'type.list.list'('type.list.list'('type.tokens.token'))),'const.combin.I_0'),s('fun'('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.list.list'('type.tokens.token'))),'fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.list.list'('type.tokens.token')))),'_dst_x00x01x00x11_4'(s('fun'('type.option.option'('type.num.num'),'fun'('type.list.list'('type.list.list'('type.tokens.token')),'fun'('fun'('type.num.num','type.list.list'('type.list.list'('type.tokens.token'))),'type.list.list'('type.list.list'('type.tokens.token'))))),'const.option.option_CASE_0'),s('fun'('type.list.list'('type.tokens.token'),'type.option.option'('type.num.num')),'const.lexer_fun.toplevel_semi_dex_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.list.list'('type.tokens.token')),'const.list.NIL_0'),s('fun'('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.list.list'('type.tokens.token'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','type.list.list'('type.list.list'('type.tokens.token'))))),'_dst_x000x011x111_3'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.list.list'('type.tokens.token')),'type.list.list'('type.list.list'('type.tokens.token')))),'const.list.CONS_0'),s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','type.list.list'('type.tokens.token'))),'_dst_x01x10_2'(s('fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'const.list.TAKE_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0'))),s('fun'('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.list.list'('type.tokens.token'))),'fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','type.list.list'('type.list.list'('type.tokens.token'))))),'_dstsel_0_x011_1'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.num.num','type.list.list'('type.tokens.token'))),'_dst_x01x10_2'(s('fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'const.list.DROP_0'),s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token')),'_i_0_0')))))))))))))).
fof('thm.lexer_fun.lexer_fun_66_prove_ltb', axiom, ![V_27a_27]: (?[V_27toks_27]: s('type.list.list'('type.tokens.token'),V_27a_27) = s('type.list.list'('type.tokens.token'),V_27toks_27) => ?[V_27toks_27]: s('type.list.list'('type.tokens.token'),V_27a_27) = s('type.list.list'('type.tokens.token'),V_27toks_27))).
fof('thm.lexer_fun.split_top_level_semi_ind', axiom, ![V_27P_27]: (![V_27toks_27]: (![V_27i_27]: (s('type.option.option'('type.num.num'),'const.lexer_fun.toplevel_semi_dex_3'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))) = s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',V_27i_27))) => p(s('bool','happ'(s('fun'('type.list.list'('type.tokens.token'),'bool'),V_27P_27),s('type.list.list'('type.tokens.token'),'const.list.DROP_2'(s('type.num.num',V_27i_27),s('type.list.list'('type.tokens.token'),V_27toks_27))))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.tokens.token'),'bool'),V_27P_27),s('type.list.list'('type.tokens.token'),V_27toks_27))))) => ![V_27v_27]: p(s('bool','happ'(s('fun'('type.list.list'('type.tokens.token'),'bool'),V_27P_27),s('type.list.list'('type.tokens.token'),V_27v_27)))))).
fof('thm.lexer_fun.split_top_level_semi_def', axiom, ![V_27toks_27]: s('type.list.list'('type.list.list'('type.tokens.token')),'happ'(s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.list.list'('type.tokens.token'))),'const.lexer_fun.split_top_level_semi_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))) = s('type.list.list'('type.list.list'('type.tokens.token')),'const.option.option_CASE_3'(s('type.option.option'('type.num.num'),'const.lexer_fun.toplevel_semi_dex_3'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))),s('type.list.list'('type.list.list'('type.tokens.token')),'const.list.NIL_0'),s('fun'('type.num.num','type.list.list'('type.list.list'('type.tokens.token'))),'_dst_x0x1x1_3'(s('fun'('type.list.list'('type.tokens.token'),'fun'('type.list.list'('type.list.list'('type.tokens.token')),'type.list.list'('type.list.list'('type.tokens.token')))),'const.list.CONS_0'),s('fun'('type.num.num','type.list.list'('type.tokens.token')),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'const.list.TAKE_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))),s('fun'('type.num.num','type.list.list'('type.list.list'('type.tokens.token'))),'_dst_x0x1_2'(s('fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.list.list'('type.tokens.token'))),'const.lexer_fun.split_top_level_semi_0'),s('fun'('type.num.num','type.list.list'('type.tokens.token')),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.list.list'('type.tokens.token'),'type.list.list'('type.tokens.token'))),'const.list.DROP_0'),s('type.list.list'('type.tokens.token'),V_27toks_27)))))))))).
