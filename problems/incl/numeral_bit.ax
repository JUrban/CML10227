fof('thm.numeral_bit.numeral_bit_|48|_prove_ltb|split|0', axiom, ![V_27n_27]: s('type.num.num','const.bit.MOD_2EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',V_27n_27))) = s('type.num.num','const.arithmetic.ZERO_0')).
fof('thm.numeral_bit.numeral_bit_|48|_prove_ltb|split|1', axiom, ![V_27x_27]: s('type.num.num','const.bit.MOD_2EXP_2'(s('type.num.num',V_27x_27),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.ZERO_0')).
fof('thm.numeral_bit.numeral_bit_|48|_prove_ltb|split|2', axiom, ![V_27x_27, V_27n_27]: s('type.num.num','const.bit.MOD_2EXP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27x_27))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.bit.MOD_2EXP_2'(s('type.num.num',V_27x_27),s('type.num.num',V_27n_27)))))).
fof('thm.numeral_bit.numeral_bit_|48|_prove_ltb|split|3', axiom, ![V_27x_27, V_27n_27]: s('type.num.num','const.bit.MOD_2EXP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27x_27))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',V_27n_27))))) = s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.bit.MOD_2EXP_2'(s('type.num.num',V_27x_27),s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27)))))))).
fof('ARITY_0_2_const.bit.MOD_2EXP', axiom, ![VV0, VV1]: s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'happ'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.bit.MOD_2EXP_0'),s('type.num.num',VV0))),s('type.num.num',VV1))) = s('type.num.num','const.bit.MOD_2EXP_2'(s('type.num.num',VV0),s('type.num.num',VV1)))).
fof('ARITY_0_2_const.numeral_bit.iMOD_2EXP', axiom, ![VV0, VV1]: s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'happ'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.numeral_bit.iMOD_2EXP_0'),s('type.num.num',VV0))),s('type.num.num',VV1))) = s('type.num.num','const.numeral_bit.iMOD_2EXP_2'(s('type.num.num',VV0),s('type.num.num',VV1)))).
fof('thm.numeral_bit.iMOD_2EXP', axiom, s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.numeral_bit.iMOD_2EXP_0') = s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.bit.MOD_2EXP_0')).
fof('thm.numeral_bit.numeral_imod_2exp|split|0', axiom, ![V_27n_27]: s('type.num.num','const.numeral_bit.iMOD_2EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',V_27n_27))) = s('type.num.num','const.arithmetic.ZERO_0')).
fof('thm.numeral_bit.numeral_imod_2exp|split|1', axiom, ![V_27x_27]: s('type.num.num','const.numeral_bit.iMOD_2EXP_2'(s('type.num.num',V_27x_27),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.ZERO_0')).
fof('thm.numeral_bit.numeral_imod_2exp|split|2', axiom, ![V_27x_27, V_27n_27]: s('type.num.num','const.numeral_bit.iMOD_2EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27x_27))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral_bit.iMOD_2EXP_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27x_27))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',V_27n_27)))))).
fof('thm.numeral_bit.numeral_imod_2exp|split|3', axiom, ![V_27x_27, V_27n_27]: s('type.num.num','const.numeral_bit.iMOD_2EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',V_27x_27))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral_bit.iMOD_2EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27x_27))))),s('type.num.num',V_27n_27)))))).
fof('thm.numeral_bit.numeral_imod_2exp|split|4', axiom, ![V_27x_27, V_27n_27]: s('type.num.num','const.numeral_bit.iMOD_2EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27x_27))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',V_27n_27))))) = s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.numeral_bit.iMOD_2EXP_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27x_27))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27)))))))).
fof('thm.numeral_bit.numeral_imod_2exp|split|5', axiom, ![V_27x_27, V_27n_27]: s('type.num.num','const.numeral_bit.iMOD_2EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',V_27x_27))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',V_27n_27))))) = s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.numeral_bit.iMOD_2EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27x_27))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27)))))))).
fof('thm.numeral_bit.MOD_2EXP|split|0', axiom, ![V_27x_27]: s('type.num.num','const.bit.MOD_2EXP_2'(s('type.num.num',V_27x_27),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.|48|_0')).
fof('thm.numeral_bit.MOD_2EXP|split|1', axiom, ![V_27x_27, V_27n_27]: s('type.num.num','const.bit.MOD_2EXP_2'(s('type.num.num',V_27x_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27n_27))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral_bit.iMOD_2EXP_2'(s('type.num.num',V_27x_27),s('type.num.num',V_27n_27)))))).
fof('thm.numeral_bit.DIV_2EXP', axiom, ![V_27n_27, V_27x_27]: s('type.num.num','const.bit.DIV_2EXP_2'(s('type.num.num',V_27n_27),s('type.num.num',V_27x_27))) = s('type.num.num','const.arithmetic.FUNPOW_3'(s('fun'('type.num.num','type.num.num'),'const.arithmetic.DIV2_0'),s('type.num.num',V_27n_27),s('type.num.num',V_27x_27)))).
fof('thm.numeral_bit.numeral_mod2|split|0', axiom, s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.num.|48|_0')).
fof('thm.numeral_bit.numeral_mod2|split|1', axiom, ![V_27n_27]: s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))).
fof('thm.numeral_bit.numeral_mod2|split|2', axiom, ![V_27n_27]: s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',V_27n_27))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.num.|48|_0')).
fof('thm.numeral_bit.iDUB_NUMERAL', axiom, ![V_27i_27]: s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27i_27))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',V_27i_27)))))).
fof('thm.numeral_bit.BIT_REV_def|split|0', axiom, ![V_27x_27, V_27y_27]: s('type.num.num','const.numeral_bit.BIT_REV_3'(s('type.num.num','const.num.|48|_0'),s('type.num.num',V_27x_27),s('type.num.num',V_27y_27))) = s('type.num.num',V_27y_27)).
fof('thm.numeral_bit.BIT_REV_def|split|1', axiom, ![V_27n_27, V_27x_27, V_27y_27]: s('type.num.num','const.numeral_bit.BIT_REV_3'(s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27))),s('type.num.num',V_27x_27),s('type.num.num',V_27y_27))) = s('type.num.num','const.numeral_bit.BIT_REV_3'(s('type.num.num',V_27n_27),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',V_27x_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',V_27y_27))),s('type.num.num','const.bit.SBIT_2'(s('bool','const.arithmetic.ODD_1'(s('type.num.num',V_27x_27))),s('type.num.num','const.num.|48|_0')))))))).
fof('ARITY_0_2_const.bit.SBIT', axiom, ![VV0, VV1]: s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'happ'(s('fun'('bool','fun'('type.num.num','type.num.num')),'const.bit.SBIT_0'),s('bool',VV0))),s('type.num.num',VV1))) = s('type.num.num','const.bit.SBIT_2'(s('bool',VV0),s('type.num.num',VV1)))).
fof('ARITY_0_2_const.arithmetic.DIV', axiom, ![VV0, VV1]: s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'happ'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.DIV_0'),s('type.num.num',VV0))),s('type.num.num',VV1))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',VV0),s('type.num.num',VV1)))).
fof('thm.numeral_bit.numeral_bit_8_prove_ltb', axiom, ![V_27n_27, V_27x_27, V_27y_27]: s('type.pair.prod'('type.num.num','type.num.num'),'const.arithmetic.FUNPOW_3'(s('fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),'const.pair.UNCURRY_1'(s('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'_dst_x00x10x11_3'(s('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_0'),s('fun'('type.num.num','type.num.num'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.DIV_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'_dst_x00x01x10_3'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('fun'('type.num.num','type.num.num'),'const.arithmetic.*_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.num.num','type.num.num'),'_dst_x0x1x0_3'(s('fun'('bool','fun'('type.num.num','type.num.num')),'const.bit.SBIT_0'),s('fun'('type.num.num','bool'),'const.bit.BIT_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27))),s('type.pair.prod'('type.num.num','type.num.num'),'happ'(s('fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'happ'(s('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_0'),s('type.num.num',V_27x_27))),s('type.num.num',V_27y_27))))) = s('type.pair.prod'('type.num.num','type.num.num'),'happ'(s('fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'happ'(s('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_0'),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'happ'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.DIV_0'),s('type.num.num',V_27x_27))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27))))))))),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'happ'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.arithmetic.*_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.arithmetic.FUNPOW_3'(s('fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),'const.pair.UNCURRY_1'(s('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'_dst_x00x10x11_3'(s('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_0'),s('fun'('type.num.num','type.num.num'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.DIV_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'_dst_x00x01x10_3'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('fun'('type.num.num','type.num.num'),'const.arithmetic.*_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.num.num','type.num.num'),'_dst_x0x1x0_3'(s('fun'('bool','fun'('type.num.num','type.num.num')),'const.bit.SBIT_0'),s('fun'('type.num.num','bool'),'const.bit.BIT_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))))))))),s('type.num.num',V_27n_27),s('type.pair.prod'('type.num.num','type.num.num'),'happ'(s('fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'happ'(s('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_0'),s('type.num.num',V_27x_27))),s('type.num.num',V_27y_27))))))))))),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'happ'(s('fun'('bool','fun'('type.num.num','type.num.num')),'const.bit.SBIT_0'),s('bool','happ'(s('fun'('type.num.num','bool'),'const.bit.BIT_1'(s('type.num.num',V_27n_27))),s('type.num.num',V_27x_27))))),s('type.num.num','const.num.|48|_0')))))))).
fof('thm.numeral_bit.numeral_bit_9_prove_ltb', axiom, ![V_27n_27, V_27a_27, V_27y_27]: s('type.num.num','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.arithmetic.FUNPOW_3'(s('fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),'const.pair.UNCURRY_1'(s('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'_dst_x00x10x11_3'(s('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_0'),s('fun'('type.num.num','type.num.num'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.DIV_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'_dst_x00x01x10_3'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('fun'('type.num.num','type.num.num'),'const.arithmetic.*_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.num.num','type.num.num'),'_dst_x0x1x0_3'(s('fun'('bool','fun'('type.num.num','type.num.num')),'const.bit.SBIT_0'),s('fun'('type.num.num','bool'),'const.bit.BIT_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))))))))),s('type.num.num',V_27n_27),s('type.pair.prod'('type.num.num','type.num.num'),'happ'(s('fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'happ'(s('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_0'),s('type.num.num',V_27a_27))),s('type.num.num',V_27y_27))))))) = s('type.num.num','const.numeral_bit.BIT_REV_3'(s('type.num.num',V_27n_27),s('type.num.num',V_27a_27),s('type.num.num',V_27y_27)))).
fof('thm.numeral_bit.numeral_bit_|49||48|_prove_ltb', axiom, ![V_27m_27, V_27n_27]: s('type.num.num','const.bit.BIT_REVERSE_2'(s('type.num.num',V_27m_27),s('type.num.num',V_27n_27))) = s('type.num.num','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.arithmetic.FUNPOW_3'(s('fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),'const.pair.UNCURRY_1'(s('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'_dst_x00x10x11_3'(s('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_0'),s('fun'('type.num.num','type.num.num'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.DIV_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'_dst_x00x01x10_3'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('fun'('type.num.num','type.num.num'),'const.arithmetic.*_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.num.num','type.num.num'),'_dst_x0x1x0_3'(s('fun'('bool','fun'('type.num.num','type.num.num')),'const.bit.SBIT_0'),s('fun'('type.num.num','bool'),'const.bit.BIT_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))))))))),s('type.num.num',V_27m_27),s('type.pair.prod'('type.num.num','type.num.num'),'happ'(s('fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'happ'(s('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_0'),s('type.num.num',V_27n_27))),s('type.num.num','const.num.|48|_0')))))))).
fof('thm.numeral_bit.BIT_REVERSE_EVAL', axiom, ![V_27m_27, V_27n_27]: s('type.num.num','const.bit.BIT_REVERSE_2'(s('type.num.num',V_27m_27),s('type.num.num',V_27n_27))) = s('type.num.num','const.numeral_bit.BIT_REV_3'(s('type.num.num',V_27m_27),s('type.num.num',V_27n_27),s('type.num.num','const.num.|48|_0')))).
fof('thm.numeral_bit.BIT_MODF_def|split|0', axiom, ![V_27f_27, V_27x_27, V_27b_27, V_27e_27, V_27y_27]: s('type.num.num','const.numeral_bit.BIT_MODF_6'(s('type.num.num','const.num.|48|_0'),s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num',V_27x_27),s('type.num.num',V_27b_27),s('type.num.num',V_27e_27),s('type.num.num',V_27y_27))) = s('type.num.num',V_27y_27)).
fof('thm.numeral_bit.BIT_MODF_def|split|1', axiom, ![V_27n_27, V_27f_27, V_27x_27, V_27b_27, V_27e_27, V_27y_27]: s('type.num.num','const.numeral_bit.BIT_MODF_6'(s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27))),s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num',V_27x_27),s('type.num.num',V_27b_27),s('type.num.num',V_27e_27),s('type.num.num',V_27y_27))) = s('type.num.num','const.numeral_bit.BIT_MODF_6'(s('type.num.num',V_27n_27),s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',V_27x_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27b_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',V_27e_27))),s('type.num.num','const.bool.COND_3'(s('bool','happ'(s('fun'('bool','bool'),'happ'(s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num',V_27b_27))),s('bool','const.arithmetic.ODD_1'(s('type.num.num',V_27x_27))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27e_27),s('type.num.num',V_27y_27))),s('type.num.num',V_27y_27)))))).
fof('_dst_x101x010_ax', axiom, ![VA3,VA,VA1,VA2,VA4]: ![V__x, V__0, V__z]: s('fun'(VA2,'fun'(VA3,VA)),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA))),'_dst_x101x010_2'(s('fun'(VA1,'fun'(VA3,'fun'(VA4,VA))),V__x),s('fun'(VA2,VA4),V__0))),s(VA1,V__z))) = s('fun'(VA2,'fun'(VA3,VA)),'_dst_x01x10_2'(s('fun'(VA3,'fun'(VA4,VA)),'happ'(s('fun'(VA1,'fun'(VA3,'fun'(VA4,VA))),V__x),s(VA1,V__z))),s('fun'(VA2,VA4),V__0)))).
fof('_dst_x000x110x001x000_ax', axiom, ![VA,VA2,VA4,VA1,VA3,VA5,VA6]: ![V__x, V__0, V__1, V__2, V__z]: s('fun'(VA2,'fun'(VA3,VA)),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA))),'_dst_x000x110x001x000_4'(s('fun'(VA4,'fun'(VA5,'fun'(VA6,VA))),V__x),s('fun'(VA1,'fun'(VA2,VA4)),V__0),s('fun'(VA3,VA5),V__1),s(VA6,V__2))),s(VA1,V__z))) = s('fun'(VA2,'fun'(VA3,VA)),'_dst_x00x10x01x00_4'(s('fun'(VA4,'fun'(VA5,'fun'(VA6,VA))),V__x),s('fun'(VA2,VA4),'happ'(s('fun'(VA1,'fun'(VA2,VA4)),V__0),s(VA1,V__z))),s('fun'(VA3,VA5),V__1),s(VA6,V__2)))).
fof('_dst_x000x000x111_ax', axiom, ![VA,VA4,VA2,VA3,VA5,VA1]: ![V__x, V__0, V__1, V__z]: s('fun'(VA2,'fun'(VA3,VA)),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA))),'_dst_x000x000x111_3'(s('fun'(VA4,'fun'(VA5,VA)),V__x),s(VA4,V__0),s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA5))),V__1))),s(VA1,V__z))) = s('fun'(VA2,'fun'(VA3,VA)),'_dst_x00x00x11_3'(s('fun'(VA4,'fun'(VA5,VA)),V__x),s(VA4,V__0),s('fun'(VA2,'fun'(VA3,VA5)),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA5))),V__1),s(VA1,V__z)))))).
fof('_dst_x0000x1111x1111_ax', axiom, ![VA,VA5,VA2,VA3,VA4,VA6,VA1]: ![V__x, V__0, V__1, V__z]: s('fun'(VA2,'fun'(VA3,'fun'(VA4,VA))),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,'fun'(VA4,VA)))),'_dst_x0000x1111x1111_3'(s('fun'(VA5,'fun'(VA6,VA)),V__x),s('fun'(VA1,'fun'(VA2,'fun'(VA3,'fun'(VA4,VA5)))),V__0),s('fun'(VA1,'fun'(VA2,'fun'(VA3,'fun'(VA4,VA6)))),V__1))),s(VA1,V__z))) = s('fun'(VA2,'fun'(VA3,'fun'(VA4,VA))),'_dst_x000x111x111_3'(s('fun'(VA5,'fun'(VA6,VA)),V__x),s('fun'(VA2,'fun'(VA3,'fun'(VA4,VA5))),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,'fun'(VA4,VA5)))),V__0),s(VA1,V__z))),s('fun'(VA2,'fun'(VA3,'fun'(VA4,VA6))),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,'fun'(VA4,VA6)))),V__1),s(VA1,V__z)))))).
fof('_dst_x0000x1110x0001x0000_ax', axiom, ![VA,VA2,VA3,VA5,VA1,VA4,VA6,VA7]: ![V__x, V__0, V__1, V__2, V__z]: s('fun'(VA2,'fun'(VA3,'fun'(VA4,VA))),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,'fun'(VA4,VA)))),'_dst_x0000x1110x0001x0000_4'(s('fun'(VA5,'fun'(VA6,'fun'(VA7,VA))),V__x),s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA5))),V__0),s('fun'(VA4,VA6),V__1),s(VA7,V__2))),s(VA1,V__z))) = s('fun'(VA2,'fun'(VA3,'fun'(VA4,VA))),'_dst_x000x110x001x000_4'(s('fun'(VA5,'fun'(VA6,'fun'(VA7,VA))),V__x),s('fun'(VA2,'fun'(VA3,VA5)),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,VA5))),V__0),s(VA1,V__z))),s('fun'(VA4,VA6),V__1),s(VA7,V__2)))).
fof('_dst_x0000x1000x0111_ax', axiom, ![VA,VA5,VA1,VA2,VA3,VA4,VA6]: ![V__x, V__0, V__1, V__z]: s('fun'(VA2,'fun'(VA3,'fun'(VA4,VA))),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,'fun'(VA4,VA)))),'_dst_x0000x1000x0111_3'(s('fun'(VA5,'fun'(VA6,VA)),V__x),s('fun'(VA1,VA5),V__0),s('fun'(VA2,'fun'(VA3,'fun'(VA4,VA6))),V__1))),s(VA1,V__z))) = s('fun'(VA2,'fun'(VA3,'fun'(VA4,VA))),'_dst_x000x000x111_3'(s('fun'(VA5,'fun'(VA6,VA)),V__x),s(VA5,'happ'(s('fun'(VA1,VA5),V__0),s(VA1,V__z))),s('fun'(VA2,'fun'(VA3,'fun'(VA4,VA6))),V__1)))).
fof('_dst_x00000x11111x01111_ax', axiom, ![VA,VA6,VA1,VA2,VA3,VA4,VA5,VA7]: ![V__x, V__0, V__1, V__z]: s('fun'(VA2,'fun'(VA3,'fun'(VA4,'fun'(VA5,VA)))),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,'fun'(VA4,'fun'(VA5,VA))))),'_dst_x00000x11111x01111_3'(s('fun'(VA6,'fun'(VA7,VA)),V__x),s('fun'(VA1,'fun'(VA2,'fun'(VA3,'fun'(VA4,'fun'(VA5,VA6))))),V__0),s('fun'(VA2,'fun'(VA3,'fun'(VA4,'fun'(VA5,VA7)))),V__1))),s(VA1,V__z))) = s('fun'(VA2,'fun'(VA3,'fun'(VA4,'fun'(VA5,VA)))),'_dst_x0000x1111x1111_3'(s('fun'(VA6,'fun'(VA7,VA)),V__x),s('fun'(VA2,'fun'(VA3,'fun'(VA4,'fun'(VA5,VA6)))),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,'fun'(VA4,'fun'(VA5,VA6))))),V__0),s(VA1,V__z))),s('fun'(VA2,'fun'(VA3,'fun'(VA4,'fun'(VA5,VA7)))),V__1)))).
fof('_dst_x00000x01110x10001x10000_ax', axiom, ![VA,VA2,VA3,VA4,VA6,VA5,VA7,VA8,VA1]: ![V__x, V__0, V__1, V__2, V__z]: s('fun'(VA2,'fun'(VA3,'fun'(VA4,'fun'(VA5,VA)))),'happ'(s('fun'(VA1,'fun'(VA2,'fun'(VA3,'fun'(VA4,'fun'(VA5,VA))))),'_dst_x00000x01110x10001x10000_4'(s('fun'(VA6,'fun'(VA7,'fun'(VA8,VA))),V__x),s('fun'(VA2,'fun'(VA3,'fun'(VA4,VA6))),V__0),s('fun'(VA1,'fun'(VA5,VA7)),V__1),s('fun'(VA1,VA8),V__2))),s(VA1,V__z))) = s('fun'(VA2,'fun'(VA3,'fun'(VA4,'fun'(VA5,VA)))),'_dst_x0000x1110x0001x0000_4'(s('fun'(VA6,'fun'(VA7,'fun'(VA8,VA))),V__x),s('fun'(VA2,'fun'(VA3,'fun'(VA4,VA6))),V__0),s('fun'(VA5,VA7),'happ'(s('fun'(VA1,'fun'(VA5,VA7)),V__1),s(VA1,V__z))),s(VA8,'happ'(s('fun'(VA1,VA8),V__2),s(VA1,V__z)))))).
fof('thm.numeral_bit.numeral_bit_|49|3_prove_ltb', axiom, ![V_27n_27, V_27f_27, V_27x_27, V_27b_27, V_27e_27, V_27y_27]: s('type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'const.arithmetic.FUNPOW_3'(s('fun'('type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))),'happ'(s('fun'('fun'('type.num.num','fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.UNCURRY_0'),s('fun'('type.num.num','fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'_dst_x0x1_2'(s('fun'('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.UNCURRY_0'),s('fun'('type.num.num','fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))))),'_dst_x00x11_2'(s('fun'('fun'('type.num.num','fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.UNCURRY_0'),s('fun'('type.num.num','fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))))),'_dst_x000x111_2'(s('fun'('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.UNCURRY_0'),s('fun'('type.num.num','fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))))))),'_dst_x00000x11111x01111_3'(s('fun'('type.num.num','fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.,_0'),s('fun'('type.num.num','fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('type.num.num','fun'('type.num.num','type.num.num'))))),'_dst_x00000x01110x10001x10000_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('type.num.num','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('bool','bool'))),'_i_0_0'),s('fun'('type.num.num','bool'),'const.bit.BIT_1'(s('type.num.num','const.num.|48|_0'))))),s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'_dst_x01x10_2'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('fun'('type.num.num','type.num.num'),'_i_0_0'))),s('fun'('type.num.num','type.num.num'),'_i_0_0'))),s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('type.num.num','fun'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))))),'_dst_x0000x1000x0111_3'(s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_0'),s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('bool','bool'))),'_i_0_0'),s('fun'('type.num.num','fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))),'_dst_x000x100x011_3'(s('fun'('type.num.num','fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'const.pair.,_0'),s('fun'('type.num.num','type.num.num'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.DIV_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'_dst_x00x10x01_3'(s('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_0'),s('fun'('type.num.num','type.num.num'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.num.num','type.num.num'),'const.arithmetic.*_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27))),s('type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'happ'(s('fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))),'happ'(s('fun'('type.num.num','fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.,_0'),s('type.num.num',V_27y_27))),s('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'happ'(s('fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'happ'(s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_0'),s('fun'('type.num.num','fun'('bool','bool')),V_27f_27))),s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'happ'(s('fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'happ'(s('fun'('type.num.num','fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'const.pair.,_0'),s('type.num.num',V_27x_27))),s('type.pair.prod'('type.num.num','type.num.num'),'happ'(s('fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'happ'(s('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_0'),s('type.num.num',V_27b_27))),s('type.num.num',V_27e_27))))))))))) = s('type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'happ'(s('fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))),'happ'(s('fun'('type.num.num','fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.,_0'),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'happ'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'happ'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('bool','happ'(s('fun'('bool','bool'),'happ'(s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'happ'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',V_27b_27))),s('type.num.num',V_27n_27))))),s('bool','happ'(s('fun'('type.num.num','bool'),'const.bit.BIT_1'(s('type.num.num',V_27n_27))),s('type.num.num',V_27x_27))))))),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'happ'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.arithmetic.*_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',V_27n_27))))),s('type.num.num',V_27e_27))))),s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'const.arithmetic.FUNPOW_3'(s('fun'('type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))),'happ'(s('fun'('fun'('type.num.num','fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.UNCURRY_0'),s('fun'('type.num.num','fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'_dst_x0x1_2'(s('fun'('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.UNCURRY_0'),s('fun'('type.num.num','fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))))),'_dst_x00x11_2'(s('fun'('fun'('type.num.num','fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.UNCURRY_0'),s('fun'('type.num.num','fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))))),'_dst_x000x111_2'(s('fun'('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.UNCURRY_0'),s('fun'('type.num.num','fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))))))),'_dst_x00000x11111x01111_3'(s('fun'('type.num.num','fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.,_0'),s('fun'('type.num.num','fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('type.num.num','fun'('type.num.num','type.num.num'))))),'_dst_x00000x01110x10001x10000_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('type.num.num','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('bool','bool'))),'_i_0_0'),s('fun'('type.num.num','bool'),'const.bit.BIT_1'(s('type.num.num','const.num.|48|_0'))))),s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'_dst_x01x10_2'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('fun'('type.num.num','type.num.num'),'_i_0_0'))),s('fun'('type.num.num','type.num.num'),'_i_0_0'))),s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('type.num.num','fun'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))))),'_dst_x0000x1000x0111_3'(s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_0'),s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('bool','bool'))),'_i_0_0'),s('fun'('type.num.num','fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))),'_dst_x000x100x011_3'(s('fun'('type.num.num','fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'const.pair.,_0'),s('fun'('type.num.num','type.num.num'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.DIV_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'_dst_x00x10x01_3'(s('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_0'),s('fun'('type.num.num','type.num.num'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.num.num','type.num.num'),'const.arithmetic.*_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))),s('type.num.num',V_27n_27),s('type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'happ'(s('fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))),'happ'(s('fun'('type.num.num','fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.,_0'),s('type.num.num',V_27y_27))),s('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'happ'(s('fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'happ'(s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_0'),s('fun'('type.num.num','fun'('bool','bool')),V_27f_27))),s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'happ'(s('fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'happ'(s('fun'('type.num.num','fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'const.pair.,_0'),s('type.num.num',V_27x_27))),s('type.pair.prod'('type.num.num','type.num.num'),'happ'(s('fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'happ'(s('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_0'),s('type.num.num',V_27b_27))),s('type.num.num',V_27e_27))))))))))))))))),s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'const.arithmetic.FUNPOW_3'(s('fun'('type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))),'happ'(s('fun'('fun'('type.num.num','fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.UNCURRY_0'),s('fun'('type.num.num','fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'_dst_x0x1_2'(s('fun'('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.UNCURRY_0'),s('fun'('type.num.num','fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))))),'_dst_x00x11_2'(s('fun'('fun'('type.num.num','fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.UNCURRY_0'),s('fun'('type.num.num','fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))))),'_dst_x000x111_2'(s('fun'('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.UNCURRY_0'),s('fun'('type.num.num','fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))))))),'_dst_x00000x11111x01111_3'(s('fun'('type.num.num','fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.,_0'),s('fun'('type.num.num','fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('type.num.num','fun'('type.num.num','type.num.num'))))),'_dst_x00000x01110x10001x10000_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('type.num.num','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('bool','bool'))),'_i_0_0'),s('fun'('type.num.num','bool'),'const.bit.BIT_1'(s('type.num.num','const.num.|48|_0'))))),s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'_dst_x01x10_2'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('fun'('type.num.num','type.num.num'),'_i_0_0'))),s('fun'('type.num.num','type.num.num'),'_i_0_0'))),s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('type.num.num','fun'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))))),'_dst_x0000x1000x0111_3'(s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_0'),s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('bool','bool'))),'_i_0_0'),s('fun'('type.num.num','fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))),'_dst_x000x100x011_3'(s('fun'('type.num.num','fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'const.pair.,_0'),s('fun'('type.num.num','type.num.num'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.DIV_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'_dst_x00x10x01_3'(s('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_0'),s('fun'('type.num.num','type.num.num'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.num.num','type.num.num'),'const.arithmetic.*_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))),s('type.num.num',V_27n_27),s('type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'happ'(s('fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))),'happ'(s('fun'('type.num.num','fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.,_0'),s('type.num.num',V_27y_27))),s('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'happ'(s('fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'happ'(s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_0'),s('fun'('type.num.num','fun'('bool','bool')),V_27f_27))),s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'happ'(s('fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'happ'(s('fun'('type.num.num','fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'const.pair.,_0'),s('type.num.num',V_27x_27))),s('type.pair.prod'('type.num.num','type.num.num'),'happ'(s('fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'happ'(s('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_0'),s('type.num.num',V_27b_27))),s('type.num.num',V_27e_27))))))))))))))))),s('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'happ'(s('fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'happ'(s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_0'),s('fun'('type.num.num','fun'('bool','bool')),V_27f_27))),s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'happ'(s('fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'happ'(s('fun'('type.num.num','fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'const.pair.,_0'),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'happ'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.DIV_0'),s('type.num.num',V_27x_27))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27))))))))),s('type.pair.prod'('type.num.num','type.num.num'),'happ'(s('fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'happ'(s('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_0'),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'happ'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',V_27b_27))),s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27))))))),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.arithmetic.*_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27))))))),s('type.num.num',V_27e_27)))))))))))).
fof('thm.numeral_bit.numeral_bit_|49|4_prove_ltb', axiom, ![V_27n_27, V_27f_27, V_27x_27, V_27b_27, V_27e_27, V_27y_27]: s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'const.arithmetic.FUNPOW_3'(s('fun'('type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))),'happ'(s('fun'('fun'('type.num.num','fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.UNCURRY_0'),s('fun'('type.num.num','fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'_dst_x0x1_2'(s('fun'('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.UNCURRY_0'),s('fun'('type.num.num','fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))))),'_dst_x00x11_2'(s('fun'('fun'('type.num.num','fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.UNCURRY_0'),s('fun'('type.num.num','fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))))),'_dst_x000x111_2'(s('fun'('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.UNCURRY_0'),s('fun'('type.num.num','fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))))))),'_dst_x00000x11111x01111_3'(s('fun'('type.num.num','fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.,_0'),s('fun'('type.num.num','fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('type.num.num','fun'('type.num.num','type.num.num'))))),'_dst_x00000x01110x10001x10000_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('type.num.num','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('bool','bool'))),'_i_0_0'),s('fun'('type.num.num','bool'),'const.bit.BIT_1'(s('type.num.num','const.num.|48|_0'))))),s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'_dst_x01x10_2'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('fun'('type.num.num','type.num.num'),'_i_0_0'))),s('fun'('type.num.num','type.num.num'),'_i_0_0'))),s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('type.num.num','fun'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))))),'_dst_x0000x1000x0111_3'(s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_0'),s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('bool','bool'))),'_i_0_0'),s('fun'('type.num.num','fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))),'_dst_x000x100x011_3'(s('fun'('type.num.num','fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'const.pair.,_0'),s('fun'('type.num.num','type.num.num'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.DIV_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'_dst_x00x10x01_3'(s('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_0'),s('fun'('type.num.num','type.num.num'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.num.num','type.num.num'),'const.arithmetic.*_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))),s('type.num.num',V_27n_27),s('type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'happ'(s('fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))),'happ'(s('fun'('type.num.num','fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.,_0'),s('type.num.num',V_27y_27))),s('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'happ'(s('fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'happ'(s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_0'),s('fun'('type.num.num','fun'('bool','bool')),V_27f_27))),s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'happ'(s('fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'happ'(s('fun'('type.num.num','fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'const.pair.,_0'),s('type.num.num',V_27x_27))),s('type.pair.prod'('type.num.num','type.num.num'),'happ'(s('fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'happ'(s('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_0'),s('type.num.num',V_27b_27))),s('type.num.num',V_27e_27))))))))))))) = s('type.num.num','const.numeral_bit.BIT_MODF_6'(s('type.num.num',V_27n_27),s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num',V_27x_27),s('type.num.num',V_27b_27),s('type.num.num',V_27e_27),s('type.num.num',V_27y_27)))).
fof('thm.numeral_bit.numeral_bit_|49|5_prove_ltb', axiom, ![V_27m_27, V_27f_27, V_27n_27]: s('type.num.num','const.bit.BIT_MODIFY_3'(s('type.num.num',V_27m_27),s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num',V_27n_27))) = s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'const.arithmetic.FUNPOW_3'(s('fun'('type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))),'happ'(s('fun'('fun'('type.num.num','fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.UNCURRY_0'),s('fun'('type.num.num','fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'_dst_x0x1_2'(s('fun'('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.UNCURRY_0'),s('fun'('type.num.num','fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))))),'_dst_x00x11_2'(s('fun'('fun'('type.num.num','fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.UNCURRY_0'),s('fun'('type.num.num','fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))))),'_dst_x000x111_2'(s('fun'('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.UNCURRY_0'),s('fun'('type.num.num','fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))))))),'_dst_x00000x11111x01111_3'(s('fun'('type.num.num','fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.,_0'),s('fun'('type.num.num','fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('type.num.num','fun'('type.num.num','type.num.num'))))),'_dst_x00000x01110x10001x10000_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('type.num.num','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('bool','bool'))),'_i_0_0'),s('fun'('type.num.num','bool'),'const.bit.BIT_1'(s('type.num.num','const.num.|48|_0'))))),s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'_dst_x01x10_2'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('fun'('type.num.num','type.num.num'),'_i_0_0'))),s('fun'('type.num.num','type.num.num'),'_i_0_0'))),s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('type.num.num','fun'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))))),'_dst_x0000x1000x0111_3'(s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_0'),s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.num.num','fun'('bool','bool'))),'_i_0_0'),s('fun'('type.num.num','fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))),'_dst_x000x100x011_3'(s('fun'('type.num.num','fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'const.pair.,_0'),s('fun'('type.num.num','type.num.num'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.DIV_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'_dst_x00x10x01_3'(s('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_0'),s('fun'('type.num.num','type.num.num'),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.num.num','type.num.num'),'const.arithmetic.*_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))),s('type.num.num',V_27m_27),s('type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'happ'(s('fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))),'happ'(s('fun'('type.num.num','fun'('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'type.pair.prod'('type.num.num','type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))))),'const.pair.,_0'),s('type.num.num','const.num.|48|_0'))),s('type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'happ'(s('fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'happ'(s('fun'('fun'('type.num.num','fun'('bool','bool')),'fun'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'type.pair.prod'('fun'('type.num.num','fun'('bool','bool')),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_0'),s('fun'('type.num.num','fun'('bool','bool')),V_27f_27))),s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'happ'(s('fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'happ'(s('fun'('type.num.num','fun'('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),'const.pair.,_0'),s('type.num.num',V_27n_27))),s('type.pair.prod'('type.num.num','type.num.num'),'happ'(s('fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'happ'(s('fun'('type.num.num','fun'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_0'),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))).
fof('thm.numeral_bit.BIT_MODIFY_EVAL', axiom, ![V_27m_27, V_27f_27, V_27n_27]: s('type.num.num','const.bit.BIT_MODIFY_3'(s('type.num.num',V_27m_27),s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num',V_27n_27))) = s('type.num.num','const.numeral_bit.BIT_MODF_6'(s('type.num.num',V_27m_27),s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num',V_27n_27),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0')))).
fof('ARITY_0_4_const.bit.BITWISE', axiom, ![VV0, VV1, VV2, VV3]: s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'happ'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'happ'(s('fun'('fun'('bool','fun'('bool','bool')),'fun'('type.num.num','fun'('type.num.num','type.num.num'))),'happ'(s('fun'('type.num.num','fun'('fun'('bool','fun'('bool','bool')),'fun'('type.num.num','fun'('type.num.num','type.num.num')))),'const.bit.BITWISE_0'),s('type.num.num',VV0))),s('fun'('bool','fun'('bool','bool')),VV1))),s('type.num.num',VV2))),s('type.num.num',VV3))) = s('type.num.num','const.bit.BITWISE_4'(s('type.num.num',VV0),s('fun'('bool','fun'('bool','bool')),VV1),s('type.num.num',VV2),s('type.num.num',VV3)))).
fof('ARITY_0_4_const.numeral_bit.iBITWISE', axiom, ![VV0, VV1, VV2, VV3]: s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'happ'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'happ'(s('fun'('fun'('bool','fun'('bool','bool')),'fun'('type.num.num','fun'('type.num.num','type.num.num'))),'happ'(s('fun'('type.num.num','fun'('fun'('bool','fun'('bool','bool')),'fun'('type.num.num','fun'('type.num.num','type.num.num')))),'const.numeral_bit.iBITWISE_0'),s('type.num.num',VV0))),s('fun'('bool','fun'('bool','bool')),VV1))),s('type.num.num',VV2))),s('type.num.num',VV3))) = s('type.num.num','const.numeral_bit.iBITWISE_4'(s('type.num.num',VV0),s('fun'('bool','fun'('bool','bool')),VV1),s('type.num.num',VV2),s('type.num.num',VV3)))).
fof('thm.numeral_bit.iBITWISE_def', axiom, s('fun'('type.num.num','fun'('fun'('bool','fun'('bool','bool')),'fun'('type.num.num','fun'('type.num.num','type.num.num')))),'const.numeral_bit.iBITWISE_0') = s('fun'('type.num.num','fun'('fun'('bool','fun'('bool','bool')),'fun'('type.num.num','fun'('type.num.num','type.num.num')))),'const.bit.BITWISE_0')).
fof('thm.numeral_bit.numeral_bit_|49|8_prove_ltb|split|0', axiom, ![V_27opr_27, V_27a_27, V_27b_27]: s('type.num.num','const.numeral_bit.iBITWISE_4'(s('type.num.num','const.num.|48|_0'),s('fun'('bool','fun'('bool','bool')),V_27opr_27),s('type.num.num',V_27a_27),s('type.num.num',V_27b_27))) = s('type.num.num','const.arithmetic.ZERO_0')).
fof('thm.numeral_bit.numeral_bit_|49|8_prove_ltb|split|1', axiom, ![V_27x_27, V_27opr_27, V_27a_27, V_27b_27]: s('type.num.num','const.numeral_bit.iBITWISE_4'(s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27x_27))),s('fun'('bool','fun'('bool','bool')),V_27opr_27),s('type.num.num',V_27a_27),s('type.num.num',V_27b_27))) = s('type.num.num','const.bool.LET_2'(s('fun'('type.num.num','type.num.num'),'_dst_x0x1x1_3'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.bool.COND_1'(s('bool','happ'(s('fun'('bool','bool'),'happ'(s('fun'('bool','fun'('bool','bool')),V_27opr_27),s('bool','const.arithmetic.ODD_1'(s('type.num.num',V_27a_27))))),s('bool','const.arithmetic.ODD_1'(s('type.num.num',V_27b_27))))))),s('fun'('type.num.num','type.num.num'),'const.arithmetic.BIT|49|_0'),s('fun'('type.num.num','type.num.num'),'const.numeral.iDUB_0'))),s('type.num.num','const.numeral_bit.iBITWISE_4'(s('type.num.num',V_27x_27),s('fun'('bool','fun'('bool','bool')),V_27opr_27),s('type.num.num','const.arithmetic.DIV2_1'(s('type.num.num',V_27a_27))),s('type.num.num','const.arithmetic.DIV2_1'(s('type.num.num',V_27b_27)))))))).
fof('thm.numeral_bit.iBITWISE|split|1', axiom, ![V_27x_27, V_27opr_27, V_27a_27, V_27b_27]: s('type.num.num','const.numeral_bit.iBITWISE_4'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.arithmetic.BIT|49|_0'),s('type.num.num',V_27x_27))))),s('fun'('bool','fun'('bool','bool')),V_27opr_27),s('type.num.num',V_27a_27),s('type.num.num',V_27b_27))) = s('type.num.num','const.bool.LET_2'(s('fun'('type.num.num','type.num.num'),'_dst_x0x1x1_3'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.bool.COND_1'(s('bool','happ'(s('fun'('bool','bool'),'happ'(s('fun'('bool','fun'('bool','bool')),V_27opr_27),s('bool','const.arithmetic.ODD_1'(s('type.num.num',V_27a_27))))),s('bool','const.arithmetic.ODD_1'(s('type.num.num',V_27b_27))))))),s('fun'('type.num.num','type.num.num'),'const.arithmetic.BIT|49|_0'),s('fun'('type.num.num','type.num.num'),'const.numeral.iDUB_0'))),s('type.num.num','const.numeral_bit.iBITWISE_4'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.arithmetic.BIT|49|_0'),s('type.num.num',V_27x_27))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.arithmetic.BIT|49|_0'),s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('bool','fun'('bool','bool')),V_27opr_27),s('type.num.num','const.arithmetic.DIV2_1'(s('type.num.num',V_27a_27))),s('type.num.num','const.arithmetic.DIV2_1'(s('type.num.num',V_27b_27)))))))).
fof('thm.numeral_bit.iBITWISE|split|2', axiom, ![V_27x_27, V_27opr_27, V_27a_27, V_27b_27]: s('type.num.num','const.numeral_bit.iBITWISE_4'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',V_27x_27))))),s('fun'('bool','fun'('bool','bool')),V_27opr_27),s('type.num.num',V_27a_27),s('type.num.num',V_27b_27))) = s('type.num.num','const.bool.LET_2'(s('fun'('type.num.num','type.num.num'),'_dst_x0x1x1_3'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.bool.COND_1'(s('bool','happ'(s('fun'('bool','bool'),'happ'(s('fun'('bool','fun'('bool','bool')),V_27opr_27),s('bool','const.arithmetic.ODD_1'(s('type.num.num',V_27a_27))))),s('bool','const.arithmetic.ODD_1'(s('type.num.num',V_27b_27))))))),s('fun'('type.num.num','type.num.num'),'const.arithmetic.BIT|49|_0'),s('fun'('type.num.num','type.num.num'),'const.numeral.iDUB_0'))),s('type.num.num','const.numeral_bit.iBITWISE_4'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.arithmetic.BIT|49|_0'),s('type.num.num',V_27x_27))))),s('fun'('bool','fun'('bool','bool')),V_27opr_27),s('type.num.num','const.arithmetic.DIV2_1'(s('type.num.num',V_27a_27))),s('type.num.num','const.arithmetic.DIV2_1'(s('type.num.num',V_27b_27)))))))).
fof('thm.numeral_bit.NUMERAL_BITWISE|split|0', axiom, ![V_27x_27, V_27f_27]: s('type.num.num','const.bit.BITWISE_4'(s('type.num.num',V_27x_27),s('fun'('bool','fun'('bool','bool')),V_27f_27),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral_bit.iBITWISE_4'(s('type.num.num',V_27x_27),s('fun'('bool','fun'('bool','bool')),V_27f_27),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))))).
fof('thm.numeral_bit.NUMERAL_BITWISE|split|1', axiom, ![V_27x_27, V_27f_27, V_27a_27]: s('type.num.num','const.bit.BITWISE_4'(s('type.num.num',V_27x_27),s('fun'('bool','fun'('bool','bool')),V_27f_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27a_27))),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral_bit.iBITWISE_4'(s('type.num.num',V_27x_27),s('fun'('bool','fun'('bool','bool')),V_27f_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27a_27))),s('type.num.num','const.num.|48|_0')))))).
fof('thm.numeral_bit.NUMERAL_BITWISE|split|2', axiom, ![V_27x_27, V_27f_27, V_27b_27]: s('type.num.num','const.bit.BITWISE_4'(s('type.num.num',V_27x_27),s('fun'('bool','fun'('bool','bool')),V_27f_27),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27b_27))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral_bit.iBITWISE_4'(s('type.num.num',V_27x_27),s('fun'('bool','fun'('bool','bool')),V_27f_27),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27b_27)))))))).
fof('thm.numeral_bit.NUMERAL_BITWISE|split|3', axiom, ![V_27x_27, V_27f_27, V_27a_27, V_27b_27]: s('type.num.num','const.bit.BITWISE_4'(s('type.num.num',V_27x_27),s('fun'('bool','fun'('bool','bool')),V_27f_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27a_27))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27b_27))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral_bit.iBITWISE_4'(s('type.num.num',V_27x_27),s('fun'('bool','fun'('bool','bool')),V_27f_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27a_27))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27b_27)))))))).
fof('thm.numeral_bit.numeral_bit_2|49|_prove_ltb|split|1', axiom, ![V_27n_27, V_27y_27]: s('type.num.num','const.numeral_bit.BIT_REV_3'(s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27))),s('type.num.num','const.num.|48|_0'),s('type.num.num',V_27y_27))) = s('type.num.num','const.numeral_bit.BIT_REV_3'(s('type.num.num',V_27n_27),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',V_27y_27)))))).
fof('thm.numeral_bit.numeral_bit_2|49|_prove_ltb|split|2', axiom, ![V_27n_27, V_27x_27, V_27y_27]: s('type.num.num','const.numeral_bit.BIT_REV_3'(s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27x_27))),s('type.num.num',V_27y_27))) = s('type.num.num','const.numeral_bit.BIT_REV_3'(s('type.num.num',V_27n_27),s('type.num.num','const.arithmetic.DIV2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27x_27))))),s('type.num.num','const.bool.COND_3'(s('bool','const.arithmetic.ODD_1'(s('type.num.num',V_27x_27))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27y_27))),s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',V_27y_27)))))))).
fof('thm.numeral_bit.NUMERAL_BIT_REV|split|1', axiom, ![V_27n_27, V_27y_27]: s('type.num.num','const.numeral_bit.BIT_REV_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))),s('type.num.num','const.num.|48|_0'),s('type.num.num',V_27y_27))) = s('type.num.num','const.numeral_bit.BIT_REV_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',V_27y_27)))))).
fof('thm.numeral_bit.NUMERAL_BIT_REV|split|2', axiom, ![V_27n_27, V_27y_27]: s('type.num.num','const.numeral_bit.BIT_REV_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',V_27n_27))))),s('type.num.num','const.num.|48|_0'),s('type.num.num',V_27y_27))) = s('type.num.num','const.numeral_bit.BIT_REV_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',V_27y_27)))))).
fof('thm.numeral_bit.NUMERAL_BIT_REV|split|3', axiom, ![V_27n_27, V_27x_27, V_27y_27]: s('type.num.num','const.numeral_bit.BIT_REV_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27x_27))),s('type.num.num',V_27y_27))) = s('type.num.num','const.numeral_bit.BIT_REV_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.DIV2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27x_27))))),s('type.num.num','const.bool.COND_3'(s('bool','const.arithmetic.ODD_1'(s('type.num.num',V_27x_27))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27y_27))),s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',V_27y_27)))))))).
fof('thm.numeral_bit.NUMERAL_BIT_REV|split|4', axiom, ![V_27n_27, V_27x_27, V_27y_27]: s('type.num.num','const.numeral_bit.BIT_REV_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',V_27n_27))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27x_27))),s('type.num.num',V_27y_27))) = s('type.num.num','const.numeral_bit.BIT_REV_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))),s('type.num.num','const.arithmetic.DIV2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27x_27))))),s('type.num.num','const.bool.COND_3'(s('bool','const.arithmetic.ODD_1'(s('type.num.num',V_27x_27))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27y_27))),s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',V_27y_27)))))))).
fof('thm.numeral_bit.NUMERAL_BIT_REVERSE|split|0', axiom, ![V_27m_27]: s('type.num.num','const.bit.BIT_REVERSE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27m_27))),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral_bit.BIT_REV_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27m_27))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0')))))).
fof('thm.numeral_bit.NUMERAL_BIT_REVERSE|split|1', axiom, ![V_27n_27, V_27m_27]: s('type.num.num','const.bit.BIT_REVERSE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27m_27))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27n_27))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral_bit.BIT_REV_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27m_27))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27n_27))),s('type.num.num','const.arithmetic.ZERO_0')))))).
fof('thm.numeral_bit.numeral_bit_24_prove_ltb|split|1', axiom, ![V_27n_27, V_27f_27, V_27b_27, V_27e_27, V_27y_27]: s('type.num.num','const.numeral_bit.BIT_MODF_6'(s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27))),s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num','const.num.|48|_0'),s('type.num.num',V_27b_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27e_27))),s('type.num.num',V_27y_27))) = s('type.num.num','const.numeral_bit.BIT_MODF_6'(s('type.num.num',V_27n_27),s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27b_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',V_27e_27))))),s('type.num.num','const.bool.COND_3'(s('bool','happ'(s('fun'('bool','bool'),'happ'(s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num',V_27b_27))),s('bool','F_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27e_27))),s('type.num.num',V_27y_27))),s('type.num.num',V_27y_27)))))).
fof('thm.numeral_bit.numeral_bit_24_prove_ltb|split|2', axiom, ![V_27n_27, V_27f_27, V_27x_27, V_27b_27, V_27e_27, V_27y_27]: s('type.num.num','const.numeral_bit.BIT_MODF_6'(s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27))),s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27x_27))),s('type.num.num',V_27b_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27e_27))),s('type.num.num',V_27y_27))) = s('type.num.num','const.numeral_bit.BIT_MODF_6'(s('type.num.num',V_27n_27),s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num','const.arithmetic.DIV2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27x_27))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27b_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',V_27e_27))))),s('type.num.num','const.bool.COND_3'(s('bool','happ'(s('fun'('bool','bool'),'happ'(s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num',V_27b_27))),s('bool','const.arithmetic.ODD_1'(s('type.num.num',V_27x_27))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27e_27))),s('type.num.num',V_27y_27))),s('type.num.num',V_27y_27)))))).
fof('thm.numeral_bit.NUMERAL_BIT_MODF|split|1', axiom, ![V_27n_27, V_27f_27, V_27b_27, V_27e_27, V_27y_27]: s('type.num.num','const.numeral_bit.BIT_MODF_6'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))),s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num','const.num.|48|_0'),s('type.num.num',V_27b_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27e_27))),s('type.num.num',V_27y_27))) = s('type.num.num','const.numeral_bit.BIT_MODF_6'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27b_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',V_27e_27))))),s('type.num.num','const.bool.COND_3'(s('bool','happ'(s('fun'('bool','bool'),'happ'(s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num',V_27b_27))),s('bool','F_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27e_27))),s('type.num.num',V_27y_27))),s('type.num.num',V_27y_27)))))).
fof('thm.numeral_bit.NUMERAL_BIT_MODF|split|2', axiom, ![V_27n_27, V_27f_27, V_27b_27, V_27e_27, V_27y_27]: s('type.num.num','const.numeral_bit.BIT_MODF_6'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',V_27n_27))))),s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num','const.num.|48|_0'),s('type.num.num',V_27b_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27e_27))),s('type.num.num',V_27y_27))) = s('type.num.num','const.numeral_bit.BIT_MODF_6'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))),s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27b_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',V_27e_27))))),s('type.num.num','const.bool.COND_3'(s('bool','happ'(s('fun'('bool','bool'),'happ'(s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num',V_27b_27))),s('bool','F_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27e_27))),s('type.num.num',V_27y_27))),s('type.num.num',V_27y_27)))))).
fof('thm.numeral_bit.NUMERAL_BIT_MODF|split|3', axiom, ![V_27n_27, V_27f_27, V_27x_27, V_27b_27, V_27e_27, V_27y_27]: s('type.num.num','const.numeral_bit.BIT_MODF_6'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))),s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27x_27))),s('type.num.num',V_27b_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27e_27))),s('type.num.num',V_27y_27))) = s('type.num.num','const.numeral_bit.BIT_MODF_6'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num','const.arithmetic.DIV2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27x_27))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27b_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',V_27e_27))))),s('type.num.num','const.bool.COND_3'(s('bool','happ'(s('fun'('bool','bool'),'happ'(s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num',V_27b_27))),s('bool','const.arithmetic.ODD_1'(s('type.num.num',V_27x_27))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27e_27))),s('type.num.num',V_27y_27))),s('type.num.num',V_27y_27)))))).
fof('thm.numeral_bit.NUMERAL_BIT_MODF|split|4', axiom, ![V_27n_27, V_27f_27, V_27x_27, V_27b_27, V_27e_27, V_27y_27]: s('type.num.num','const.numeral_bit.BIT_MODF_6'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',V_27n_27))))),s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27x_27))),s('type.num.num',V_27b_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27e_27))),s('type.num.num',V_27y_27))) = s('type.num.num','const.numeral_bit.BIT_MODF_6'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))),s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num','const.arithmetic.DIV2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27x_27))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27b_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',V_27e_27))))),s('type.num.num','const.bool.COND_3'(s('bool','happ'(s('fun'('bool','bool'),'happ'(s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num',V_27b_27))),s('bool','const.arithmetic.ODD_1'(s('type.num.num',V_27x_27))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27e_27))),s('type.num.num',V_27y_27))),s('type.num.num',V_27y_27)))))).
fof('thm.numeral_bit.NUMERAL_BIT_MODIFY|split|0', axiom, ![V_27m_27, V_27f_27]: s('type.num.num','const.bit.BIT_MODIFY_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27m_27))),s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.numeral_bit.BIT_MODF_6'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27m_27))),s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0')))).
fof('thm.numeral_bit.NUMERAL_BIT_MODIFY|split|1', axiom, ![V_27m_27, V_27f_27, V_27n_27]: s('type.num.num','const.bit.BIT_MODIFY_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27m_27))),s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27n_27))))) = s('type.num.num','const.numeral_bit.BIT_MODF_6'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27m_27))),s('fun'('type.num.num','fun'('bool','bool')),V_27f_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27n_27))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0')))).
fof('ARITY_0_1_const.numeral_bit.iSUC', axiom, ![VV0]: s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.iSUC_0'),s('type.num.num',VV0))) = s('type.num.num','const.numeral_bit.iSUC_1'(s('type.num.num',VV0)))).
fof('thm.numeral_bit.iSUC', axiom, s('fun'('type.num.num','type.num.num'),'const.numeral_bit.iSUC_0') = s('fun'('type.num.num','type.num.num'),'const.num.SUC_0')).
fof('thm.numeral_bit.iDIV2', axiom, s('fun'('type.num.num','type.num.num'),'const.numeral_bit.iDIV2_0') = s('fun'('type.num.num','type.num.num'),'const.arithmetic.DIV2_0')).
fof('thm.numeral_bit.SFUNPOW_def|split|0', axiom, ![V_27f_27, V_27x_27]: s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),V_27f_27),s('type.num.num','const.num.|48|_0'),s('type.num.num',V_27x_27))) = s('type.num.num',V_27x_27)).
fof('thm.numeral_bit.SFUNPOW_def|split|1', axiom, ![V_27f_27, V_27n_27, V_27x_27]: ?[Vv]: ((p(s('bool',Vv)) <=> s('type.num.num',V_27x_27) = s('type.num.num','const.num.|48|_0')) & s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),V_27f_27),s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27))),s('type.num.num',V_27x_27))) = s('type.num.num','const.bool.COND_3'(s('bool',Vv),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),V_27f_27),s('type.num.num',V_27n_27),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),V_27f_27),s('type.num.num',V_27x_27))))))))).
fof('ARITY_1_2_const.numeral_bit.FDUB', axiom, ![VV0, VV1]: s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),VV0))),s('type.num.num',VV1))) = s('type.num.num','const.numeral_bit.FDUB_2'(s('fun'('type.num.num','type.num.num'),VV0),s('type.num.num',VV1)))).
fof('thm.numeral_bit.FDUB_def|split|0', axiom, ![V_27f_27]: s('type.num.num','const.numeral_bit.FDUB_2'(s('fun'('type.num.num','type.num.num'),V_27f_27),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.|48|_0')).
fof('thm.numeral_bit.FDUB_def|split|1', axiom, ![V_27f_27, V_27n_27]: s('type.num.num','const.numeral_bit.FDUB_2'(s('fun'('type.num.num','type.num.num'),V_27f_27),s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27))))) = s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),V_27f_27),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),V_27f_27),s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27)))))))).
fof('thm.numeral_bit.numeral_bit_3|49|_prove_ltb', axiom, ![V_27f_27]: (s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),V_27f_27),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.|48|_0') => ![Vx]: s('type.num.num','const.numeral_bit.FDUB_2'(s('fun'('type.num.num','type.num.num'),V_27f_27),s('type.num.num',Vx))) = s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),V_27f_27),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),V_27f_27),s('type.num.num',Vx))))))).
fof('thm.numeral_bit.numeral_bit_32_prove_ltb', axiom, ![V_27A_27]: ![V_27n_27, V_27f_27, V_27x_27]: s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),V_27f_27),s('type.num.num',V_27n_27),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.|48|_0')).
fof('thm.numeral_bit.numeral_bit_33_prove_ltb', axiom, ![V_27n_27, V_27f_27, V_27x_27]: (s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),V_27f_27),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.|48|_0') => s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),V_27f_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))),s('type.num.num',V_27x_27))) = s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),V_27f_27))),s('type.num.num',V_27n_27),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),V_27f_27),s('type.num.num',V_27x_27))))))).
fof('thm.numeral_bit.numeral_bit_34_prove_ltb', axiom, ![V_27n_27, V_27f_27, V_27x_27]: (s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),V_27f_27),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.|48|_0') => s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),V_27f_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',V_27n_27))))),s('type.num.num',V_27x_27))) = s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),V_27f_27))),s('type.num.num',V_27n_27),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),V_27f_27),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),V_27f_27),s('type.num.num',V_27x_27))))))))).
fof('thm.numeral_bit.numeral_bit_35_prove_ltb', axiom, ![V_27f_27]: (s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),V_27f_27),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.|48|_0') => (![V_27x_27]: s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),V_27f_27),s('type.num.num','const.num.|48|_0'),s('type.num.num',V_27x_27))) = s('type.num.num',V_27x_27) & (![V_27y_27]: s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),V_27f_27),s('type.num.num',V_27y_27),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.|48|_0') & (![V_27n_27, V_27x_27]: s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),V_27f_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))),s('type.num.num',V_27x_27))) = s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),V_27f_27))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27n_27))),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),V_27f_27),s('type.num.num',V_27x_27))))) & ![V_27n_27, V_27x_27]: s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),V_27f_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',V_27n_27))))),s('type.num.num',V_27x_27))) = s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),V_27f_27))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27n_27))),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),V_27f_27),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),V_27f_27),s('type.num.num',V_27x_27)))))))))))).
fof('thm.numeral_bit.NUMERAL_TIMES_2EXP|split|0', axiom, ![V_27n_27]: s('type.num.num','const.bit.TIMES_2EXP_2'(s('type.num.num',V_27n_27),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.|48|_0')).
fof('thm.numeral_bit.NUMERAL_TIMES_2EXP|split|1', axiom, ![V_27n_27, V_27x_27]: s('type.num.num','const.bit.TIMES_2EXP_2'(s('type.num.num',V_27n_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27x_27))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),'const.numeral.iDUB_0'),s('type.num.num',V_27n_27),s('type.num.num',V_27x_27)))))).
fof('ARITY_0_1_const.numeral_bit.iDIV2', axiom, ![VV0]: s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.iDIV2_0'),s('type.num.num',VV0))) = s('type.num.num','const.numeral_bit.iDIV2_1'(s('type.num.num',VV0)))).
fof('thm.numeral_bit.NUMERAL_iDIV2|split|0', axiom, s('type.num.num','const.numeral_bit.iDIV2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.ZERO_0')).
fof('thm.numeral_bit.NUMERAL_iDIV2|split|1', axiom, s('type.num.num','const.numeral_bit.iDIV2_1'(s('type.num.num','const.numeral_bit.iSUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.ZERO_0')).
fof('thm.numeral_bit.NUMERAL_iDIV2|split|2', axiom, ![V_27n_27]: s('type.num.num','const.numeral_bit.iDIV2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))) = s('type.num.num',V_27n_27)).
fof('thm.numeral_bit.NUMERAL_iDIV2|split|3', axiom, ![V_27n_27]: s('type.num.num','const.numeral_bit.iDIV2_1'(s('type.num.num','const.numeral_bit.iSUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))))) = s('type.num.num','const.numeral_bit.iSUC_1'(s('type.num.num',V_27n_27)))).
fof('thm.numeral_bit.NUMERAL_iDIV2|split|4', axiom, ![V_27n_27]: s('type.num.num','const.numeral_bit.iDIV2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',V_27n_27))))) = s('type.num.num','const.numeral_bit.iSUC_1'(s('type.num.num',V_27n_27)))).
fof('thm.numeral_bit.NUMERAL_iDIV2|split|5', axiom, ![V_27n_27]: s('type.num.num','const.numeral_bit.iDIV2_1'(s('type.num.num','const.numeral_bit.iSUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',V_27n_27))))))) = s('type.num.num','const.numeral_bit.iSUC_1'(s('type.num.num',V_27n_27)))).
fof('thm.numeral_bit.NUMERAL_iDIV2|split|6', axiom, ![V_27n_27]: s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral_bit.iSUC_1'(s('type.num.num',V_27n_27))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27)))))).
fof('thm.numeral_bit.NUMERAL_DIV_2EXP|split|0', axiom, ![V_27n_27]: s('type.num.num','const.bit.DIV_2EXP_2'(s('type.num.num',V_27n_27),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.|48|_0')).
fof('thm.numeral_bit.NUMERAL_DIV_2EXP|split|1', axiom, ![V_27n_27, V_27x_27]: s('type.num.num','const.bit.DIV_2EXP_2'(s('type.num.num',V_27n_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27x_27))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.iDIV2_0'),s('type.num.num',V_27n_27),s('type.num.num',V_27x_27)))))).
fof('thm.numeral_bit.numeral_bit_39_prove_ltb', axiom, s('type.num.num','const.numeral_bit.iDIV2_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.|48|_0')).
fof('thm.numeral_bit.NUMERAL_SFUNPOW_iDIV2|split|0', axiom, ![V_27x_27]: s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.iDIV2_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num',V_27x_27))) = s('type.num.num',V_27x_27)).
fof('thm.numeral_bit.NUMERAL_SFUNPOW_iDIV2|split|1', axiom, ![V_27y_27]: s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.iDIV2_0'),s('type.num.num',V_27y_27),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.|48|_0')).
fof('thm.numeral_bit.NUMERAL_SFUNPOW_iDIV2|split|2', axiom, ![V_27n_27, V_27x_27]: s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.iDIV2_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))),s('type.num.num',V_27x_27))) = s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.iDIV2_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27n_27))),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.iDIV2_0'),s('type.num.num',V_27x_27)))))).
fof('thm.numeral_bit.NUMERAL_SFUNPOW_iDIV2|split|3', axiom, ![V_27n_27, V_27x_27]: s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.iDIV2_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',V_27n_27))))),s('type.num.num',V_27x_27))) = s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.iDIV2_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27n_27))),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.iDIV2_0'),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.iDIV2_0'),s('type.num.num',V_27x_27)))))))).
fof('thm.numeral_bit.numeral_bit_4|49|_prove_ltb', axiom, s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.|48|_0')).
fof('thm.numeral_bit.NUMERAL_SFUNPOW_iDUB|split|0', axiom, ![V_27x_27]: s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),'const.numeral.iDUB_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num',V_27x_27))) = s('type.num.num',V_27x_27)).
fof('thm.numeral_bit.NUMERAL_SFUNPOW_iDUB|split|1', axiom, ![V_27y_27]: s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),'const.numeral.iDUB_0'),s('type.num.num',V_27y_27),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.|48|_0')).
fof('thm.numeral_bit.NUMERAL_SFUNPOW_iDUB|split|2', axiom, ![V_27n_27, V_27x_27]: s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),'const.numeral.iDUB_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))),s('type.num.num',V_27x_27))) = s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),'const.numeral.iDUB_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27n_27))),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.numeral.iDUB_0'),s('type.num.num',V_27x_27)))))).
fof('thm.numeral_bit.NUMERAL_SFUNPOW_iDUB|split|3', axiom, ![V_27n_27, V_27x_27]: s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),'const.numeral.iDUB_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',V_27n_27))))),s('type.num.num',V_27x_27))) = s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),'const.numeral.iDUB_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27n_27))),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.numeral.iDUB_0'),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.numeral.iDUB_0'),s('type.num.num',V_27x_27)))))))).
fof('thm.numeral_bit.NUMERAL_SFUNPOW_FDUB|split|0', axiom, ![V_27f_27, V_27x_27]: s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),V_27f_27))),s('type.num.num','const.num.|48|_0'),s('type.num.num',V_27x_27))) = s('type.num.num',V_27x_27)).
fof('thm.numeral_bit.NUMERAL_SFUNPOW_FDUB|split|1', axiom, ![V_27f_27, V_27y_27]: s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),V_27f_27))),s('type.num.num',V_27y_27),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.|48|_0')).
fof('thm.numeral_bit.NUMERAL_SFUNPOW_FDUB|split|2', axiom, ![V_27f_27, V_27n_27, V_27x_27]: s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),V_27f_27))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))),s('type.num.num',V_27x_27))) = s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),V_27f_27))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27n_27))),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),V_27f_27))),s('type.num.num',V_27x_27)))))).
fof('thm.numeral_bit.NUMERAL_SFUNPOW_FDUB|split|3', axiom, ![V_27f_27, V_27n_27, V_27x_27]: s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),V_27f_27))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',V_27n_27))))),s('type.num.num',V_27x_27))) = s('type.num.num','const.numeral_bit.SFUNPOW_3'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),V_27f_27))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',V_27n_27))),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),V_27f_27))),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),V_27f_27))),s('type.num.num',V_27x_27)))))))).
fof('thm.numeral_bit.FDUB_iDIV2', axiom, ![V_27x_27]: s('type.num.num','const.numeral_bit.FDUB_2'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.iDIV2_0'),s('type.num.num',V_27x_27))) = s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.iDIV2_0'),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.iDIV2_0'),s('type.num.num',V_27x_27)))))).
fof('thm.numeral_bit.FDUB_iDUB', axiom, ![V_27x_27]: s('type.num.num','const.numeral_bit.FDUB_2'(s('fun'('type.num.num','type.num.num'),'const.numeral.iDUB_0'),s('type.num.num',V_27x_27))) = s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.numeral.iDUB_0'),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.numeral.iDUB_0'),s('type.num.num',V_27x_27)))))).
fof('thm.numeral_bit.FDUB_FDUB|split|0', axiom, ![V_27f_27]: s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),V_27f_27))))),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.ZERO_0')).
fof('thm.numeral_bit.FDUB_FDUB|split|1', axiom, ![V_27f_27, V_27x_27]: s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),V_27f_27))))),s('type.num.num','const.numeral_bit.iSUC_1'(s('type.num.num',V_27x_27))))) = s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),V_27f_27))),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),V_27f_27))),s('type.num.num','const.numeral_bit.iSUC_1'(s('type.num.num',V_27x_27)))))))).
fof('thm.numeral_bit.FDUB_FDUB|split|2', axiom, ![V_27f_27, V_27x_27]: s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),V_27f_27))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27x_27))))) = s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),V_27f_27))),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),V_27f_27))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27x_27)))))))).
fof('thm.numeral_bit.FDUB_FDUB|split|3', axiom, ![V_27f_27, V_27x_27]: s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),V_27f_27))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',V_27x_27))))) = s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),V_27f_27))),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'const.numeral_bit.FDUB_1'(s('fun'('type.num.num','type.num.num'),V_27f_27))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',V_27x_27)))))))).
fof('ARITY_0_2_const.logroot.LOG', axiom, ![VV0, VV1]: s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'happ'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.logroot.LOG_0'),s('type.num.num',VV0))),s('type.num.num',VV1))) = s('type.num.num','const.logroot.LOG_2'(s('type.num.num',VV0),s('type.num.num',VV1)))).
fof('thm.numeral_bit.LOG_compute', axiom, ![V_27base_7c32_7c_3c_7c32_7c2_7c32_7cor_7c32_7cn_7c32_7c_3d_7c32_7c_7c48_7c_27, V_27m_27, V_27n_27]: ?[Vv]: ((p(s('bool',Vv)) <=> (p(s('bool','const.prim_rec.<_2'(s('type.num.num',V_27m_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.num.num',V_27n_27) = s('type.num.num','const.num.|48|_0'))) & s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'happ'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.logroot.LOG_0'),s('type.num.num',V_27m_27))),s('type.num.num',V_27n_27))) = s('type.num.num','const.bool.COND_3'(s('bool',Vv),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'happ'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.combin.FAIL_2'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.logroot.LOG_0'),s('bool',V_27base_7c32_7c_3c_7c32_7c2_7c32_7cor_7c32_7cn_7c32_7c_3d_7c32_7c_7c48_7c_27))),s('type.num.num',V_27m_27))),s('type.num.num',V_27n_27))),s('type.num.num','const.bool.COND_3'(s('bool','const.prim_rec.<_2'(s('type.num.num',V_27n_27),s('type.num.num',V_27m_27))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),'happ'(s('fun'('type.num.num','fun'('type.num.num','type.num.num')),'const.logroot.LOG_0'),s('type.num.num',V_27m_27))),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',V_27n_27),s('type.num.num',V_27m_27))))))))))))).
fof('thm.numeral_bit.iLOG2_def', axiom, ![V_27n_27]: s('type.num.num','const.numeral_bit.iLOG2_1'(s('type.num.num',V_27n_27))) = s('type.num.num','const.bit.LOG2_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27n_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))).
fof('thm.numeral_bit.numeral_ilog2|split|0', axiom, s('type.num.num','const.numeral_bit.iLOG2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.|48|_0')).
fof('thm.numeral_bit.numeral_ilog2|split|1', axiom, ![V_27n_27]: s('type.num.num','const.numeral_bit.iLOG2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.numeral_bit.iLOG2_1'(s('type.num.num',V_27n_27)))))).
fof('thm.numeral_bit.numeral_ilog2|split|2', axiom, ![V_27n_27]: s('type.num.num','const.numeral_bit.iLOG2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',V_27n_27))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.numeral_bit.iLOG2_1'(s('type.num.num',V_27n_27)))))).
fof('thm.numeral_bit.numeral_log2|split|0', axiom, ![V_27n_27]: s('type.num.num','const.bit.LOG2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))))) = s('type.num.num','const.numeral_bit.iLOG2_1'(s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',V_27n_27)))))).
fof('thm.numeral_bit.numeral_log2|split|1', axiom, ![V_27n_27]: s('type.num.num','const.bit.LOG2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',V_27n_27))))))) = s('type.num.num','const.numeral_bit.iLOG2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27)))))).
fof('thm.numeral_bit.MOD_2EXP_EQ|split|0', axiom, ![V_27a_27, V_27b_27]: s('bool','const.bit.MOD_2EXP_EQ_3'(s('type.num.num','const.num.|48|_0'),s('type.num.num',V_27a_27),s('type.num.num',V_27b_27))) = s('bool','T_0')).
fof('thm.numeral_bit.MOD_2EXP_EQ|split|1', axiom, ![V_27n_27, V_27a_27, V_27b_27]: (p(s('bool','const.bit.MOD_2EXP_EQ_3'(s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27))),s('type.num.num',V_27a_27),s('type.num.num',V_27b_27)))) <=> (s('bool','const.arithmetic.ODD_1'(s('type.num.num',V_27a_27))) = s('bool','const.arithmetic.ODD_1'(s('type.num.num',V_27b_27))) & p(s('bool','const.bit.MOD_2EXP_EQ_3'(s('type.num.num',V_27n_27),s('type.num.num','const.arithmetic.DIV2_1'(s('type.num.num',V_27a_27))),s('type.num.num','const.arithmetic.DIV2_1'(s('type.num.num',V_27b_27))))))))).
fof('thm.numeral_bit.MOD_2EXP_EQ|split|2', axiom, ![V_27n_27, V_27a_27]: s('bool','const.bit.MOD_2EXP_EQ_3'(s('type.num.num',V_27n_27),s('type.num.num',V_27a_27),s('type.num.num',V_27a_27))) = s('bool','T_0')).
fof('thm.numeral_bit.numeral_bit_52_prove_ltb', axiom, ![V_27n_27]: s('type.num.num','const.bit.BITS_3'(s('type.num.num',V_27n_27),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))).
fof('thm.numeral_bit.MOD_2EXP_MAX|split|0', axiom, ![V_27a_27]: s('bool','const.bit.MOD_2EXP_MAX_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',V_27a_27))) = s('bool','T_0')).
fof('thm.numeral_bit.MOD_2EXP_MAX|split|1', axiom, ![V_27n_27, V_27a_27]: (p(s('bool','const.bit.MOD_2EXP_MAX_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27))),s('type.num.num',V_27a_27)))) <=> (p(s('bool','const.arithmetic.ODD_1'(s('type.num.num',V_27a_27)))) & p(s('bool','const.bit.MOD_2EXP_MAX_2'(s('type.num.num',V_27n_27),s('type.num.num','const.arithmetic.DIV2_1'(s('type.num.num',V_27a_27))))))))).
fof('thm.numeral_bit.LOWEST_SET_BIT', axiom, ![V_27n_27]: (~ (s('type.num.num',V_27n_27) = s('type.num.num','const.num.|48|_0')) => s('type.num.num','const.bit.LOWEST_SET_BIT_1'(s('type.num.num',V_27n_27))) = s('type.num.num','const.bool.COND_3'(s('bool','const.arithmetic.ODD_1'(s('type.num.num',V_27n_27))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.bit.LOWEST_SET_BIT_1'(s('type.num.num','const.arithmetic.DIV2_1'(s('type.num.num',V_27n_27))))))))))).
fof('thm.numeral_bit.LOWEST_SET_BIT_compute|split|0', axiom, ![V_27n_27]: s('type.num.num','const.bit.LOWEST_SET_BIT_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',V_27n_27))))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.bit.LOWEST_SET_BIT_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27)))))))))).
fof('thm.numeral_bit.LOWEST_SET_BIT_compute|split|1', axiom, ![V_27n_27]: s('type.num.num','const.bit.LOWEST_SET_BIT_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))))) = s('type.num.num','const.num.|48|_0')).
