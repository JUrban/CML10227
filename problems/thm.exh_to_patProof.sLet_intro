include('incl/logic.ax').
include('incl/bool.ax').
include('incl/marker.ax').
include('incl/num.ax').
include('incl/combin.ax').
include('incl/normalForms.ax').
include('incl/sat.ax').
include('incl/relation.ax').
include('incl/pair.ax').
include('incl/prim_rec.ax').
include('incl/arithmetic.ax').
include('incl/numeral.ax').
include('incl/ConseqConv.ax').
include('incl/sum.ax').
include('incl/one.ax').
include('incl/option.ax').
include('incl/while.ax').
include('incl/operator.ax').
include('incl/basicSize.ax').
include('incl/numpair.ax').
include('incl/pred_set.ax').
include('incl/ind_type.ax').
include('incl/list.ax').
include('incl/rich_list.ax').
include('incl/quantHeuristics.ax').
include('incl/fcp.ax').
include('incl/logroot.ax').
include('incl/bit.ax').
include('incl/string.ax').
include('incl/numposrep.ax').
include('incl/ASCIInumbers.ax').
include('incl/numeral_bit.ax').
include('incl/sum_num.ax').
include('incl/words.ax').
include('incl/alignment.ax').
include('incl/sorting.ax').
include('incl/finite_map.ax').
include('incl/alist.ax').
include('incl/sptree.ax').
include('incl/indexedLists.ax').
include('incl/res_quan.ax').
include('incl/quotient.ax').
include('incl/quotient_list.ax').
include('incl/set_sep.ax').
include('incl/set_relation.ax').
include('incl/wot.ax').
include('incl/toto.ax').
include('incl/comparison.ax').
include('incl/llist.ax').
include('incl/misc.ax').
include('incl/quotient_pair.ax').
include('incl/quotient_sum.ax').
include('incl/divides.ax').
include('incl/gcd.ax').
include('incl/quotient_option.ax').
include('incl/integer.ax').
include('incl/Omega.ax').
include('incl/int_arith.ax').
include('incl/integer_word.ax').
include('incl/lib.ax').
include('incl/ffi.ax').
include('incl/grammar.ax').
include('incl/peg.ax').
include('incl/pegexec.ax').
include('incl/state_transformer.ax').
include('incl/lprefix_lub.ax').
include('incl/tokens.ax').
include('incl/gram.ax').
include('incl/ast.ax').
include('incl/asm.ax').
include('incl/semanticPrimitives.ax').
include('incl/reg_alloc.ax').
include('incl/typeSystem.ax').
include('incl/funBigStep.ax').
include('incl/termination.ax').
include('incl/labLang.ax').
include('incl/lab_filter.ax').
include('incl/lab_to_target.ax').
include('incl/closLang.ax').
include('incl/bvl.ax').
include('incl/bvp.ax').
include('incl/bvp_live.ax').
include('incl/smallStep.ax').
include('incl/bigStep.ax').
include('incl/db_vars.ax').
include('incl/clos_free.ax').
include('incl/clos_annotate.ax').
include('incl/clos_number.ax').
include('incl/tokenUtils.ax').
include('incl/cmlPtreeConversion.ax').
include('incl/lexer_fun.ax').
include('incl/NTproperties.ax').
include('incl/initialProgram.ax').
include('incl/bvp_simp.ax').
include('incl/bvi.ax').
include('incl/bvp_space.ax').
include('incl/bvi_to_bvp.ax').
include('incl/evalProps.ax').
include('incl/determ.ax').
include('incl/bigClock.ax').
include('incl/interp.ax').
include('incl/funBigStepEquiv.ax').
include('incl/conLang.ax').
include('incl/exhLang.ax').
include('incl/dec_to_exh.ax').
include('incl/patLang.ax').
include('incl/pat_to_clos.ax').
include('incl/bvl_jump.ax').
include('incl/clos_call.ax').
include('incl/clos_remove.ax').
include('incl/clos_mti.ax').
include('incl/clos_to_bvl.ax').
include('incl/bvl_inline.ax').
include('incl/asmSem.ax').
include('incl/asmProps.ax').
include('incl/targetSem.ax').
include('incl/typeSoundInvariants.ax').
include('incl/typeSysProps.ax').
include('incl/bvl_handle.ax').
include('incl/bvl_const.ax').
include('incl/bvl_to_bvi.ax').
include('incl/modLang.ax').
include('incl/mod_to_con.ax').
include('incl/bigSmallInvariants.ax').
include('incl/con_to_dec.ax').
include('incl/targetProps.ax').
include('incl/weakening.ax').
include('incl/bigSmallEquiv.ax').
include('incl/untypedSafety.ax').
include('incl/funBigStepProps.ax').
include('incl/source_to_mod.ax').
include('incl/semantics.ax').
include('incl/initSemEnv.ax').
include('incl/typeSound.ax').
include('incl/wordLang.ax').
include('incl/exh_to_pat.ax').
include('incl/wordSem.ax').
include('incl/labSem.ax').
include('incl/semanticsProps.ax').
include('incl/labProps.ax').
include('incl/closSem.ax').
include('incl/closProps.ax').
include('incl/patSem.ax').
include('incl/modSem.ax').
include('incl/bvlSem.ax').
include('incl/bviSem.ax').
include('incl/bvlProps.ax').
include('incl/bvpSem.ax').
include('incl/exhSem.ax').
include('incl/conSem.ax').
include('incl/decSem.ax').
include('incl/conProps.ax').
include('incl/decProps.ax').
include('incl/exhProps.ax').
include('incl/modProps.ax').
include('incl/patProps.ax').
include('incl/reg_allocProof.ax').
include('incl/bviProps.ax').
include('incl/bvpProps.ax').
include('incl/bvp_simpProof.ax').
include('incl/bvp_spaceProof.ax').
include('incl/bvl_jumpProof.ax').
include('incl/wellorder.ax').
include('incl/cardinal.ax').
include('incl/hrat.ax').
include('incl/hreal.ax').
include('incl/realax.ax').
include('incl/real.ax').
include('incl/topology.ax').
include('incl/nets.ax').
include('incl/seq.ax').
include('incl/lim.ax').
include('incl/powser.ax').
include('incl/transc.ax').
include('incl/intreal.ax').
include('incl/binary_ieee.ax').
include('incl/tailrec.ax').
include('incl/prog.ax').
include('incl/temporal.ax').
include('incl/address.ax').
include('incl/state.ax').
include('incl/temporal_state.ax').
include('incl/machine_ieee.ax').
include('incl/bitstring.ax').
include('incl/arm.ax').
include('incl/blast.ax').
include('incl/update.ax').
include('incl/arm_step.ax').
include('incl/arm6_target.ax').
include('incl/arm6_eval_encode.ax').
include('incl/mlstring.ax').
include('incl/patternMatches.ax').
include('incl/ml_translator.ax').
include('incl/ml_optimise.ax').
include('incl/ml_pmatch.ax').
include('incl/mini_prelude.ax').
include('incl/bag.ax').
include('incl/benchmark.ax').
include('incl/arm8.ax').
include('incl/arm8_step.ax').
include('incl/clos_relation.ax').
include('incl/clos_relationProps.ax').
include('incl/clos_removeProof.ax').
include('incl/simpleSexp.ax').
include('incl/fromSexp.ax').
include('incl/word_inst.ax').
include('incl/word_alloc.ax').
include('incl/word_remove.ax').
include('incl/word_to_word.ax').
include('incl/stackLang.ax').
include('incl/bvp_to_word.ax').
include('incl/stack_alloc.ax').
include('incl/riscv.ax').
include('incl/riscv_step.ax').
include('incl/std_prelude.ax').
include('incl/holSyntaxLib.ax').
include('incl/holSyntax.ax').
include('incl/holSyntaxExtra.ax').
include('incl/ml_module_demo.ax').
include('incl/bvp_liveProof.ax').
include('incl/PhysicistsQueue.ax').
include('incl/holBoolSyntax.ax').
include('incl/holAxiomsSyntax.ax').
include('incl/setSpec.ax').
include('incl/holSemantics.ax').
include('incl/holSemanticsExtra.ax').
include('incl/holBool.ax').
include('incl/commonUnif.ax').
include('incl/term.ax').
include('incl/subst.ax').
include('incl/walk.ax').
include('incl/walkstar.ax').
include('incl/unifDef.ax').
include('incl/unifProps.ax').
include('incl/redUnif.ax').
include('incl/parmove.ax').
include('incl/word_to_stack.ax').
include('incl/bvl_inlineProof.ax').
include('incl/clos_known.ax').
include('incl/clos_knownProof.ax').
include('incl/okasaki_misc.ax').
include('incl/UnbalancedSet.ax').
include('incl/mips.ax').
include('incl/mips_step.ax').
include('incl/mips_target.ax').
include('incl/mips_target_correct.ax').
include('incl/bvl_constProof.ax').
include('incl/int_bitwise.ax').
include('incl/copying_gc.ax').
include('incl/bvp_to_wordProps.ax').
include('incl/jrhSet.ax').
include('incl/BankersQueue.ax').
include('incl/cmlPEG.ax').
include('incl/clos_numberProof.ax').
include('incl/cmlParse.ax').
include('incl/holKernel.ax').
include('incl/reader.ax').
include('incl/x64.ax').
include('incl/source_to_modProof.ax').
include('incl/collapse.ax').
include('incl/infer_t.ax').
include('incl/unify.ax').
include('incl/infer.ax').
include('incl/inferProps.ax').
include('incl/infer_eComplete.ax').
include('incl/bvl_handleProof.ax').
include('incl/dec_to_exhProof.ax').
include('incl/regexpMatch.ax').
include('incl/ninetyOne.ax').
include('incl/example_91.ax').
include('incl/arm8_target.ax').
include('incl/BatchedQueue.ax').
include('incl/stack_remove.ax').
include('incl/stack_names.ax').
include('incl/stack_to_lab.ax').
include('incl/backend.ax').
include('incl/compiler.ax').
include('incl/ImplicitQueue.ax').
include('incl/stackSem.ax').
include('incl/gramProps.ax').
include('incl/pegSound.ax').
include('incl/holKernelProof.ax').
include('incl/pegComplete.ax').
include('incl/cmlPtreeConversionProps.ax').
include('incl/simpleIO.ax').
include('incl/LazyPairingHeap.ax').
include('incl/stackProps.ax').
include('incl/stack_removeProof.ax').
include('incl/holSoundness.ax').
include('incl/holExtension.ax').
include('incl/lexer_impl.ax').
include('incl/SplayHeap.ax').
include('incl/infer_eSound.ax').
include('incl/wordProps.ax').
include('incl/type_eDeterm.ax').
include('incl/inferComplete.ax').
include('incl/BinaryRandomAccessLists.ax').
include('incl/BinomialHeap.ax').
include('incl/ml_pmatch_demo.ax').
include('incl/holKernelPmatch.ax').
include('incl/ml_monad.ax').
include('incl/ml_hol_kernel.ax').
include('incl/slr_parser_gen.ax').
include('incl/word_instProof.ax').
include('incl/bvi_to_bvpProof.ax').
include('incl/setModel.ax').
include('incl/BottomUpMergeSort.ax').
include('incl/clos_freeProof.ax').
include('incl/example_qsort.ax').
include('incl/PairingHeap.ax').
include('incl/arm6_target_correct.ax').
include('incl/ml_hol_init.ax').
include('incl/x64_step.ax').
include('incl/x64_target.ax').
include('incl/x64_eval_encode.ax').
include('incl/arm8_target_correct.ax').
include('incl/clos_mtiProof.ax').
include('incl/LeftistHeap.ax').
include('incl/word_removeProof.ax').
include('incl/riscv_target.ax').
include('incl/riscv_target_correct.ax').
include('incl/RedBlackSet.ax').
include('incl/stack_namesProof.ax').
fof('thm.exh_to_patProof.compile_v_UNION_primitive_def', axiom, s('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'const.exh_to_patProof.compile_v_UNION_0') = s('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'const.relation.WFREC_2'(s('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'const.min.@_1'(s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'bool'),'const.relation.WF_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.num.num','bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'fun'('type.num.num','bool')),'_dst_x00x11_2'(s('fun'('fun'('type.list.list'('type.exhSem.v'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'fun'('type.num.num','fun'('type.list.list'('type.exhSem.v'),'bool'))),'_dstsel_0_x001x011_2'(s('fun'('type.list.list'('type.exhSem.v'),'type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v'))),'const.sum.INR_0'),s('fun'('type.num.num','fun'('type.list.list'('type.exhSem.v'),'type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')))),'_dst_x00x11_2'(s('fun'('type.exhSem.v','type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v'))),'const.sum.INL_0'),s('fun'('type.num.num','fun'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.Conv_0'))))))))),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.exhLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'fun'('type.exhLang.exp','bool')),'_dst_x00x11_2'(s('fun'('fun'('type.list.list'('type.string.char'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'fun'('type.exhLang.exp','fun'('type.list.list'('type.string.char'),'bool'))),'_dst_x000x111_2'(s('fun'('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'fun'('type.exhLang.exp','fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'bool')))),'_dst_x0000x1111_2'(s('fun'('fun'('type.exhSem.v','bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'fun'('type.exhLang.exp','fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'fun'('type.exhSem.v','bool'))))),'_dst_x00000x00011x11111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'fun'('type.exhSem.v','bool')),'_dst_x01x10_2'(s('fun'('type.exhSem.v','fun'('fun'('type.exhSem.v','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'fun'('type.exhSem.v','bool')),'_dst_x0x1_2'(s('fun'('type.list.list'('type.exhSem.v'),'fun'('type.exhSem.v','bool')),'const.list.LIST_TO_SET_0'),s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.exhSem.v')),'happ'(s('fun'('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.exhSem.v'))),'const.list.MAP_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))))))),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'fun'('type.exhLang.exp','fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'fun'('type.exhSem.v','bool'))))),'_dstsel_0_x00001x01110_2'(s('fun'('type.exhSem.v','type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v'))),'const.sum.INL_0'),s('fun'('type.exhLang.exp','fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v'))))),'_dst_x000x111_2'(s('fun'('type.exhSem.v','type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v'))),'const.sum.INL_0'),s('fun'('type.exhLang.exp','fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.exhSem.v'))),'_dst_x001x010x100_3'(s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'fun'('type.list.list'('type.string.char'),'fun'('type.exhLang.exp','type.exhSem.v'))),'const.exhSem.Closure_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s('fun'('type.exhLang.exp','type.exhLang.exp'),'_i_0_0'))))))))))))))))),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.string.char'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'fun'('type.list.list'('type.string.char'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'bool'))),'_dst_x000x111_2'(s('fun'('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'bool')))),'_dst_x0000x1111_2'(s('fun'('fun'('type.exhSem.v','bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'fun'('type.exhSem.v','bool'))))),'_dst_x00000x00011x11111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'fun'('type.exhSem.v','bool')),'_dst_x01x10_2'(s('fun'('type.exhSem.v','fun'('fun'('type.exhSem.v','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'fun'('type.exhSem.v','bool')),'_dst_x0x1_2'(s('fun'('type.list.list'('type.exhSem.v'),'fun'('type.exhSem.v','bool')),'const.list.LIST_TO_SET_0'),s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.exhSem.v')),'happ'(s('fun'('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.exhSem.v'))),'const.list.MAP_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))))))),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'fun'('type.exhSem.v','bool'))))),'_dstsel_0_x00001x01110_2'(s('fun'('type.exhSem.v','type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v'))),'const.sum.INL_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v'))))),'_dst_x000x111_2'(s('fun'('type.exhSem.v','type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v'))),'const.sum.INL_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.exhSem.v'))),'_dst_x001x010x100_3'(s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'fun'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.Recclosure_0'),s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp')))),'_i_0_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'))))))))))))))))),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.exhSem.v'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'fun'('type.list.list'('type.exhSem.v'),'bool')),'_dstsel_0_x01x01_2'(s('fun'('type.list.list'('type.exhSem.v'),'type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v'))),'const.sum.INR_0'),s('fun'('type.list.list'('type.exhSem.v'),'type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v'))),'_dst_x0x1_2'(s('fun'('type.exhSem.v','type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v'))),'const.sum.INL_0'),s('fun'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.exhSem.Vectorv_0'))))))),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.exhSem.v'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'fun'('type.list.list'('type.exhSem.v'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.exhSem.v','bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'fun'('type.list.list'('type.exhSem.v'),'fun'('type.exhSem.v','bool'))),'_dstsel_0_x001x011_2'(s('fun'('type.exhSem.v','type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v'))),'const.sum.INL_0'),s('fun'('type.list.list'('type.exhSem.v'),'fun'('type.exhSem.v','type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.exhSem.v'),'type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v'))),'const.sum.INR_0'),s('fun'('type.list.list'('type.exhSem.v'),'fun'('type.exhSem.v','type.list.list'('type.exhSem.v'))),'_dst_x01x10_2'(s('fun'('type.exhSem.v','fun'('type.list.list'('type.exhSem.v'),'type.list.list'('type.exhSem.v'))),'const.list.CONS_0'),s('fun'('type.list.list'('type.exhSem.v'),'type.list.list'('type.exhSem.v')),'_i_0_0'))))))))))),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.exhSem.v','bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'fun'('type.exhSem.v','bool')),'_dst_x00x11_2'(s('fun'('fun'('type.list.list'('type.exhSem.v'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'bool')),'fun'('type.exhSem.v','fun'('type.list.list'('type.exhSem.v'),'bool'))),'_dstsel_0_x001x011_2'(s('fun'('type.list.list'('type.exhSem.v'),'type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v'))),'const.sum.INR_0'),s('fun'('type.exhSem.v','fun'('type.list.list'('type.exhSem.v'),'type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.exhSem.v'),'type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v'))),'const.sum.INR_0'),s('fun'('type.exhSem.v','fun'('type.list.list'('type.exhSem.v'),'type.list.list'('type.exhSem.v'))),'const.list.CONS_0'))))))))))))))))))))))),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')))),'_dst_x01x10x10_3'(s('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'fun'('fun'('type.exhSem.v','type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('fun'('type.list.list'('type.exhSem.v'),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))))),'const.sum.sum_CASE_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.exhSem.v','type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')))),'_dst_x01x00x10x10x10x00x10_7'(s('fun'('type.exhSem.v','fun'('fun'('type.ast.lit','type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('fun'('type.num.num','fun'('type.list.list'('type.exhSem.v'),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')))),'fun'('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'fun'('type.list.list'('type.string.char'),'fun'('type.exhLang.exp','type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))))),'fun'('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'fun'('type.list.list'('type.string.char'),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))))),'fun'('fun'('type.num.num','type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('fun'('type.list.list'('type.exhSem.v'),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))))))))),'const.exhSem.v_CASE_0'),s('fun'('type.ast.lit','type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'_dst_x0x1_2'(s('fun'('type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'const.combin.I_0'),s('fun'('type.ast.lit','type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'_dst_x0x1_2'(s('fun'('type.patSem.v','type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'const.sum.INL_0'),s('fun'('type.ast.lit','type.patSem.v'),'const.patSem.Litv_0'))))),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.num.num','fun'('type.list.list'('type.exhSem.v'),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))))),'_dst_x000x111_2'(s('fun'('type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'const.combin.I_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.num.num','fun'('type.list.list'('type.exhSem.v'),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))))),'_dst_x000x111_2'(s('fun'('type.patSem.v','type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'const.sum.INL_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.num.num','fun'('type.list.list'('type.exhSem.v'),'type.patSem.v'))),'_dst_x000x010x101_3'(s('fun'('type.num.num','fun'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.Conv_0'),s('fun'('type.num.num','type.num.num'),'_i_0_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.list.list'('type.exhSem.v'),'type.list.list'('type.patSem.v'))),'_dst_x00x11_2'(s('fun'('type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')),'type.list.list'('type.patSem.v')),'const.sum.OUTR_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.list.list'('type.exhSem.v'),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')))),'_dstsel_0_x01_1'(s('fun'('type.list.list'('type.exhSem.v'),'type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v'))),'const.sum.INR_0'))))))))))),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'fun'('type.list.list'('type.string.char'),'fun'('type.exhLang.exp','type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')))))),'_dst_x0000x1111_2'(s('fun'('type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'const.combin.I_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'fun'('type.list.list'('type.string.char'),'fun'('type.exhLang.exp','type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')))))),'_dst_x0000x1111_2'(s('fun'('type.patSem.v','type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'const.sum.INL_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'fun'('type.list.list'('type.string.char'),'fun'('type.exhLang.exp','type.patSem.v')))),'_dst_x0000x1100x0111_3'(s('fun'('type.list.list'('type.patSem.v'),'fun'('type.patLang.exp','type.patSem.v')),'const.patSem.Closure_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.patSem.v'))),'_dst_x00x10x01_3'(s('fun'('fun'('type.exhSem.v','type.patSem.v'),'fun'('type.list.list'('type.exhSem.v'),'type.list.list'('type.patSem.v'))),'const.list.MAP_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.exhSem.v','type.patSem.v')),'_dst_x00x11_2'(s('fun'('type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')),'type.patSem.v'),'const.sum.OUTL_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.exhSem.v','type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')))),'_dstsel_0_x01_1'(s('fun'('type.exhSem.v','type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v'))),'const.sum.INL_0'))))),s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.exhSem.v')),'happ'(s('fun'('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.exhSem.v'))),'const.list.MAP_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))))),s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'fun'('type.list.list'('type.string.char'),'fun'('type.exhLang.exp','type.patLang.exp'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'fun'('type.exhLang.exp','type.patLang.exp')),'const.exh_to_pat.compile_exp_0'),s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'fun'('type.list.list'('type.string.char'),'type.list.list'('type.option.option'('type.list.list'('type.string.char'))))),'_dst_x00x01x10_3'(s('fun'('type.option.option'('type.list.list'('type.string.char')),'fun'('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'type.list.list'('type.option.option'('type.list.list'('type.string.char'))))),'const.list.CONS_0'),s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.option.option'('type.list.list'('type.string.char')))),'happ'(s('fun'('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.option.option'('type.list.list'('type.string.char'))))),'const.list.MAP_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))))))))))))))),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'fun'('type.list.list'('type.string.char'),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')))))),'_dst_x0000x1111_2'(s('fun'('type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'const.combin.I_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'fun'('type.list.list'('type.string.char'),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')))))),'_dst_x0000x1111_2'(s('fun'('type.patSem.v','type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'const.sum.INL_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'fun'('type.list.list'('type.string.char'),'type.patSem.v')))),'_dst_x0000x1100x0110x0011_4'(s('fun'('type.list.list'('type.patSem.v'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.num.num','type.patSem.v'))),'const.patSem.Recclosure_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.patSem.v'))),'_dst_x00x10x01_3'(s('fun'('fun'('type.exhSem.v','type.patSem.v'),'fun'('type.list.list'('type.exhSem.v'),'type.list.list'('type.patSem.v'))),'const.list.MAP_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.exhSem.v','type.patSem.v')),'_dst_x00x11_2'(s('fun'('type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')),'type.patSem.v'),'const.sum.OUTL_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.exhSem.v','type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')))),'_dstsel_0_x01_1'(s('fun'('type.exhSem.v','type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v'))),'const.sum.INL_0'))))),s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.exhSem.v')),'happ'(s('fun'('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.exhSem.v'))),'const.list.MAP_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))))),s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'type.list.list'('type.patLang.exp'))),'_dst_x00x11x01_3'(s('fun'('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'type.list.list'('type.patLang.exp'))),'const.exh_to_pat.compile_funs_0'),s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'type.list.list'('type.option.option'('type.list.list'('type.string.char'))))),'_dst_x00x01x10_3'(s('fun'('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'fun'('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'type.list.list'('type.option.option'('type.list.list'('type.string.char'))))),'const.list.APPEND_0'),s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'type.list.list'('type.option.option'('type.list.list'('type.string.char')))),'happ'(s('fun'('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp')),'type.option.option'('type.list.list'('type.string.char'))),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'type.list.list'('type.option.option'('type.list.list'('type.string.char'))))),'const.list.MAP_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp')),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'))))),s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.option.option'('type.list.list'('type.string.char')))),'happ'(s('fun'('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.option.option'('type.list.list'('type.string.char'))))),'const.list.MAP_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))))))),s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp')))),'_i_0_0'))),s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'fun'('type.list.list'('type.string.char'),'type.num.num')),'_dst_x00x10x11_3'(s('fun'('type.num.num','fun'('type.option.option'('type.num.num'),'type.num.num')),'const.lib.the_0'),s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'type.num.num'),'const.list.LENGTH_0'),s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'fun'('type.list.list'('type.string.char'),'type.option.option'('type.num.num'))),'_dst_x01x10x00_3'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.list.list'('type.string.char')),'fun'('type.num.num','type.option.option'('type.num.num')))),'const.misc.find_index_0'),s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'type.list.list'('type.list.list'('type.string.char'))),'happ'(s('fun'('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp')),'type.list.list'('type.string.char')),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'type.list.list'('type.list.list'('type.string.char')))),'const.list.MAP_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.num.num','const.num.|48|_0'))))))))))),s('fun'('type.num.num','type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'_dst_x0x1_2'(s('fun'('type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'const.combin.I_0'),s('fun'('type.num.num','type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'_dst_x0x1_2'(s('fun'('type.patSem.v','type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'const.sum.INL_0'),s('fun'('type.num.num','type.patSem.v'),'const.patSem.Loc_0'))))),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.list.list'('type.exhSem.v'),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')))),'_dst_x00x11_2'(s('fun'('type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'const.combin.I_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.list.list'('type.exhSem.v'),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')))),'_dst_x00x11_2'(s('fun'('type.patSem.v','type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'const.sum.INL_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.list.list'('type.exhSem.v'),'type.patSem.v')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.patSem.Vectorv_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.list.list'('type.exhSem.v'),'type.list.list'('type.patSem.v'))),'_dst_x00x11_2'(s('fun'('type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')),'type.list.list'('type.patSem.v')),'const.sum.OUTR_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.list.list'('type.exhSem.v'),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')))),'_dstsel_0_x01_1'(s('fun'('type.list.list'('type.exhSem.v'),'type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v'))),'const.sum.INR_0'))))))))))))),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.list.list'('type.exhSem.v'),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')))),'_dst_x01x00x10_3'(s('fun'('type.list.list'('type.exhSem.v'),'fun'('type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')),'fun'('fun'('type.exhSem.v','fun'('type.list.list'('type.exhSem.v'),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')))),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))))),'const.list.list_CASE_0'),s('type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')),'happ'(s('fun'('type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'const.combin.I_0'),s('type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')),'happ'(s('fun'('type.list.list'('type.patSem.v'),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'const.sum.INR_0'),s('type.list.list'('type.patSem.v'),'const.list.NIL_0'))))),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.exhSem.v','fun'('type.list.list'('type.exhSem.v'),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))))),'_dst_x000x111_2'(s('fun'('type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'const.combin.I_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.exhSem.v','fun'('type.list.list'('type.exhSem.v'),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))))),'_dst_x000x111_2'(s('fun'('type.list.list'('type.patSem.v'),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'const.sum.INR_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.exhSem.v','fun'('type.list.list'('type.exhSem.v'),'type.list.list'('type.patSem.v')))),'_dst_x000x110x101_3'(s('fun'('type.patSem.v','fun'('type.list.list'('type.patSem.v'),'type.list.list'('type.patSem.v'))),'const.list.CONS_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.exhSem.v','type.patSem.v')),'_dst_x00x11_2'(s('fun'('type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')),'type.patSem.v'),'const.sum.OUTL_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.exhSem.v','type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')))),'_dstsel_0_x01_1'(s('fun'('type.exhSem.v','type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v'))),'const.sum.INL_0'))))),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.list.list'('type.exhSem.v'),'type.list.list'('type.patSem.v'))),'_dst_x00x11_2'(s('fun'('type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')),'type.list.list'('type.patSem.v')),'const.sum.OUTR_0'),s('fun'('fun'('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v'))),'fun'('type.list.list'('type.exhSem.v'),'type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')))),'_dstsel_0_x01_1'(s('fun'('type.list.list'('type.exhSem.v'),'type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v'))),'const.sum.INR_0')))))))))))))))))).
fof('thm.exh_to_patProof.exh_to_patProof_|49|_prove_ltb', axiom, ![V_27a_27]: (((?[V_27l_27]: s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),V_27a_27) = s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'const.sum.INL_1'(s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',V_27l_27))))) | (?[V_27tag_27, V_27vs_27]: s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),V_27a_27) = s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'const.sum.INL_1'(s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num',V_27tag_27),s('type.list.list'('type.exhSem.v'),V_27vs_27))))) | (?[V_27env_27, V_27x_27, V_27e_27]: s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),V_27a_27) = s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'const.sum.INL_1'(s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27),s('type.list.list'('type.string.char'),V_27x_27),s('type.exhLang.exp',V_27e_27))))) | (?[V_27env_27, V_27funs_27, V_27f_27]: s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),V_27a_27) = s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'const.sum.INL_1'(s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),V_27funs_27),s('type.list.list'('type.string.char'),V_27f_27))))) | (?[V_27n_27]: s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),V_27a_27) = s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'const.sum.INL_1'(s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',V_27n_27))))) | ?[V_27vs_27]: s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),V_27a_27) = s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'const.sum.INL_1'(s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),V_27vs_27)))))))))) | (s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),V_27a_27) = s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'const.sum.INR_1'(s('type.list.list'('type.exhSem.v'),'const.list.NIL_0'))) | ?[V_27v_27, V_27vs_27]: s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),V_27a_27) = s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'const.sum.INR_1'(s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',V_27v_27),s('type.list.list'('type.exhSem.v'),V_27vs_27))))))) => (?[V_27l_27]: s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),V_27a_27) = s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'const.sum.INL_1'(s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',V_27l_27))))) | (?[V_27tag_27, V_27vs_27]: s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),V_27a_27) = s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'const.sum.INL_1'(s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num',V_27tag_27),s('type.list.list'('type.exhSem.v'),V_27vs_27))))) | (?[V_27env_27, V_27x_27, V_27e_27]: s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),V_27a_27) = s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'const.sum.INL_1'(s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27),s('type.list.list'('type.string.char'),V_27x_27),s('type.exhLang.exp',V_27e_27))))) | (?[V_27env_27, V_27funs_27, V_27f_27]: s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),V_27a_27) = s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'const.sum.INL_1'(s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),V_27funs_27),s('type.list.list'('type.string.char'),V_27f_27))))) | (?[V_27n_27]: s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),V_27a_27) = s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'const.sum.INL_1'(s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',V_27n_27))))) | (?[V_27vs_27]: s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),V_27a_27) = s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'const.sum.INL_1'(s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),V_27vs_27))))) | (s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),V_27a_27) = s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'const.sum.INR_1'(s('type.list.list'('type.exhSem.v'),'const.list.NIL_0'))) | ?[V_27v_27, V_27vs_27]: s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),V_27a_27) = s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'const.sum.INR_1'(s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',V_27v_27),s('type.list.list'('type.exhSem.v'),V_27vs_27)))))))))))))).
fof('thm.exh_to_patProof.compile_v_UNION_extract|49|_def', axiom, ![V_27x_27]: s('type.list.list'('type.patSem.v'),'const.exh_to_patProof.compile_vs_1'(s('type.list.list'('type.exhSem.v'),V_27x_27))) = s('type.list.list'('type.patSem.v'),'const.sum.OUTR_1'(s('type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')),'const.exh_to_patProof.compile_v_UNION_1'(s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'const.sum.INR_1'(s('type.list.list'('type.exhSem.v'),V_27x_27)))))))).
fof('ARITY_0_1_const.exh_to_patProof.compile_v', axiom, ![VV0]: s('type.patSem.v','happ'(s('fun'('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('type.exhSem.v',VV0))) = s('type.patSem.v','const.exh_to_patProof.compile_v_1'(s('type.exhSem.v',VV0)))).
fof('thm.exh_to_patProof.compile_v_UNION_extract|48|_def', axiom, ![V_27x_27]: s('type.patSem.v','const.exh_to_patProof.compile_v_1'(s('type.exhSem.v',V_27x_27))) = s('type.patSem.v','const.sum.OUTL_1'(s('type.sum.sum'('type.patSem.v','type.list.list'('type.patSem.v')),'const.exh_to_patProof.compile_v_UNION_1'(s('type.sum.sum'('type.exhSem.v','type.list.list'('type.exhSem.v')),'const.sum.INL_1'(s('type.exhSem.v',V_27x_27)))))))).
fof('thm.exh_to_patProof.compile_v_ind', axiom, ![V_27P_7c48_7c_27, V_27P_7c49_7c_27]: ((![V_27l_27]: p(s('bool','happ'(s('fun'('type.exhSem.v','bool'),V_27P_7c48_7c_27),s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',V_27l_27)))))) & (![V_27tag_27, V_27vs_27]: (p(s('bool','happ'(s('fun'('type.list.list'('type.exhSem.v'),'bool'),V_27P_7c49_7c_27),s('type.list.list'('type.exhSem.v'),V_27vs_27)))) => p(s('bool','happ'(s('fun'('type.exhSem.v','bool'),V_27P_7c48_7c_27),s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num',V_27tag_27),s('type.list.list'('type.exhSem.v'),V_27vs_27))))))) & (![V_27env_27, V_27x_27, V_27e_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.exhSem.v',V_27a_27),s('fun'('type.exhSem.v','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.exhSem.v'),'const.list.MAP_2'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27)))))))) => p(s('bool','happ'(s('fun'('type.exhSem.v','bool'),V_27P_7c48_7c_27),s('type.exhSem.v',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.exhSem.v','bool'),V_27P_7c48_7c_27),s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27),s('type.list.list'('type.string.char'),V_27x_27),s('type.exhLang.exp',V_27e_27))))))) & (![V_27env_27, V_27funs_27, V_27f_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.exhSem.v',V_27a_27),s('fun'('type.exhSem.v','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.exhSem.v'),'const.list.MAP_2'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27)))))))) => p(s('bool','happ'(s('fun'('type.exhSem.v','bool'),V_27P_7c48_7c_27),s('type.exhSem.v',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.exhSem.v','bool'),V_27P_7c48_7c_27),s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),V_27funs_27),s('type.list.list'('type.string.char'),V_27f_27))))))) & (![V_27n_27]: p(s('bool','happ'(s('fun'('type.exhSem.v','bool'),V_27P_7c48_7c_27),s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',V_27n_27)))))) & (![V_27vs_27]: (p(s('bool','happ'(s('fun'('type.list.list'('type.exhSem.v'),'bool'),V_27P_7c49_7c_27),s('type.list.list'('type.exhSem.v'),V_27vs_27)))) => p(s('bool','happ'(s('fun'('type.exhSem.v','bool'),V_27P_7c48_7c_27),s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),V_27vs_27))))))) & (p(s('bool','happ'(s('fun'('type.list.list'('type.exhSem.v'),'bool'),V_27P_7c49_7c_27),s('type.list.list'('type.exhSem.v'),'const.list.NIL_0')))) & ![V_27v_27, V_27vs_27]: ((p(s('bool','happ'(s('fun'('type.exhSem.v','bool'),V_27P_7c48_7c_27),s('type.exhSem.v',V_27v_27)))) & p(s('bool','happ'(s('fun'('type.list.list'('type.exhSem.v'),'bool'),V_27P_7c49_7c_27),s('type.list.list'('type.exhSem.v'),V_27vs_27))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.exhSem.v'),'bool'),V_27P_7c49_7c_27),s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',V_27v_27),s('type.list.list'('type.exhSem.v'),V_27vs_27)))))))))))))) => (![V_27v_7c48_7c_27]: p(s('bool','happ'(s('fun'('type.exhSem.v','bool'),V_27P_7c48_7c_27),s('type.exhSem.v',V_27v_7c48_7c_27)))) & ![V_27v_7c48_7c_27]: p(s('bool','happ'(s('fun'('type.list.list'('type.exhSem.v'),'bool'),V_27P_7c49_7c_27),s('type.list.list'('type.exhSem.v'),V_27v_7c48_7c_27))))))).
fof('thm.exh_to_patProof.compile_v_def|split|0', axiom, ![V_27l_27]: s('type.patSem.v','const.exh_to_patProof.compile_v_1'(s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',V_27l_27))))) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit',V_27l_27)))).
fof('thm.exh_to_patProof.compile_v_def|split|1', axiom, ![V_27vs_27, V_27tag_27]: s('type.patSem.v','const.exh_to_patProof.compile_v_1'(s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num',V_27tag_27),s('type.list.list'('type.exhSem.v'),V_27vs_27))))) = s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',V_27tag_27),s('type.list.list'('type.patSem.v'),'const.exh_to_patProof.compile_vs_1'(s('type.list.list'('type.exhSem.v'),V_27vs_27)))))).
fof('thm.exh_to_patProof.compile_v_def|split|2', axiom, ![V_27x_27, V_27env_27, V_27e_27]: s('type.patSem.v','happ'(s('fun'('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27),s('type.list.list'('type.string.char'),V_27x_27),s('type.exhLang.exp',V_27e_27))))) = s('type.patSem.v','const.patSem.Closure_2'(s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s('fun'('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27))),s('type.patLang.exp','const.exh_to_pat.compile_exp_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.CONS_2'(s('type.option.option'('type.list.list'('type.string.char')),'happ'(s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s('type.list.list'('type.string.char'),V_27x_27))),s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27))))),s('type.exhLang.exp',V_27e_27)))))).
fof('thm.exh_to_patProof.compile_v_def|split|3', axiom, ![V_27funs_27, V_27f_27, V_27env_27]: s('type.patSem.v','happ'(s('fun'('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),V_27funs_27),s('type.list.list'('type.string.char'),V_27f_27))))) = s('type.patSem.v','const.patSem.Recclosure_3'(s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s('fun'('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27))),s('type.list.list'('type.patLang.exp'),'const.exh_to_pat.compile_funs_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.APPEND_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp')),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),V_27funs_27))),s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),V_27funs_27))),s('type.num.num','const.lib.the_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),V_27funs_27))),s('type.option.option'('type.num.num'),'const.misc.find_index_3'(s('type.list.list'('type.string.char'),V_27f_27),s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),V_27funs_27))),s('type.num.num','const.num.|48|_0')))))))).
fof('thm.exh_to_patProof.compile_v_def|split|4', axiom, ![V_27n_27]: s('type.patSem.v','const.exh_to_patProof.compile_v_1'(s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',V_27n_27))))) = s('type.patSem.v','const.patSem.Loc_1'(s('type.num.num',V_27n_27)))).
fof('thm.exh_to_patProof.compile_v_def|split|5', axiom, ![V_27vs_27]: s('type.patSem.v','const.exh_to_patProof.compile_v_1'(s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),V_27vs_27))))) = s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),'const.exh_to_patProof.compile_vs_1'(s('type.list.list'('type.exhSem.v'),V_27vs_27)))))).
fof('thm.exh_to_patProof.compile_v_def|split|6', axiom, s('type.list.list'('type.patSem.v'),'const.exh_to_patProof.compile_vs_1'(s('type.list.list'('type.exhSem.v'),'const.list.NIL_0'))) = s('type.list.list'('type.patSem.v'),'const.list.NIL_0')).
fof('thm.exh_to_patProof.compile_v_def|split|7', axiom, ![V_27vs_27, V_27v_27]: s('type.list.list'('type.patSem.v'),'const.exh_to_patProof.compile_vs_1'(s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',V_27v_27),s('type.list.list'('type.exhSem.v'),V_27vs_27))))) = s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.exh_to_patProof.compile_v_1'(s('type.exhSem.v',V_27v_27))),s('type.list.list'('type.patSem.v'),'const.exh_to_patProof.compile_vs_1'(s('type.list.list'('type.exhSem.v'),V_27vs_27)))))).
fof('thm.exh_to_patProof.compile_vs_map', axiom, ![V_27vs_27]: s('type.list.list'('type.patSem.v'),'const.exh_to_patProof.compile_vs_1'(s('type.list.list'('type.exhSem.v'),V_27vs_27))) = s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s('fun'('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('type.list.list'('type.exhSem.v'),V_27vs_27)))).
fof('ARITY_0_1_const.exh_to_patProof.compile_vs', axiom, ![VV0]: s('type.list.list'('type.patSem.v'),'happ'(s('fun'('type.list.list'('type.exhSem.v'),'type.list.list'('type.patSem.v')),'const.exh_to_patProof.compile_vs_0'),s('type.list.list'('type.exhSem.v'),VV0))) = s('type.list.list'('type.patSem.v'),'const.exh_to_patProof.compile_vs_1'(s('type.list.list'('type.exhSem.v'),VV0)))).
fof('thm.exh_to_patProof.map_result_compile_vs_list_result', axiom, ![V_27A_27,V_27B_27]: ![V_27r_27, V_27f_27]: s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),V_27A_27),'const.evalProps.map_result_3'(s('fun'('type.list.list'('type.exhSem.v'),'type.list.list'('type.patSem.v')),'const.exh_to_patProof.compile_vs_0'),s('fun'(V_27B_27,V_27A_27),V_27f_27),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),V_27B_27),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.exhSem.v',V_27B_27),V_27r_27))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),V_27A_27),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.patSem.v',V_27A_27),'const.evalProps.map_result_3'(s('fun'('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('fun'(V_27B_27,V_27A_27),V_27f_27),s('type.semanticPrimitives.result'('type.exhSem.v',V_27B_27),V_27r_27)))))).
fof('thm.exh_to_patProof.compile_state_def', axiom, ![V_27FFI_27]: ![V_27s_27]: s('type.patSem.state'(V_27FFI_27),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(V_27FFI_27),V_27s_27))) = s('type.patSem.state'(V_27FFI_27),'const.patSem.state_clock_fupd_2'(s('fun'('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(V_27FFI_27),V_27s_27))))),s('type.patSem.state'(V_27FFI_27),'const.patSem.state_refs_fupd_2'(s('fun'('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'const.list.MAP_2'(s('fun'('type.semanticPrimitives.store_v'('type.exhSem.v'),'type.semanticPrimitives.store_v'('type.patSem.v')),'const.evalProps.map_sv_1'(s('fun'('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(V_27FFI_27),V_27s_27))))))),s('type.patSem.state'(V_27FFI_27),'const.patSem.state_ffi_fupd_2'(s('fun'('type.ffi.ffi_state'(V_27FFI_27),'type.ffi.ffi_state'(V_27FFI_27)),'const.combin.K_1'(s('type.ffi.ffi_state'(V_27FFI_27),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(V_27FFI_27),V_27s_27))))),s('type.patSem.state'(V_27FFI_27),'const.patSem.state_globals_fupd_2'(s('fun'('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.patSem.v')),'const.list.MAP_2'(s('fun'('type.option.option'('type.exhSem.v'),'type.option.option'('type.patSem.v')),'const.option.OPTION_MAP_1'(s('fun'('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(V_27FFI_27),V_27s_27))))))),s('type.patSem.state'(V_27FFI_27),'const.bool.ARB_0')))))))))).
fof('thm.exh_to_patProof.exh_to_patProof_|49||48|_prove_ltb', axiom, ![V_27A_27]: ![V_27s_27]: s('type.patSem.state'(V_27A_27),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(V_27A_27),'const.exhSem.dec_clock_1'(s('type.exhSem.state'(V_27A_27),V_27s_27))))) = s('type.patSem.state'(V_27A_27),'const.patSem.dec_clock_1'(s('type.patSem.state'(V_27A_27),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(V_27A_27),V_27s_27)))))).
fof('thm.exh_to_patProof.exh_to_patProof_|49||49|_prove_ltb', axiom, ![V_27A_27]: ![V_27s_27, V_27k_27]: s('type.patSem.state'(V_27A_27),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(V_27A_27),'const.exhSem.state_clock_fupd_2'(s('fun'('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',V_27k_27))),s('type.exhSem.state'(V_27A_27),V_27s_27))))) = s('type.patSem.state'(V_27A_27),'const.patSem.state_clock_fupd_2'(s('fun'('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',V_27k_27))),s('type.patSem.state'(V_27A_27),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(V_27A_27),V_27s_27)))))).
fof('thm.exh_to_patProof.exh_to_patProof_|49|2_prove_ltb|split|0', axiom, ![V_27v_7c49_7c_27, V_27v2_27]: s('type.semanticPrimitives.eq_result','const.exhSem.do_eq_2'(s('type.exhSem.v',V_27v_7c49_7c_27),s('type.exhSem.v',V_27v2_27))) = s('type.semanticPrimitives.eq_result','const.patSem.do_eq_2'(s('type.patSem.v','const.exh_to_patProof.compile_v_1'(s('type.exhSem.v',V_27v_7c49_7c_27))),s('type.patSem.v','const.exh_to_patProof.compile_v_1'(s('type.exhSem.v',V_27v2_27)))))).
fof('thm.exh_to_patProof.exh_to_patProof_|49|2_prove_ltb|split|1', axiom, ![V_27vs_7c49_7c_27, V_27vs2_27]: s('type.semanticPrimitives.eq_result','const.exhSem.do_eq_list_2'(s('type.list.list'('type.exhSem.v'),V_27vs_7c49_7c_27),s('type.list.list'('type.exhSem.v'),V_27vs2_27))) = s('type.semanticPrimitives.eq_result','const.patSem.do_eq_list_2'(s('type.list.list'('type.patSem.v'),'const.exh_to_patProof.compile_vs_1'(s('type.list.list'('type.exhSem.v'),V_27vs_7c49_7c_27))),s('type.list.list'('type.patSem.v'),'const.exh_to_patProof.compile_vs_1'(s('type.list.list'('type.exhSem.v'),V_27vs2_27)))))).
fof('thm.exh_to_patProof.exh_to_patProof_|49|3_prove_ltb', axiom, ![V_27vs_27, V_27env_27, V_27exp_27]: (s('type.option.option'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.exhLang.exp')),'const.exhSem.do_opapp_1'(s('type.list.list'('type.exhSem.v'),V_27vs_27))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.exhLang.exp')),'happ'(s('fun'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.exhLang.exp'),'type.option.option'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.exhLang.exp'))),'const.option.SOME_0'),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.exhLang.exp'),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27),s('type.exhLang.exp',V_27exp_27))))) => s('type.option.option'('type.pair.prod'('type.list.list'('type.patSem.v'),'type.patLang.exp')),'const.patSem.do_opapp_1'(s('type.list.list'('type.patSem.v'),'const.exh_to_patProof.compile_vs_1'(s('type.list.list'('type.exhSem.v'),V_27vs_27))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.patSem.v'),'type.patLang.exp')),'happ'(s('fun'('type.pair.prod'('type.list.list'('type.patSem.v'),'type.patLang.exp'),'type.option.option'('type.pair.prod'('type.list.list'('type.patSem.v'),'type.patLang.exp'))),'const.option.SOME_0'),s('type.pair.prod'('type.list.list'('type.patSem.v'),'type.patLang.exp'),'const.pair.,_2'(s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s('fun'('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27))),s('type.patLang.exp','const.exh_to_pat.compile_exp_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s('fun'('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27))),s('type.exhLang.exp',V_27exp_27))))))))).
fof('thm.exh_to_patProof.exh_to_patProof_|49|4_prove_ltb', axiom, ![V_27v_7c49_7c_27, V_27v2_27, V_27vs_7c49_7c_27]: ((s('type.patSem.v','const.exh_to_patProof.compile_v_1'(s('type.exhSem.v',V_27v_7c49_7c_27))) = s('type.patSem.v',V_27v2_27) & s('type.option.option'('type.list.list'('type.exhSem.v')),'const.exhSem.v_to_list_1'(s('type.exhSem.v',V_27v_7c49_7c_27))) = s('type.option.option'('type.list.list'('type.exhSem.v')),'const.option.SOME_1'(s('type.list.list'('type.exhSem.v'),V_27vs_7c49_7c_27)))) => ?[V_27vs2_27]: (s('type.option.option'('type.list.list'('type.patSem.v')),'const.patSem.v_to_list_1'(s('type.patSem.v',V_27v2_27))) = s('type.option.option'('type.list.list'('type.patSem.v')),'const.option.SOME_1'(s('type.list.list'('type.patSem.v'),V_27vs2_27))) & s('type.list.list'('type.patSem.v'),'const.exh_to_patProof.compile_vs_1'(s('type.list.list'('type.exhSem.v'),V_27vs_7c49_7c_27))) = s('type.list.list'('type.patSem.v'),V_27vs2_27)))).
fof('thm.exh_to_patProof.exh_to_patProof_|49|5_prove_ltb', axiom, ![V_27ls_27]: s('type.patSem.v','const.patSem.char_list_to_v_1'(s('type.list.list'('type.string.char'),V_27ls_27))) = s('type.patSem.v','const.exh_to_patProof.compile_v_1'(s('type.exhSem.v','const.exhSem.char_list_to_v_1'(s('type.list.list'('type.string.char'),V_27ls_27)))))).
fof('thm.exh_to_patProof.exh_to_patProof_|49|6_prove_ltb', axiom, ![V_27v_7c49_7c_27, V_27v2_27, V_27vs_7c49_7c_27]: ((s('type.patSem.v','const.exh_to_patProof.compile_v_1'(s('type.exhSem.v',V_27v_7c49_7c_27))) = s('type.patSem.v',V_27v2_27) & s('type.option.option'('type.list.list'('type.string.char')),'const.exhSem.v_to_char_list_1'(s('type.exhSem.v',V_27v_7c49_7c_27))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),V_27vs_7c49_7c_27)))) => s('type.option.option'('type.list.list'('type.string.char')),'const.patSem.v_to_char_list_1'(s('type.patSem.v',V_27v2_27))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),V_27vs_7c49_7c_27))))).
fof('thm.exh_to_patProof.exh_to_patProof_|49|7_prove_ltb', axiom, ![V_27B_27,V_27C_27,V_27A_27]: ![V_27op_27, V_27vs_27, V_27s_7c48_7c_27, V_27s_7c48_7c__pat_27, V_27env_27, V_27s_27, V_27res_27]: (s('type.option.option'('type.pair.prod'('type.exhSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.exhSem.v','type.exhSem.v'))),'const.exhSem.do_app_3'(s('type.exhSem.state'(V_27A_27),V_27s_7c48_7c_27),s('type.conLang.op',V_27op_27),s('type.list.list'('type.exhSem.v'),V_27vs_27))) = s('type.option.option'('type.pair.prod'('type.exhSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.exhSem.v','type.exhSem.v'))),'const.option.SOME_1'(s('type.pair.prod'('type.exhSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.exhSem.v','type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(V_27A_27),V_27s_27),s('type.semanticPrimitives.result'('type.exhSem.v','type.exhSem.v'),V_27res_27))))) => s('type.option.option'('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.patSem.v','type.patSem.v'))),'const.patSem.do_app_3'(s('type.patSem.state'(V_27A_27),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(V_27A_27),V_27s_7c48_7c_27))),s('type.patLang.op','const.patLang.Op_1'(s('type.conLang.op',V_27op_27))),s('type.list.list'('type.patSem.v'),'const.exh_to_patProof.compile_vs_1'(s('type.list.list'('type.exhSem.v'),V_27vs_27))))) = s('type.option.option'('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.patSem.v','type.patSem.v'))),'const.option.SOME_1'(s('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.patSem.v','type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(V_27A_27),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(V_27A_27),V_27s_27))),s('type.semanticPrimitives.result'('type.patSem.v','type.patSem.v'),'const.evalProps.map_result_3'(s('fun'('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('fun'('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('type.semanticPrimitives.result'('type.exhSem.v','type.exhSem.v'),V_27res_27))))))))).
fof('thm.exh_to_patProof.sIf_correct', axiom, ![V_27A_27]: ![V_27env_27, V_27s_27, V_27e_7c49_7c_27, V_27e2_27, V_27e3_27, V_27res_27]: ((s('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),V_27env_27),s('type.patSem.state'(V_27A_27),V_27s_27),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.If_3'(s('type.patLang.exp',V_27e_7c49_7c_27),s('type.patLang.exp',V_27e2_27),s('type.patLang.exp',V_27e3_27))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),V_27res_27) & ~ (s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),V_27res_27))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))))) => s('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),V_27env_27),s('type.patSem.state'(V_27A_27),V_27s_27),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sIf_3'(s('type.patLang.exp',V_27e_7c49_7c_27),s('type.patLang.exp',V_27e2_27),s('type.patLang.exp',V_27e3_27))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),V_27res_27))).
fof('thm.exh_to_patProof.sIf_intro', axiom, ![V_27A_27]: ![V_27s_27, V_27env_27, V_27e3_27, V_27e2_27, V_27e_7c49_7c_27, V_27P_27]: ((p(s('bool','happ'(s('fun'('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'bool'),V_27P_27),s('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),V_27env_27),s('type.patSem.state'(V_27A_27),V_27s_27),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.If_3'(s('type.patLang.exp',V_27e_7c49_7c_27),s('type.patLang.exp',V_27e2_27),s('type.patLang.exp',V_27e3_27))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))))) & ~ (s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),V_27env_27),s('type.patSem.state'(V_27A_27),V_27s_27),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.If_3'(s('type.patLang.exp',V_27e_7c49_7c_27),s('type.patLang.exp',V_27e2_27),s('type.patLang.exp',V_27e3_27))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))))) => p(s('bool','happ'(s('fun'('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'bool'),V_27P_27),s('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),V_27env_27),s('type.patSem.state'(V_27A_27),V_27s_27),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sIf_3'(s('type.patLang.exp',V_27e_7c49_7c_27),s('type.patLang.exp',V_27e2_27),s('type.patLang.exp',V_27e3_27))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))))))).
fof('thm.exh_to_patProof.exh_to_patProof_2|48|_prove_ltb', axiom, ![V_27v_27, V_27vs_27]: ((s('type.option.option'('type.list.list'('type.patSem.v')),'const.patSem.v_to_list_1'(s('type.patSem.v',V_27v_27))) = s('type.option.option'('type.list.list'('type.patSem.v')),'const.option.SOME_1'(s('type.list.list'('type.patSem.v'),V_27vs_27))) & p(s('bool','happ'(s('fun'('type.patSem.v','bool'),'const.patProps.no_closures_0'),s('type.patSem.v',V_27v_27))))) => p(s('bool','const.list.EVERY_2'(s('fun'('type.patSem.v','bool'),'const.patProps.no_closures_0'),s('type.list.list'('type.patSem.v'),V_27vs_27)))))).
fof('thm.exh_to_patProof.exh_to_patProof_2|49|_prove_ltb', axiom, ![V_27ls_27]: p(s('bool','const.patProps.no_closures_1'(s('type.patSem.v','const.patSem.char_list_to_v_1'(s('type.list.list'('type.string.char'),V_27ls_27))))))).
fof('thm.exh_to_patProof.pure_correct|split|0', axiom, ![V_27FFI_27]: ![V_27e_27]: (p(s('bool','const.exh_to_pat.pure_1'(s('type.patLang.exp',V_27e_27)))) => ![V_27env_27, V_27s_27]: (?[V_27v_27]: s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),V_27env_27),s('type.patSem.state'(V_27FFI_27),V_27s_27),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp',V_27e_27),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(V_27FFI_27),V_27s_27),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.patSem.v'),V_27v_27))))) | s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),V_27env_27),s('type.patSem.state'(V_27FFI_27),V_27s_27),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp',V_27e_27),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(V_27FFI_27),V_27s_27),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0')))))))))).
fof('thm.exh_to_patProof.pure_correct|split|1', axiom, ![V_27FFI_27]: ![V_27es_27]: (p(s('bool','const.exh_to_pat.pure_list_1'(s('type.list.list'('type.patLang.exp'),V_27es_27)))) => ![V_27env_27, V_27s_27]: ((?[V_27vs_27]: s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),V_27env_27),s('type.patSem.state'(V_27FFI_27),V_27s_27),s('type.list.list'('type.patLang.exp'),V_27es_27))) = s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(V_27FFI_27),V_27s_27),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.patSem.v'),V_27vs_27))))) | s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),V_27env_27),s('type.patSem.state'(V_27FFI_27),V_27s_27),s('type.list.list'('type.patLang.exp'),V_27es_27))) = s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(V_27FFI_27),V_27s_27),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0')))))))) & (?[V_27vs_27]: s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),V_27env_27),s('type.patSem.state'(V_27FFI_27),V_27s_27),s('type.list.list'('type.patLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(V_27FFI_27),V_27s_27),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.patSem.v'),V_27vs_27))))) | s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),V_27env_27),s('type.patSem.state'(V_27FFI_27),V_27s_27),s('type.list.list'('type.patLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(V_27FFI_27),V_27s_27),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))))))))).
fof('thm.exh_to_patProof.ground_correct|split|0', axiom, ![V_27FFI_27]: ![V_27e_27, V_27n_27]: (p(s('bool','const.exh_to_pat.ground_2'(s('type.num.num',V_27n_27),s('type.patLang.exp',V_27e_27)))) => ![V_27env_7c49_7c_27, V_27env2_27, V_27s_27, V_27res_27]: ((p(s('bool','const.arithmetic.<=_2'(s('type.num.num',V_27n_27),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),V_27env_7c49_7c_27)))))) & (p(s('bool','const.arithmetic.<=_2'(s('type.num.num',V_27n_27),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),V_27env2_27)))))) & (s('type.list.list'('type.patSem.v'),'const.list.TAKE_2'(s('type.num.num',V_27n_27),s('type.list.list'('type.patSem.v'),V_27env2_27))) = s('type.list.list'('type.patSem.v'),'const.list.TAKE_2'(s('type.num.num',V_27n_27),s('type.list.list'('type.patSem.v'),V_27env_7c49_7c_27))) & s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),V_27env_7c49_7c_27),s('type.patSem.state'(V_27FFI_27),V_27s_27),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp',V_27e_27),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),V_27res_27)))) => s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),V_27env2_27),s('type.patSem.state'(V_27FFI_27),V_27s_27),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp',V_27e_27),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),V_27res_27)))).
fof('thm.exh_to_patProof.ground_correct|split|1', axiom, ![V_27FFI_27]: ![V_27es_27, V_27n_27]: (p(s('bool','const.exh_to_pat.ground_list_2'(s('type.num.num',V_27n_27),s('type.list.list'('type.patLang.exp'),V_27es_27)))) => ![V_27env_7c49_7c_27, V_27env2_27, V_27s_27, V_27res_27]: ((p(s('bool','const.arithmetic.<=_2'(s('type.num.num',V_27n_27),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),V_27env_7c49_7c_27)))))) & (p(s('bool','const.arithmetic.<=_2'(s('type.num.num',V_27n_27),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),V_27env2_27)))))) & s('type.list.list'('type.patSem.v'),'const.list.TAKE_2'(s('type.num.num',V_27n_27),s('type.list.list'('type.patSem.v'),V_27env2_27))) = s('type.list.list'('type.patSem.v'),'const.list.TAKE_2'(s('type.num.num',V_27n_27),s('type.list.list'('type.patSem.v'),V_27env_7c49_7c_27))))) => ((s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),V_27env_7c49_7c_27),s('type.patSem.state'(V_27FFI_27),V_27s_27),s('type.list.list'('type.patLang.exp'),V_27es_27))) = s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),V_27res_27) => s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),V_27env2_27),s('type.patSem.state'(V_27FFI_27),V_27s_27),s('type.list.list'('type.patLang.exp'),V_27es_27))) = s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),V_27res_27)) & (s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),V_27env_7c49_7c_27),s('type.patSem.state'(V_27FFI_27),V_27s_27),s('type.list.list'('type.patLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),V_27res_27) => s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),V_27env2_27),s('type.patSem.state'(V_27FFI_27),V_27s_27),s('type.list.list'('type.patLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),V_27res_27)))))).
fof('thm.exh_to_patProof.sLet_correct', axiom, ![V_27FFI_27]: ![V_27env_27, V_27s_27, V_27e_7c49_7c_27, V_27e2_27, V_27res_27]: ((s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),V_27env_27),s('type.patSem.state'(V_27FFI_27),V_27s_27),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',V_27e_7c49_7c_27),s('type.patLang.exp',V_27e2_27))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),V_27res_27) & ~ (s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),V_27res_27))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))))) => s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),V_27env_27),s('type.patSem.state'(V_27FFI_27),V_27s_27),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',V_27e_7c49_7c_27),s('type.patLang.exp',V_27e2_27))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),V_27res_27))).
fof('thm.exh_to_patProof.sLet_intro', conjecture, ![V_27A_27]: ![V_27s_27, V_27env_27, V_27e2_27, V_27e_7c49_7c_27, V_27P_27]: ((p(s('bool','happ'(s('fun'('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'bool'),V_27P_27),s('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),V_27env_27),s('type.patSem.state'(V_27A_27),V_27s_27),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',V_27e_7c49_7c_27),s('type.patLang.exp',V_27e2_27))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))))) & ~ (s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),V_27env_27),s('type.patSem.state'(V_27A_27),V_27s_27),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',V_27e_7c49_7c_27),s('type.patLang.exp',V_27e2_27))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))))) => p(s('bool','happ'(s('fun'('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'bool'),V_27P_27),s('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),V_27env_27),s('type.patSem.state'(V_27A_27),V_27s_27),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',V_27e_7c49_7c_27),s('type.patLang.exp',V_27e2_27))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))))))).
