include('incl/logic.ax').
include('incl/bool.ax').
include('incl/marker.ax').
include('incl/num.ax').
include('incl/combin.ax').
include('incl/normalForms.ax').
include('incl/sat.ax').
include('incl/relation.ax').
include('incl/pair.ax').
include('incl/prim_rec.ax').
include('incl/arithmetic.ax').
include('incl/numeral.ax').
include('incl/ConseqConv.ax').
include('incl/sum.ax').
include('incl/one.ax').
include('incl/option.ax').
include('incl/while.ax').
include('incl/operator.ax').
include('incl/basicSize.ax').
include('incl/numpair.ax').
include('incl/pred_set.ax').
include('incl/ind_type.ax').
include('incl/list.ax').
include('incl/rich_list.ax').
include('incl/quantHeuristics.ax').
include('incl/fcp.ax').
include('incl/logroot.ax').
include('incl/bit.ax').
include('incl/string.ax').
include('incl/numposrep.ax').
include('incl/ASCIInumbers.ax').
include('incl/numeral_bit.ax').
include('incl/sum_num.ax').
include('incl/words.ax').
include('incl/alignment.ax').
include('incl/sorting.ax').
include('incl/finite_map.ax').
include('incl/alist.ax').
include('incl/sptree.ax').
include('incl/indexedLists.ax').
include('incl/res_quan.ax').
include('incl/quotient.ax').
include('incl/quotient_list.ax').
include('incl/set_sep.ax').
include('incl/set_relation.ax').
include('incl/wot.ax').
include('incl/toto.ax').
include('incl/comparison.ax').
include('incl/llist.ax').
include('incl/misc.ax').
include('incl/quotient_pair.ax').
include('incl/quotient_sum.ax').
include('incl/divides.ax').
include('incl/gcd.ax').
include('incl/quotient_option.ax').
include('incl/integer.ax').
include('incl/Omega.ax').
include('incl/int_arith.ax').
include('incl/integer_word.ax').
include('incl/lib.ax').
include('incl/ffi.ax').
include('incl/grammar.ax').
include('incl/peg.ax').
include('incl/pegexec.ax').
include('incl/state_transformer.ax').
include('incl/lprefix_lub.ax').
include('incl/tokens.ax').
include('incl/gram.ax').
include('incl/ast.ax').
include('incl/asm.ax').
include('incl/semanticPrimitives.ax').
include('incl/reg_alloc.ax').
include('incl/typeSystem.ax').
include('incl/funBigStep.ax').
include('incl/termination.ax').
include('incl/labLang.ax').
include('incl/lab_filter.ax').
include('incl/lab_to_target.ax').
include('incl/closLang.ax').
include('incl/bvl.ax').
include('incl/bvp.ax').
include('incl/bvp_live.ax').
include('incl/smallStep.ax').
include('incl/bigStep.ax').
include('incl/db_vars.ax').
include('incl/clos_free.ax').
include('incl/clos_annotate.ax').
include('incl/clos_number.ax').
include('incl/tokenUtils.ax').
include('incl/cmlPtreeConversion.ax').
include('incl/lexer_fun.ax').
include('incl/NTproperties.ax').
include('incl/initialProgram.ax').
include('incl/bvp_simp.ax').
include('incl/bvi.ax').
include('incl/bvp_space.ax').
include('incl/bvi_to_bvp.ax').
include('incl/evalProps.ax').
include('incl/determ.ax').
include('incl/bigClock.ax').
include('incl/interp.ax').
include('incl/funBigStepEquiv.ax').
include('incl/conLang.ax').
include('incl/exhLang.ax').
include('incl/dec_to_exh.ax').
include('incl/patLang.ax').
include('incl/pat_to_clos.ax').
include('incl/bvl_jump.ax').
include('incl/clos_call.ax').
include('incl/clos_remove.ax').
include('incl/clos_mti.ax').
include('incl/clos_to_bvl.ax').
include('incl/bvl_inline.ax').
include('incl/asmSem.ax').
include('incl/asmProps.ax').
include('incl/targetSem.ax').
include('incl/typeSoundInvariants.ax').
include('incl/typeSysProps.ax').
include('incl/bvl_handle.ax').
include('incl/bvl_const.ax').
include('incl/bvl_to_bvi.ax').
include('incl/modLang.ax').
include('incl/mod_to_con.ax').
include('incl/bigSmallInvariants.ax').
include('incl/con_to_dec.ax').
include('incl/targetProps.ax').
include('incl/weakening.ax').
include('incl/bigSmallEquiv.ax').
include('incl/untypedSafety.ax').
include('incl/funBigStepProps.ax').
include('incl/source_to_mod.ax').
include('incl/semantics.ax').
include('incl/initSemEnv.ax').
include('incl/typeSound.ax').
include('incl/wordLang.ax').
include('incl/exh_to_pat.ax').
include('incl/wordSem.ax').
include('incl/labSem.ax').
include('incl/semanticsProps.ax').
include('incl/labProps.ax').
include('incl/closSem.ax').
include('incl/closProps.ax').
include('incl/patSem.ax').
include('incl/modSem.ax').
include('incl/bvlSem.ax').
include('incl/bviSem.ax').
include('incl/bvlProps.ax').
include('incl/bvpSem.ax').
include('incl/exhSem.ax').
include('incl/conSem.ax').
include('incl/decSem.ax').
include('incl/conProps.ax').
include('incl/decProps.ax').
include('incl/exhProps.ax').
include('incl/modProps.ax').
include('incl/patProps.ax').
include('incl/reg_allocProof.ax').
include('incl/bviProps.ax').
include('incl/bvpProps.ax').
include('incl/bvp_simpProof.ax').
include('incl/bvp_spaceProof.ax').
include('incl/bvl_jumpProof.ax').
include('incl/wellorder.ax').
include('incl/cardinal.ax').
include('incl/hrat.ax').
include('incl/hreal.ax').
include('incl/realax.ax').
include('incl/real.ax').
include('incl/topology.ax').
include('incl/nets.ax').
include('incl/seq.ax').
include('incl/lim.ax').
include('incl/powser.ax').
include('incl/transc.ax').
include('incl/intreal.ax').
include('incl/binary_ieee.ax').
include('incl/tailrec.ax').
include('incl/prog.ax').
include('incl/temporal.ax').
include('incl/address.ax').
include('incl/state.ax').
include('incl/temporal_state.ax').
include('incl/machine_ieee.ax').
include('incl/bitstring.ax').
include('incl/arm.ax').
include('incl/blast.ax').
include('incl/update.ax').
include('incl/arm_step.ax').
include('incl/arm6_target.ax').
include('incl/arm6_eval_encode.ax').
include('incl/mlstring.ax').
include('incl/patternMatches.ax').
include('incl/ml_translator.ax').
include('incl/ml_optimise.ax').
include('incl/ml_pmatch.ax').
include('incl/mini_prelude.ax').
include('incl/bag.ax').
include('incl/benchmark.ax').
include('incl/arm8.ax').
include('incl/arm8_step.ax').
include('incl/clos_relation.ax').
include('incl/clos_relationProps.ax').
include('incl/clos_removeProof.ax').
include('incl/simpleSexp.ax').
include('incl/fromSexp.ax').
include('incl/word_inst.ax').
include('incl/word_alloc.ax').
include('incl/word_remove.ax').
include('incl/word_to_word.ax').
include('incl/stackLang.ax').
include('incl/bvp_to_word.ax').
include('incl/stack_alloc.ax').
include('incl/riscv.ax').
include('incl/riscv_step.ax').
include('incl/std_prelude.ax').
include('incl/holSyntaxLib.ax').
include('incl/holSyntax.ax').
include('incl/holSyntaxExtra.ax').
include('incl/ml_module_demo.ax').
include('incl/bvp_liveProof.ax').
include('incl/PhysicistsQueue.ax').
include('incl/holBoolSyntax.ax').
include('incl/holAxiomsSyntax.ax').
include('incl/setSpec.ax').
include('incl/holSemantics.ax').
include('incl/holSemanticsExtra.ax').
include('incl/holBool.ax').
include('incl/commonUnif.ax').
include('incl/term.ax').
include('incl/subst.ax').
include('incl/walk.ax').
include('incl/walkstar.ax').
include('incl/unifDef.ax').
include('incl/unifProps.ax').
include('incl/redUnif.ax').
include('incl/parmove.ax').
include('incl/word_to_stack.ax').
include('incl/bvl_inlineProof.ax').
include('incl/clos_known.ax').
include('incl/clos_knownProof.ax').
include('incl/okasaki_misc.ax').
include('incl/UnbalancedSet.ax').
include('incl/mips.ax').
include('incl/mips_step.ax').
include('incl/mips_target.ax').
include('incl/mips_target_correct.ax').
include('incl/bvl_constProof.ax').
include('incl/int_bitwise.ax').
include('incl/copying_gc.ax').
include('incl/bvp_to_wordProps.ax').
include('incl/jrhSet.ax').
include('incl/BankersQueue.ax').
include('incl/cmlPEG.ax').
include('incl/clos_numberProof.ax').
include('incl/cmlParse.ax').
include('incl/holKernel.ax').
include('incl/reader.ax').
include('incl/x64.ax').
include('incl/source_to_modProof.ax').
include('incl/collapse.ax').
include('incl/infer_t.ax').
include('incl/unify.ax').
include('incl/infer.ax').
include('incl/inferProps.ax').
include('incl/infer_eComplete.ax').
include('incl/bvl_handleProof.ax').
include('incl/dec_to_exhProof.ax').
include('incl/regexpMatch.ax').
include('incl/ninetyOne.ax').
include('incl/example_91.ax').
include('incl/arm8_target.ax').
include('incl/BatchedQueue.ax').
include('incl/stack_remove.ax').
include('incl/stack_names.ax').
include('incl/stack_to_lab.ax').
include('incl/backend.ax').
include('incl/compiler.ax').
include('incl/ImplicitQueue.ax').
include('incl/stackSem.ax').
include('incl/gramProps.ax').
include('incl/pegSound.ax').
include('incl/holKernelProof.ax').
include('incl/pegComplete.ax').
include('incl/cmlPtreeConversionProps.ax').
include('incl/simpleIO.ax').
include('incl/LazyPairingHeap.ax').
include('incl/stackProps.ax').
include('incl/stack_removeProof.ax').
include('incl/holSoundness.ax').
include('incl/holExtension.ax').
include('incl/lexer_impl.ax').
include('incl/SplayHeap.ax').
include('incl/infer_eSound.ax').
include('incl/wordProps.ax').
include('incl/type_eDeterm.ax').
include('incl/inferComplete.ax').
include('incl/BinaryRandomAccessLists.ax').
include('incl/BinomialHeap.ax').
include('incl/ml_pmatch_demo.ax').
include('incl/holKernelPmatch.ax').
include('incl/ml_monad.ax').
include('incl/ml_hol_kernel.ax').
include('incl/slr_parser_gen.ax').
include('incl/word_instProof.ax').
include('incl/bvi_to_bvpProof.ax').
include('incl/setModel.ax').
include('incl/BottomUpMergeSort.ax').
include('incl/clos_freeProof.ax').
include('incl/example_qsort.ax').
include('incl/PairingHeap.ax').
include('incl/arm6_target_correct.ax').
include('incl/ml_hol_init.ax').
include('incl/x64_step.ax').
include('incl/x64_target.ax').
include('incl/x64_eval_encode.ax').
include('incl/arm8_target_correct.ax').
include('incl/clos_mtiProof.ax').
include('incl/LeftistHeap.ax').
include('incl/word_removeProof.ax').
include('incl/riscv_target.ax').
include('incl/riscv_target_correct.ax').
include('incl/RedBlackSet.ax').
include('incl/stack_namesProof.ax').
include('incl/exh_to_patProof.ax').
include('incl/print.ax').
include('incl/x64_target_correct.ax').
include('incl/HoodMelvilleQueue.ax').
include('incl/lab_filterProof.ax').
include('incl/ml_translator_test.ax').
include('incl/con_to_decProof.ax').
fof('thm.pat_to_closProof.compile_v_primitive_def', axiom, s('fun'('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0') = s('fun'('type.patSem.v','type.closSem.v'),'const.relation.WFREC_2'(s('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'const.min.@_1'(s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'bool'),'const.relation.WF_0'),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.num.num','bool'),'bool'),'!_0'),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'fun'('type.num.num','bool')),'_dst_x00x11_2'(s('fun'('fun'('type.list.list'('type.patSem.v'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'fun'('type.num.num','fun'('type.list.list'('type.patSem.v'),'bool'))),'_dst_x000x111_2'(s('fun'('fun'('type.patSem.v','bool'),'bool'),'!_0'),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'fun'('type.num.num','fun'('type.list.list'('type.patSem.v'),'fun'('type.patSem.v','bool')))),'_dst_x0000x0011x1111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patSem.v'),'fun'('type.patSem.v','bool')),'_dst_x01x10_2'(s('fun'('type.patSem.v','fun'('fun'('type.patSem.v','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patSem.v'),'fun'('type.patSem.v','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'fun'('type.num.num','fun'('type.list.list'('type.patSem.v'),'fun'('type.patSem.v','bool')))),'_dst_x1001x0110_2'(s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'fun'('type.patSem.v','fun'('type.patSem.v','bool'))),'_i_0_0'),s('fun'('type.num.num','fun'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.Conv_0'))))))))))),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patSem.v'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'fun'('type.list.list'('type.patSem.v'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patSem.v','bool'),'bool'),'!_0'),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'fun'('type.list.list'('type.patSem.v'),'fun'('type.patSem.v','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patSem.v'),'fun'('type.patSem.v','bool')),'_dst_x01x10_2'(s('fun'('type.patSem.v','fun'('fun'('type.patSem.v','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patSem.v'),'fun'('type.patSem.v','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'fun'('type.list.list'('type.patSem.v'),'fun'('type.patSem.v','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'fun'('type.patSem.v','fun'('type.patSem.v','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.patSem.Vectorv_0'))))))))),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.patLang.exp','bool'),'bool'),'!_0'),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'fun'('type.patLang.exp','bool')),'_dst_x00x11_2'(s('fun'('fun'('type.list.list'('type.patSem.v'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'fun'('type.patLang.exp','fun'('type.list.list'('type.patSem.v'),'bool'))),'_dst_x000x111_2'(s('fun'('fun'('type.patSem.v','bool'),'bool'),'!_0'),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'fun'('type.patLang.exp','fun'('type.list.list'('type.patSem.v'),'fun'('type.patSem.v','bool')))),'_dst_x0000x0011x1111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patSem.v'),'fun'('type.patSem.v','bool')),'_dst_x01x10_2'(s('fun'('type.patSem.v','fun'('fun'('type.patSem.v','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patSem.v'),'fun'('type.patSem.v','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'fun'('type.patLang.exp','fun'('type.list.list'('type.patSem.v'),'fun'('type.patSem.v','bool')))),'_dst_x1001x0110_2'(s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'fun'('type.patSem.v','fun'('type.patSem.v','bool'))),'_i_0_0'),s('fun'('type.patLang.exp','fun'('type.list.list'('type.patSem.v'),'type.patSem.v')),'_dst_x01x10_2'(s('fun'('type.list.list'('type.patSem.v'),'fun'('type.patLang.exp','type.patSem.v')),'const.patSem.Closure_0'),s('fun'('type.patLang.exp','type.patLang.exp'),'_i_0_0'))))))))))))),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.num.num','bool'),'bool'),'!_0'),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'fun'('type.num.num','bool')),'_dst_x00x11_2'(s('fun'('fun'('type.list.list'('type.patLang.exp'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'bool'))),'_dst_x000x111_2'(s('fun'('fun'('type.list.list'('type.patSem.v'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'fun'('type.list.list'('type.patSem.v'),'bool')))),'_dst_x0000x1111_2'(s('fun'('fun'('type.patSem.v','bool'),'bool'),'!_0'),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'fun'('type.list.list'('type.patSem.v'),'fun'('type.patSem.v','bool'))))),'_dst_x00000x00011x11111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patSem.v'),'fun'('type.patSem.v','bool')),'_dst_x01x10_2'(s('fun'('type.patSem.v','fun'('fun'('type.patSem.v','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patSem.v'),'fun'('type.patSem.v','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'fun'('type.list.list'('type.patSem.v'),'fun'('type.patSem.v','bool'))))),'_dst_x10001x01110_2'(s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'fun'('type.patSem.v','fun'('type.patSem.v','bool'))),'_i_0_0'),s('fun'('type.num.num','fun'('type.list.list'('type.patLang.exp'),'fun'('type.list.list'('type.patSem.v'),'type.patSem.v'))),'_dst_x001x010x100_3'(s('fun'('type.list.list'('type.patSem.v'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.num.num','type.patSem.v'))),'const.patSem.Recclosure_0'),s('fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.patLang.exp')),'_i_0_0'),s('fun'('type.num.num','type.num.num'),'_i_0_0'))))))))))))))))))))))))),s('fun'('fun'('type.patSem.v','type.closSem.v'),'fun'('type.patSem.v','type.closSem.v')),'_dst_x01x00x10x10x10x00x10_7'(s('fun'('type.patSem.v','fun'('fun'('type.ast.lit','type.closSem.v'),'fun'('fun'('type.num.num','fun'('type.list.list'('type.patSem.v'),'type.closSem.v')),'fun'('fun'('type.list.list'('type.patSem.v'),'fun'('type.patLang.exp','type.closSem.v')),'fun'('fun'('type.list.list'('type.patSem.v'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.num.num','type.closSem.v'))),'fun'('fun'('type.num.num','type.closSem.v'),'fun'('fun'('type.list.list'('type.patSem.v'),'type.closSem.v'),'type.closSem.v'))))))),'const.patSem.v_CASE_0'),s('fun'('type.ast.lit','type.closSem.v'),'_dst_x1x0x0x0x0x0_6'(s('fun'('type.ast.lit','fun'('fun'('type.integer.int','type.closSem.v'),'fun'('fun'('type.string.char','type.closSem.v'),'fun'('fun'('type.list.list'('type.string.char'),'type.closSem.v'),'fun'('fun'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'type.closSem.v'),'fun'('fun'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.closSem.v'),'type.closSem.v')))))),'const.ast.lit_CASE_0'),s('fun'('type.integer.int','type.closSem.v'),'_dst_x0x1_2'(s('fun'('type.closSem.v','type.closSem.v'),'const.combin.I_0'),s('fun'('type.integer.int','type.closSem.v'),'const.closSem.Number_0'))),s('fun'('type.string.char','type.closSem.v'),'_dst_x0x1_2'(s('fun'('type.closSem.v','type.closSem.v'),'const.combin.I_0'),s('fun'('type.string.char','type.closSem.v'),'_dst_x0x1_2'(s('fun'('type.integer.int','type.closSem.v'),'const.closSem.Number_0'),s('fun'('type.string.char','type.integer.int'),'_dst_x0x1_2'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('fun'('type.string.char','type.num.num'),'const.string.ORD_0'))))))),s('fun'('type.list.list'('type.string.char'),'type.closSem.v'),'_dst_x0x1_2'(s('fun'('type.closSem.v','type.closSem.v'),'const.combin.I_0'),s('fun'('type.list.list'('type.string.char'),'type.closSem.v'),'_dst_x0x1_2'(s('fun'('type.list.list'('type.closSem.v'),'type.closSem.v'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.closSem.v'),'type.closSem.v')),'const.closSem.Block_0'),s('type.num.num','const.pat_to_clos.string_tag_0'))),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.closSem.v')),'happ'(s('fun'('fun'('type.string.char','type.closSem.v'),'fun'('type.list.list'('type.string.char'),'type.list.list'('type.closSem.v'))),'const.list.MAP_0'),s('fun'('type.string.char','type.closSem.v'),'const.combin.o_2'(s('fun'('type.integer.int','type.closSem.v'),'const.closSem.Number_0'),s('fun'('type.string.char','type.integer.int'),'const.combin.o_2'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('fun'('type.string.char','type.num.num'),'const.string.ORD_0'))))))))))),s('fun'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'type.closSem.v'),'_dst_x0x1_2'(s('fun'('type.closSem.v','type.closSem.v'),'const.combin.I_0'),s('fun'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'type.closSem.v'),'_dst_x0x1_2'(s('fun'('type.integer.int','type.closSem.v'),'const.closSem.Number_0'),s('fun'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'type.integer.int'),'_dst_x0x1_2'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('fun'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'type.num.num'),'const.words.w2n_0'))))))),s('fun'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.closSem.v'),'_dst_x0x1_2'(s('fun'('type.closSem.v','type.closSem.v'),'const.combin.I_0'),s('fun'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.closSem.v'),'const.closSem.Word64_0'))))),s('fun'('fun'('type.patSem.v','type.closSem.v'),'fun'('type.num.num','fun'('type.list.list'('type.patSem.v'),'type.closSem.v'))),'_dst_x000x111_2'(s('fun'('type.closSem.v','type.closSem.v'),'const.combin.I_0'),s('fun'('fun'('type.patSem.v','type.closSem.v'),'fun'('type.num.num','fun'('type.list.list'('type.patSem.v'),'type.closSem.v'))),'_dst_x000x010x101_3'(s('fun'('type.num.num','fun'('type.list.list'('type.closSem.v'),'type.closSem.v')),'const.closSem.Block_0'),s('fun'('type.num.num','type.num.num'),'_i_0_0'),s('fun'('fun'('type.patSem.v','type.closSem.v'),'fun'('type.list.list'('type.patSem.v'),'type.list.list'('type.closSem.v'))),'_dst_x0x1_2'(s('fun'('fun'('type.patSem.v','type.closSem.v'),'fun'('type.list.list'('type.patSem.v'),'type.list.list'('type.closSem.v'))),'const.list.MAP_0'),s('fun'('fun'('type.patSem.v','type.closSem.v'),'fun'('type.patSem.v','type.closSem.v')),'_i_0_0'))))))),s('fun'('fun'('type.patSem.v','type.closSem.v'),'fun'('type.list.list'('type.patSem.v'),'fun'('type.patLang.exp','type.closSem.v'))),'_dst_x000x111_2'(s('fun'('type.closSem.v','type.closSem.v'),'const.combin.I_0'),s('fun'('fun'('type.patSem.v','type.closSem.v'),'fun'('type.list.list'('type.patSem.v'),'fun'('type.patLang.exp','type.closSem.v'))),'_dst_x000x110x000x001_4'(s('fun'('type.list.list'('type.closSem.v'),'fun'('type.num.num','fun'('type.closLang.exp','type.closSem.v'))),'const.closSem.Closure_2'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))),s('fun'('fun'('type.patSem.v','type.closSem.v'),'fun'('type.list.list'('type.patSem.v'),'type.list.list'('type.closSem.v'))),'_dst_x0x1_2'(s('fun'('fun'('type.patSem.v','type.closSem.v'),'fun'('type.list.list'('type.patSem.v'),'type.list.list'('type.closSem.v'))),'const.list.MAP_0'),s('fun'('fun'('type.patSem.v','type.closSem.v'),'fun'('type.patSem.v','type.closSem.v')),'_i_0_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'))))),s('fun'('fun'('type.patSem.v','type.closSem.v'),'fun'('type.list.list'('type.patSem.v'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.num.num','type.closSem.v')))),'_dst_x0000x1111_2'(s('fun'('type.closSem.v','type.closSem.v'),'const.combin.I_0'),s('fun'('fun'('type.patSem.v','type.closSem.v'),'fun'('type.list.list'('type.patSem.v'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.num.num','type.closSem.v')))),'_dst_x000x110x001_3'(s('fun'('type.list.list'('type.closSem.v'),'fun'('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'fun'('type.num.num','type.closSem.v'))),'const.closSem.Recclosure_2'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))),s('fun'('fun'('type.patSem.v','type.closSem.v'),'fun'('type.list.list'('type.patSem.v'),'type.list.list'('type.closSem.v'))),'_dst_x0x1_2'(s('fun'('fun'('type.patSem.v','type.closSem.v'),'fun'('type.list.list'('type.patSem.v'),'type.list.list'('type.closSem.v'))),'const.list.MAP_0'),s('fun'('fun'('type.patSem.v','type.closSem.v'),'fun'('type.patSem.v','type.closSem.v')),'_i_0_0'))),s('fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp'))),'happ'(s('fun'('fun'('type.patLang.exp','type.pair.prod'('type.num.num','type.closLang.exp')),'fun'('type.list.list'('type.patLang.exp'),'type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')))),'const.list.MAP_0'),s('fun'('type.patLang.exp','type.pair.prod'('type.num.num','type.closLang.exp')),'_dst_x0x1_2'(s('fun'('type.closLang.exp','type.pair.prod'('type.num.num','type.closLang.exp')),'const.pair.,_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'))))))))),s('fun'('type.num.num','type.closSem.v'),'_dst_x0x1_2'(s('fun'('type.closSem.v','type.closSem.v'),'const.combin.I_0'),s('fun'('type.num.num','type.closSem.v'),'const.closSem.RefPtr_0'))),s('fun'('fun'('type.patSem.v','type.closSem.v'),'fun'('type.list.list'('type.patSem.v'),'type.closSem.v')),'_dst_x00x11_2'(s('fun'('type.closSem.v','type.closSem.v'),'const.combin.I_0'),s('fun'('fun'('type.patSem.v','type.closSem.v'),'fun'('type.list.list'('type.patSem.v'),'type.closSem.v')),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closSem.v'),'type.closSem.v'),'happ'(s('fun'('type.num.num','fun'('type.list.list'('type.closSem.v'),'type.closSem.v')),'const.closSem.Block_0'),s('type.num.num','const.pat_to_clos.vector_tag_0'))),s('fun'('fun'('type.patSem.v','type.closSem.v'),'fun'('type.list.list'('type.patSem.v'),'type.list.list'('type.closSem.v'))),'_dst_x0x1_2'(s('fun'('fun'('type.patSem.v','type.closSem.v'),'fun'('type.list.list'('type.patSem.v'),'type.list.list'('type.closSem.v'))),'const.list.MAP_0'),s('fun'('fun'('type.patSem.v','type.closSem.v'),'fun'('type.patSem.v','type.closSem.v')),'_i_0_0')))))))))))).
fof('thm.pat_to_closProof.pat_to_closProof_|49|_prove_ltb', axiom, ![V_27a_27]: (((?[V_27i_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',V_27i_27))))) | (?[V_27c_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',V_27c_27))))) | (?[V_27s_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),V_27s_27))))) | (?[V_27w_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),V_27w_27))))) | ?[V_27w_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),V_27w_27))))))))) | (?[V_27cn_27, V_27vs_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',V_27cn_27),s('type.list.list'('type.patSem.v'),V_27vs_27))) | (?[V_27vs_27, V_27e_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Closure_2'(s('type.list.list'('type.patSem.v'),V_27vs_27),s('type.patLang.exp',V_27e_27))) | (?[V_27vs_27, V_27es_27, V_27k_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Recclosure_3'(s('type.list.list'('type.patSem.v'),V_27vs_27),s('type.list.list'('type.patLang.exp'),V_27es_27),s('type.num.num',V_27k_27))) | (?[V_27m_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Loc_1'(s('type.num.num',V_27m_27))) | ?[V_27vs_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),V_27vs_27)))))))) => (?[V_27i_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',V_27i_27))))) | (?[V_27w_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),V_27w_27))))) | (?[V_27w_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),V_27w_27))))) | (?[V_27c_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',V_27c_27))))) | (?[V_27s_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),V_27s_27))))) | (?[V_27m_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Loc_1'(s('type.num.num',V_27m_27))) | (?[V_27cn_27, V_27vs_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',V_27cn_27),s('type.list.list'('type.patSem.v'),V_27vs_27))) | (?[V_27vs_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),V_27vs_27))) | (?[V_27vs_27, V_27e_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Closure_2'(s('type.list.list'('type.patSem.v'),V_27vs_27),s('type.patLang.exp',V_27e_27))) | ?[V_27vs_27, V_27es_27, V_27k_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Recclosure_3'(s('type.list.list'('type.patSem.v'),V_27vs_27),s('type.list.list'('type.patLang.exp'),V_27es_27),s('type.num.num',V_27k_27)))))))))))))).
fof('thm.pat_to_closProof.compile_v_ind', axiom, ![V_27P_27]: ((![V_27i_27]: p(s('bool','happ'(s('fun'('type.patSem.v','bool'),V_27P_27),s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',V_27i_27)))))))) & (![V_27w_27]: p(s('bool','happ'(s('fun'('type.patSem.v','bool'),V_27P_27),s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),V_27w_27)))))))) & (![V_27w_27]: p(s('bool','happ'(s('fun'('type.patSem.v','bool'),V_27P_27),s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),V_27w_27)))))))) & (![V_27c_27]: p(s('bool','happ'(s('fun'('type.patSem.v','bool'),V_27P_27),s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',V_27c_27)))))))) & (![V_27s_27]: p(s('bool','happ'(s('fun'('type.patSem.v','bool'),V_27P_27),s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),V_27s_27)))))))) & (![V_27m_27]: p(s('bool','happ'(s('fun'('type.patSem.v','bool'),V_27P_27),s('type.patSem.v','const.patSem.Loc_1'(s('type.num.num',V_27m_27)))))) & (![V_27cn_27, V_27vs_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patSem.v',V_27a_27),s('fun'('type.patSem.v','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patSem.v'),V_27vs_27)))))) => p(s('bool','happ'(s('fun'('type.patSem.v','bool'),V_27P_27),s('type.patSem.v',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patSem.v','bool'),V_27P_27),s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',V_27cn_27),s('type.list.list'('type.patSem.v'),V_27vs_27))))))) & (![V_27vs_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patSem.v',V_27a_27),s('fun'('type.patSem.v','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patSem.v'),V_27vs_27)))))) => p(s('bool','happ'(s('fun'('type.patSem.v','bool'),V_27P_27),s('type.patSem.v',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patSem.v','bool'),V_27P_27),s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),V_27vs_27))))))) & (![V_27vs_27, V_27e_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patSem.v',V_27a_27),s('fun'('type.patSem.v','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patSem.v'),V_27vs_27)))))) => p(s('bool','happ'(s('fun'('type.patSem.v','bool'),V_27P_27),s('type.patSem.v',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patSem.v','bool'),V_27P_27),s('type.patSem.v','const.patSem.Closure_2'(s('type.list.list'('type.patSem.v'),V_27vs_27),s('type.patLang.exp',V_27e_27))))))) & ![V_27vs_27, V_27es_27, V_27k_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patSem.v',V_27a_27),s('fun'('type.patSem.v','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patSem.v'),V_27vs_27)))))) => p(s('bool','happ'(s('fun'('type.patSem.v','bool'),V_27P_27),s('type.patSem.v',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patSem.v','bool'),V_27P_27),s('type.patSem.v','const.patSem.Recclosure_3'(s('type.list.list'('type.patSem.v'),V_27vs_27),s('type.list.list'('type.patLang.exp'),V_27es_27),s('type.num.num',V_27k_27)))))))))))))))) => ![V_27v_27]: p(s('bool','happ'(s('fun'('type.patSem.v','bool'),V_27P_27),s('type.patSem.v',V_27v_27)))))).
fof('ARITY_0_1_const.pat_to_closProof.compile_v', axiom, ![VV0]: s('type.closSem.v','happ'(s('fun'('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.patSem.v',VV0))) = s('type.closSem.v','const.pat_to_closProof.compile_v_1'(s('type.patSem.v',VV0)))).
fof('thm.pat_to_closProof.compile_v_def|split|0', axiom, ![V_27i_27]: s('type.closSem.v','const.pat_to_closProof.compile_v_1'(s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',V_27i_27))))))) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',V_27i_27)))).
fof('thm.pat_to_closProof.compile_v_def|split|1', axiom, ![V_27w_27]: s('type.closSem.v','const.pat_to_closProof.compile_v_1'(s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),V_27w_27))))))) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),V_27w_27)))))))).
fof('thm.pat_to_closProof.compile_v_def|split|2', axiom, ![V_27w_27]: s('type.closSem.v','const.pat_to_closProof.compile_v_1'(s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),V_27w_27))))))) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),V_27w_27)))).
fof('thm.pat_to_closProof.compile_v_def|split|3', axiom, ![V_27c_27]: s('type.closSem.v','const.pat_to_closProof.compile_v_1'(s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',V_27c_27))))))) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.string.ORD_1'(s('type.string.char',V_27c_27)))))))).
fof('thm.pat_to_closProof.compile_v_def|split|4', axiom, ![V_27s_27]: s('type.closSem.v','const.pat_to_closProof.compile_v_1'(s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),V_27s_27))))))) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num','const.pat_to_clos.string_tag_0'),s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s('fun'('type.string.char','type.closSem.v'),'const.combin.o_2'(s('fun'('type.integer.int','type.closSem.v'),'const.closSem.Number_0'),s('fun'('type.string.char','type.integer.int'),'const.combin.o_2'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('fun'('type.string.char','type.num.num'),'const.string.ORD_0'))))),s('type.list.list'('type.string.char'),V_27s_27)))))).
fof('thm.pat_to_closProof.compile_v_def|split|5', axiom, ![V_27m_27]: s('type.closSem.v','const.pat_to_closProof.compile_v_1'(s('type.patSem.v','const.patSem.Loc_1'(s('type.num.num',V_27m_27))))) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',V_27m_27)))).
fof('thm.pat_to_closProof.compile_v_def|split|6', axiom, ![V_27vs_27, V_27cn_27]: s('type.closSem.v','happ'(s('fun'('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',V_27cn_27),s('type.list.list'('type.patSem.v'),V_27vs_27))))) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',V_27cn_27),s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s('fun'('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.list.list'('type.patSem.v'),V_27vs_27)))))).
fof('thm.pat_to_closProof.compile_v_def|split|7', axiom, ![V_27vs_27]: s('type.closSem.v','happ'(s('fun'('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),V_27vs_27))))) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num','const.pat_to_clos.vector_tag_0'),s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s('fun'('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.list.list'('type.patSem.v'),V_27vs_27)))))).
fof('thm.pat_to_closProof.compile_v_def|split|8', axiom, ![V_27vs_27, V_27e_27]: s('type.closSem.v','happ'(s('fun'('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.patSem.v','const.patSem.Closure_2'(s('type.list.list'('type.patSem.v'),V_27vs_27),s('type.patLang.exp',V_27e_27))))) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'),s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s('fun'('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.list.list'('type.patSem.v'),V_27vs_27))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp',V_27e_27)))))).
fof('thm.pat_to_closProof.compile_v_def|split|9', axiom, ![V_27vs_27, V_27k_27, V_27es_27]: s('type.closSem.v','happ'(s('fun'('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.patSem.v','const.patSem.Recclosure_3'(s('type.list.list'('type.patSem.v'),V_27vs_27),s('type.list.list'('type.patLang.exp'),V_27es_27),s('type.num.num',V_27k_27))))) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'),s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s('fun'('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.list.list'('type.patSem.v'),V_27vs_27))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.list.MAP_2'(s('fun'('type.patLang.exp','type.pair.prod'('type.num.num','type.closLang.exp')),'_dst_x0x1_2'(s('fun'('type.closLang.exp','type.pair.prod'('type.num.num','type.closLang.exp')),'const.pair.,_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.patLang.exp','type.closLang.exp'),'const.pat_to_clos.compile_0'))),s('type.list.list'('type.patLang.exp'),V_27es_27))),s('type.num.num',V_27k_27)))).
fof('thm.pat_to_closProof.compile_sv_def|split|0', axiom, ![V_27v_27]: s('type.closSem.ref'('type.closSem.v'),'const.pat_to_closProof.compile_sv_1'(s('type.semanticPrimitives.store_v'('type.patSem.v'),'const.semanticPrimitives.Refv_1'(s('type.patSem.v',V_27v_27))))) = s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v','const.pat_to_closProof.compile_v_1'(s('type.patSem.v',V_27v_27))),s('type.list.list'('type.closSem.v'),'const.list.NIL_0')))))).
fof('thm.pat_to_closProof.compile_sv_def|split|1', axiom, ![V_27vs_27]: s('type.closSem.ref'('type.closSem.v'),'const.pat_to_closProof.compile_sv_1'(s('type.semanticPrimitives.store_v'('type.patSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.patSem.v'),V_27vs_27))))) = s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s('fun'('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.list.list'('type.patSem.v'),V_27vs_27)))))).
fof('thm.pat_to_closProof.compile_sv_def|split|2', axiom, ![V_27bs_27]: s('type.closSem.ref'('type.closSem.v'),'const.pat_to_closProof.compile_sv_1'(s('type.semanticPrimitives.store_v'('type.patSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),V_27bs_27))))) = s('type.closSem.ref'('type.closSem.v'),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),V_27bs_27)))).
fof('ARITY_0_1_const.pat_to_closProof.compile_sv', axiom, ![VV0]: s('type.closSem.ref'('type.closSem.v'),'happ'(s('fun'('type.semanticPrimitives.store_v'('type.patSem.v'),'type.closSem.ref'('type.closSem.v')),'const.pat_to_closProof.compile_sv_0'),s('type.semanticPrimitives.store_v'('type.patSem.v'),VV0))) = s('type.closSem.ref'('type.closSem.v'),'const.pat_to_closProof.compile_sv_1'(s('type.semanticPrimitives.store_v'('type.patSem.v'),VV0)))).
fof('thm.pat_to_closProof.compile_state_def', axiom, ![V_27FFI_27]: ![V_27s_27]: s('type.closSem.state'(V_27FFI_27),'const.pat_to_closProof.compile_state_1'(s('type.patSem.state'(V_27FFI_27),V_27s_27))) = s('type.closSem.state'(V_27FFI_27),'const.closSem.state_globals_fupd_2'(s('fun'('type.list.list'('type.option.option'('type.closSem.v')),'type.list.list'('type.option.option'('type.closSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.list.MAP_2'(s('fun'('type.option.option'('type.patSem.v'),'type.option.option'('type.closSem.v')),'const.option.OPTION_MAP_1'(s('fun'('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'))),s('type.list.list'('type.option.option'('type.patSem.v')),'const.patSem.state_globals_1'(s('type.patSem.state'(V_27FFI_27),V_27s_27))))))),s('type.closSem.state'(V_27FFI_27),'const.closSem.state_refs_fupd_2'(s('fun'('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.alist.alist_to_fmap_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closSem.ref'('type.closSem.v'))),'const.list.GENLIST_2'(s('fun'('type.num.num','type.pair.prod'('type.num.num','type.closSem.ref'('type.closSem.v'))),'_dst_x1x1_2'(s('fun'('type.num.num','fun'('type.closSem.ref'('type.closSem.v'),'type.pair.prod'('type.num.num','type.closSem.ref'('type.closSem.v')))),'const.pair.,_0'),s('fun'('type.num.num','type.closSem.ref'('type.closSem.v')),'_dst_x0x1_2'(s('fun'('type.semanticPrimitives.store_v'('type.patSem.v'),'type.closSem.ref'('type.closSem.v')),'const.pat_to_closProof.compile_sv_0'),s('fun'('type.num.num','type.semanticPrimitives.store_v'('type.patSem.v')),'_dst_x1x0_2'(s('fun'('type.num.num','fun'('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'type.semanticPrimitives.store_v'('type.patSem.v'))),'const.list.EL_0'),s('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'const.patSem.state_refs_1'(s('type.patSem.state'(V_27FFI_27),V_27s_27))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'const.patSem.state_refs_1'(s('type.patSem.state'(V_27FFI_27),V_27s_27))))))))))),s('type.closSem.state'(V_27FFI_27),'const.closSem.state_ffi_fupd_2'(s('fun'('type.ffi.ffi_state'(V_27FFI_27),'type.ffi.ffi_state'(V_27FFI_27)),'const.combin.K_1'(s('type.ffi.ffi_state'(V_27FFI_27),'const.patSem.state_ffi_1'(s('type.patSem.state'(V_27FFI_27),V_27s_27))))),s('type.closSem.state'(V_27FFI_27),'const.closSem.state_clock_fupd_2'(s('fun'('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.patSem.state_clock_1'(s('type.patSem.state'(V_27FFI_27),V_27s_27))))),s('type.closSem.state'(V_27FFI_27),'const.closSem.state_code_fupd_2'(s('fun'('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FEMPTY_0'))),s('type.closSem.state'(V_27FFI_27),'const.bool.ARB_0')))))))))))).
fof('thm.pat_to_closProof.compile_state_const', axiom, ![V_27A_27]: ![V_27s_27]: s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(V_27A_27),'const.pat_to_closProof.compile_state_1'(s('type.patSem.state'(V_27A_27),V_27s_27))))) = s('type.num.num','const.patSem.state_clock_1'(s('type.patSem.state'(V_27A_27),V_27s_27)))).
fof('thm.pat_to_closProof.compile_state_dec_clock', axiom, ![V_27A_27]: ![V_27y_27]: s('type.closSem.state'(V_27A_27),'const.pat_to_closProof.compile_state_1'(s('type.patSem.state'(V_27A_27),'const.patSem.dec_clock_1'(s('type.patSem.state'(V_27A_27),V_27y_27))))) = s('type.closSem.state'(V_27A_27),'const.closSem.dec_clock_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.closSem.state'(V_27A_27),'const.pat_to_closProof.compile_state_1'(s('type.patSem.state'(V_27A_27),V_27y_27)))))).
fof('thm.pat_to_closProof.compile_state_with_clock', axiom, ![V_27A_27]: ![V_27s_27, V_27k_27]: s('type.closSem.state'(V_27A_27),'const.pat_to_closProof.compile_state_1'(s('type.patSem.state'(V_27A_27),'const.patSem.state_clock_fupd_2'(s('fun'('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',V_27k_27))),s('type.patSem.state'(V_27A_27),V_27s_27))))) = s('type.closSem.state'(V_27A_27),'const.closSem.state_clock_fupd_2'(s('fun'('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',V_27k_27))),s('type.closSem.state'(V_27A_27),'const.pat_to_closProof.compile_state_1'(s('type.patSem.state'(V_27A_27),V_27s_27)))))).
fof('thm.pat_to_closProof.do_eq|split|0', axiom, ![V_27v_7c49_7c_27, V_27v2_27]: (~ (s('type.semanticPrimitives.eq_result','const.patSem.do_eq_2'(s('type.patSem.v',V_27v_7c49_7c_27),s('type.patSem.v',V_27v2_27))) = s('type.semanticPrimitives.eq_result','const.semanticPrimitives.Eq_type_error_0')) => s('type.semanticPrimitives.eq_result','const.patSem.do_eq_2'(s('type.patSem.v',V_27v_7c49_7c_27),s('type.patSem.v',V_27v2_27))) = s('type.semanticPrimitives.eq_result','const.closSem.do_eq_2'(s('type.closSem.v','const.pat_to_closProof.compile_v_1'(s('type.patSem.v',V_27v_7c49_7c_27))),s('type.closSem.v','const.pat_to_closProof.compile_v_1'(s('type.patSem.v',V_27v2_27))))))).
fof('thm.pat_to_closProof.do_eq|split|1', axiom, ![V_27vs_7c49_7c_27, V_27vs2_27]: (~ (s('type.semanticPrimitives.eq_result','const.patSem.do_eq_list_2'(s('type.list.list'('type.patSem.v'),V_27vs_7c49_7c_27),s('type.list.list'('type.patSem.v'),V_27vs2_27))) = s('type.semanticPrimitives.eq_result','const.semanticPrimitives.Eq_type_error_0')) => s('type.semanticPrimitives.eq_result','const.patSem.do_eq_list_2'(s('type.list.list'('type.patSem.v'),V_27vs_7c49_7c_27),s('type.list.list'('type.patSem.v'),V_27vs2_27))) = s('type.semanticPrimitives.eq_result','const.closSem.do_eq_list_2'(s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s('fun'('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.list.list'('type.patSem.v'),V_27vs_7c49_7c_27))),s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s('fun'('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.list.list'('type.patSem.v'),V_27vs2_27))))))).
fof('thm.pat_to_closProof.list_to_v', axiom, ![V_27ls_27]: s('type.closSem.v','const.closSem.list_to_v_1'(s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s('fun'('type.string.char','type.closSem.v'),'const.combin.o_2'(s('fun'('type.integer.int','type.closSem.v'),'const.closSem.Number_0'),s('fun'('type.string.char','type.integer.int'),'const.combin.o_2'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('fun'('type.string.char','type.num.num'),'const.string.ORD_0'))))),s('type.list.list'('type.string.char'),V_27ls_27))))) = s('type.closSem.v','const.pat_to_closProof.compile_v_1'(s('type.patSem.v','const.patSem.char_list_to_v_1'(s('type.list.list'('type.string.char'),V_27ls_27)))))).
fof('thm.pat_to_closProof.v_to_char_list', axiom, ![V_27v_27, V_27ls_27]: (s('type.option.option'('type.list.list'('type.string.char')),'const.patSem.v_to_char_list_1'(s('type.patSem.v',V_27v_27))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),V_27ls_27))) => s('type.option.option'('type.list.list'('type.closSem.v')),'const.closSem.v_to_list_1'(s('type.closSem.v','const.pat_to_closProof.compile_v_1'(s('type.patSem.v',V_27v_27))))) = s('type.option.option'('type.list.list'('type.closSem.v')),'const.option.SOME_1'(s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s('fun'('type.string.char','type.closSem.v'),'const.combin.o_2'(s('fun'('type.integer.int','type.closSem.v'),'const.closSem.Number_0'),s('fun'('type.string.char','type.integer.int'),'const.combin.o_2'(s('fun'('type.num.num','type.integer.int'),'const.integer.int_of_num_0'),s('fun'('type.string.char','type.num.num'),'const.string.ORD_0'))))),s('type.list.list'('type.string.char'),V_27ls_27))))))).
fof('thm.pat_to_closProof.v_to_list', axiom, ![V_27v_27, V_27ls_27]: (s('type.option.option'('type.list.list'('type.patSem.v')),'const.patSem.v_to_list_1'(s('type.patSem.v',V_27v_27))) = s('type.option.option'('type.list.list'('type.patSem.v')),'const.option.SOME_1'(s('type.list.list'('type.patSem.v'),V_27ls_27))) => s('type.option.option'('type.list.list'('type.closSem.v')),'const.closSem.v_to_list_1'(s('type.closSem.v','happ'(s('fun'('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.patSem.v',V_27v_27))))) = s('type.option.option'('type.list.list'('type.closSem.v')),'const.option.SOME_1'(s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s('fun'('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.list.list'('type.patSem.v'),V_27ls_27))))))).
fof('thm.pat_to_closProof.Boolv', axiom, ![V_27b_27]: s('type.closSem.v','const.pat_to_closProof.compile_v_1'(s('type.patSem.v','const.patSem.Boolv_1'(s('bool',V_27b_27))))) = s('type.closSem.v','const.closSem.Boolv_1'(s('bool',V_27b_27)))).
fof('thm.pat_to_closProof.pat_to_closProof_|49|4_prove_ltb|split|0', axiom, ![V_27A_27]: ![V_27ls_27]: (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(V_27A_27),V_27ls_27))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ?[V_27y_27]: s('type.list.list'(V_27A_27),V_27ls_27) = s('type.list.list'(V_27A_27),'const.list.CONS_2'(s(V_27A_27,V_27y_27),s('type.list.list'(V_27A_27),'const.list.NIL_0'))))).
fof('thm.pat_to_closProof.pat_to_closProof_|49|4_prove_ltb|split|1', axiom, ![V_27A_27]: ![V_27ls_27]: (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(V_27A_27),V_27ls_27))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ?[V_27y_27, V_27z_27]: s('type.list.list'(V_27A_27),V_27ls_27) = s('type.list.list'(V_27A_27),'const.list.CONS_2'(s(V_27A_27,V_27y_27),s('type.list.list'(V_27A_27),'const.list.CONS_2'(s(V_27A_27,V_27z_27),s('type.list.list'(V_27A_27),'const.list.NIL_0'))))))).
fof('thm.pat_to_closProof.pat_to_closProof_|49|4_prove_ltb|split|2', axiom, ![V_27A_27]: ![V_27ls_27]: (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(V_27A_27),V_27ls_27))) = s('type.num.num','const.num.|48|_0') <=> s('type.list.list'(V_27A_27),V_27ls_27) = s('type.list.list'(V_27A_27),'const.list.NIL_0'))).
fof('thm.pat_to_closProof.pat_to_closProof_|49|4_prove_ltb|split|3', axiom, ![V_27A_27]: ![V_27ls_27]: (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(V_27A_27),V_27ls_27))) <=> s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(V_27A_27),V_27ls_27))) = s('type.num.num','const.num.|48|_0'))).
fof('thm.pat_to_closProof.pat_to_closProof_|49|4_prove_ltb|split|4', axiom, ![V_27A_27]: ![V_27ls_27]: (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(V_27A_27),V_27ls_27))) <=> s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(V_27A_27),V_27ls_27))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))).
fof('thm.pat_to_closProof.pat_to_closProof_|49|4_prove_ltb|split|5', axiom, ![V_27A_27]: ![V_27ls_27]: (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(V_27A_27),V_27ls_27))) <=> s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(V_27A_27),V_27ls_27))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))).
fof('thm.pat_to_closProof.pat_to_closProof_|49|5_prove_ltb', axiom, ![V_27FFI_27]: ![V_27s_27, V_27env_27, V_27e_7c49_7c_27]: ?[V_27s_7c39_7c_27, V_27v4_27]: s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),V_27env_27),s('type.patSem.state'(V_27FFI_27),V_27s_27),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp',V_27e_7c49_7c_27),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(V_27FFI_27),V_27s_7c39_7c_27),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),V_27v4_27)))).
fof('thm.pat_to_closProof.pat_to_closProof_|49|6_prove_ltb', axiom, ![V_27FFI_27]: ![V_27s_27, V_27es_27, V_27env_27]: ?[V_27s_7c39_7c_27, V_27v3_27]: s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),V_27env_27),s('type.patSem.state'(V_27FFI_27),V_27s_27),s('type.list.list'('type.patLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.pair.prod'('type.patSem.state'(V_27FFI_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(V_27FFI_27),V_27s_7c39_7c_27),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),V_27v3_27)))).
fof('thm.pat_to_closProof.pat_to_closProof_|49|7_prove_ltb', conjecture, ![V_27FFI_27]: ![V_27z_27, V_27s_27, V_27env_27]: ?[V_27v2_27, V_27s_7c49_7c_27]: s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27)),'happ'(s('fun'('fun'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'fun'('type.closSem.state'(V_27FFI_27),'type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27)))),'type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27))),'happ'(s('fun'('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27)),'fun'('fun'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'fun'('type.closSem.state'(V_27FFI_27),'type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27)))),'type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27)))),'const.pair.pair_CASE_0'),s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27)),'happ'(s('fun'('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(V_27FFI_27))),'type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27))),'const.closSem.evaluate_0'),s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(V_27FFI_27))),'happ'(s('fun'('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(V_27FFI_27)),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(V_27FFI_27)))),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'fun'('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(V_27FFI_27)),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(V_27FFI_27))))),'const.pair.,_0'),s('type.list.list'('type.closLang.exp'),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),'happ'(s('fun'('type.closLang.exp','fun'('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp',V_27z_27))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(V_27FFI_27)),'happ'(s('fun'('type.closSem.state'(V_27FFI_27),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(V_27FFI_27))),'happ'(s('fun'('type.list.list'('type.closSem.v'),'fun'('type.closSem.state'(V_27FFI_27),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(V_27FFI_27)))),'const.pair.,_0'),s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s('fun'('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.list.list'('type.patSem.v'),V_27env_27))))),s('type.closSem.state'(V_27FFI_27),'const.pat_to_closProof.compile_state_1'(s('type.patSem.state'(V_27FFI_27),V_27s_27))))))))))),s('fun'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'fun'('type.closSem.state'(V_27FFI_27),'type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27)))),'_dst_x00x10x01x01_4'(s('fun'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'fun'('fun'('type.list.list'('type.closSem.v'),'type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27))),'fun'('fun'('type.semanticPrimitives.error_result'('type.closSem.v'),'type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27))),'type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27))))),'const.semanticPrimitives.result_CASE_0'),s('fun'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v')),'_i_0_0'),s('fun'('type.closSem.state'(V_27FFI_27),'fun'('type.list.list'('type.closSem.v'),'type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27)))),'_dst_x00x10x01_3'(s('fun'('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27)),'fun'('fun'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'fun'('type.closSem.state'(V_27FFI_27),'type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27)))),'type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27)))),'const.pair.pair_CASE_0'),s('fun'('type.closSem.state'(V_27FFI_27),'type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27))),'_dst_x0x1_2'(s('fun'('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(V_27FFI_27))),'type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27))),'const.closSem.evaluate_0'),s('fun'('type.closSem.state'(V_27FFI_27),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(V_27FFI_27)))),'_dst_x0x1_2'(s('fun'('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(V_27FFI_27)),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(V_27FFI_27)))),'happ'(s('fun'('type.list.list'('type.closLang.exp'),'fun'('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(V_27FFI_27)),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(V_27FFI_27))))),'const.pair.,_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('fun'('type.closSem.state'(V_27FFI_27),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(V_27FFI_27))),'happ'(s('fun'('type.list.list'('type.closSem.v'),'fun'('type.closSem.state'(V_27FFI_27),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(V_27FFI_27)))),'const.pair.,_0'),s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s('fun'('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.list.list'('type.patSem.v'),V_27env_27))))))))),s('fun'('type.list.list'('type.closSem.v'),'fun'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'fun'('type.closSem.state'(V_27FFI_27),'type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27))))),'_dst_x000x010x101x001_4'(s('fun'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'fun'('fun'('type.list.list'('type.closSem.v'),'type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27))),'fun'('fun'('type.semanticPrimitives.error_result'('type.closSem.v'),'type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27))),'type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27))))),'const.semanticPrimitives.result_CASE_0'),s('fun'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v')),'_i_0_0'),s('fun'('type.list.list'('type.closSem.v'),'fun'('type.closSem.state'(V_27FFI_27),'fun'('type.list.list'('type.closSem.v'),'type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27))))),'_dst_x000x101x010_3'(s('fun'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'fun'('type.closSem.state'(V_27FFI_27),'type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27)))),'const.pair.,_0'),s('fun'('type.list.list'('type.closSem.v'),'fun'('type.list.list'('type.closSem.v'),'type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.closSem.v'),'type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v')),'const.semanticPrimitives.Rval_0'),s('fun'('type.list.list'('type.closSem.v'),'fun'('type.list.list'('type.closSem.v'),'type.list.list'('type.closSem.v'))),'_dst_x0x1_2'(s('fun'('type.closSem.v','fun'('type.list.list'('type.closSem.v'),'type.list.list'('type.closSem.v'))),'const.list.CONS_0'),s('fun'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.list.HD_0'))))),s('fun'('type.closSem.state'(V_27FFI_27),'type.closSem.state'(V_27FFI_27)),'_i_0_0'))),s('fun'('type.closSem.state'(V_27FFI_27),'fun'('type.semanticPrimitives.error_result'('type.closSem.v'),'type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27)))),'_dst_x00x01x10_3'(s('fun'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'fun'('type.closSem.state'(V_27FFI_27),'type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27)))),'const.pair.,_0'),s('fun'('type.semanticPrimitives.error_result'('type.closSem.v'),'type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v')),'const.semanticPrimitives.Rerr_0'),s('fun'('type.closSem.state'(V_27FFI_27),'type.closSem.state'(V_27FFI_27)),'_i_0_0'))))))),s('fun'('type.closSem.state'(V_27FFI_27),'fun'('type.semanticPrimitives.error_result'('type.closSem.v'),'type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27)))),'_dst_x00x01x10_3'(s('fun'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'fun'('type.closSem.state'(V_27FFI_27),'type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27)))),'const.pair.,_0'),s('fun'('type.semanticPrimitives.error_result'('type.closSem.v'),'type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v')),'const.semanticPrimitives.Rerr_0'),s('fun'('type.closSem.state'(V_27FFI_27),'type.closSem.state'(V_27FFI_27)),'_i_0_0'))))))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27)),'happ'(s('fun'('type.closSem.state'(V_27FFI_27),'type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27))),'happ'(s('fun'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'fun'('type.closSem.state'(V_27FFI_27),'type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(V_27FFI_27)))),'const.pair.,_0'),s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),V_27v2_27))),s('type.closSem.state'(V_27FFI_27),V_27s_7c49_7c_27)))).
