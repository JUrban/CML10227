include('incl/logic.ax').
include('incl/bool.ax').
include('incl/marker.ax').
include('incl/num.ax').
include('incl/combin.ax').
include('incl/normalForms.ax').
include('incl/sat.ax').
include('incl/relation.ax').
include('incl/pair.ax').
include('incl/prim_rec.ax').
include('incl/arithmetic.ax').
include('incl/numeral.ax').
include('incl/ConseqConv.ax').
include('incl/sum.ax').
include('incl/one.ax').
include('incl/option.ax').
include('incl/while.ax').
include('incl/operator.ax').
include('incl/basicSize.ax').
include('incl/numpair.ax').
include('incl/pred_set.ax').
include('incl/ind_type.ax').
include('incl/list.ax').
include('incl/rich_list.ax').
include('incl/quantHeuristics.ax').
include('incl/fcp.ax').
include('incl/logroot.ax').
include('incl/bit.ax').
include('incl/string.ax').
include('incl/numposrep.ax').
include('incl/ASCIInumbers.ax').
include('incl/numeral_bit.ax').
include('incl/sum_num.ax').
include('incl/words.ax').
include('incl/alignment.ax').
include('incl/sorting.ax').
include('incl/finite_map.ax').
include('incl/alist.ax').
include('incl/sptree.ax').
include('incl/indexedLists.ax').
include('incl/res_quan.ax').
include('incl/quotient.ax').
include('incl/quotient_list.ax').
include('incl/set_sep.ax').
include('incl/set_relation.ax').
include('incl/wot.ax').
include('incl/toto.ax').
include('incl/comparison.ax').
include('incl/llist.ax').
include('incl/misc.ax').
include('incl/quotient_pair.ax').
include('incl/quotient_sum.ax').
include('incl/divides.ax').
include('incl/gcd.ax').
include('incl/quotient_option.ax').
include('incl/integer.ax').
include('incl/Omega.ax').
include('incl/int_arith.ax').
include('incl/integer_word.ax').
include('incl/lib.ax').
include('incl/ffi.ax').
include('incl/grammar.ax').
include('incl/peg.ax').
include('incl/pegexec.ax').
include('incl/state_transformer.ax').
include('incl/lprefix_lub.ax').
include('incl/tokens.ax').
include('incl/gram.ax').
include('incl/ast.ax').
include('incl/asm.ax').
include('incl/semanticPrimitives.ax').
include('incl/reg_alloc.ax').
include('incl/typeSystem.ax').
include('incl/funBigStep.ax').
include('incl/termination.ax').
include('incl/labLang.ax').
include('incl/lab_filter.ax').
include('incl/lab_to_target.ax').
include('incl/closLang.ax').
include('incl/bvl.ax').
include('incl/bvp.ax').
include('incl/bvp_live.ax').
include('incl/smallStep.ax').
include('incl/bigStep.ax').
include('incl/db_vars.ax').
include('incl/clos_free.ax').
include('incl/clos_annotate.ax').
include('incl/clos_number.ax').
include('incl/tokenUtils.ax').
include('incl/cmlPtreeConversion.ax').
include('incl/lexer_fun.ax').
include('incl/NTproperties.ax').
include('incl/initialProgram.ax').
include('incl/bvp_simp.ax').
include('incl/bvi.ax').
include('incl/bvp_space.ax').
include('incl/bvi_to_bvp.ax').
include('incl/evalProps.ax').
include('incl/determ.ax').
include('incl/bigClock.ax').
include('incl/interp.ax').
include('incl/funBigStepEquiv.ax').
include('incl/conLang.ax').
include('incl/exhLang.ax').
include('incl/dec_to_exh.ax').
include('incl/patLang.ax').
include('incl/pat_to_clos.ax').
include('incl/bvl_jump.ax').
include('incl/clos_call.ax').
include('incl/clos_remove.ax').
include('incl/clos_mti.ax').
include('incl/clos_to_bvl.ax').
include('incl/bvl_inline.ax').
include('incl/asmSem.ax').
include('incl/asmProps.ax').
include('incl/targetSem.ax').
include('incl/typeSoundInvariants.ax').
include('incl/typeSysProps.ax').
include('incl/bvl_handle.ax').
include('incl/bvl_const.ax').
include('incl/bvl_to_bvi.ax').
include('incl/modLang.ax').
include('incl/mod_to_con.ax').
include('incl/bigSmallInvariants.ax').
include('incl/con_to_dec.ax').
include('incl/targetProps.ax').
include('incl/weakening.ax').
include('incl/bigSmallEquiv.ax').
include('incl/untypedSafety.ax').
include('incl/funBigStepProps.ax').
include('incl/source_to_mod.ax').
include('incl/semantics.ax').
include('incl/initSemEnv.ax').
include('incl/typeSound.ax').
include('incl/wordLang.ax').
include('incl/exh_to_pat.ax').
include('incl/wordSem.ax').
include('incl/labSem.ax').
include('incl/semanticsProps.ax').
include('incl/labProps.ax').
include('incl/closSem.ax').
include('incl/closProps.ax').
include('incl/patSem.ax').
include('incl/modSem.ax').
include('incl/bvlSem.ax').
include('incl/bviSem.ax').
include('incl/bvlProps.ax').
include('incl/bvpSem.ax').
include('incl/exhSem.ax').
include('incl/conSem.ax').
include('incl/decSem.ax').
include('incl/conProps.ax').
include('incl/decProps.ax').
include('incl/exhProps.ax').
include('incl/modProps.ax').
include('incl/patProps.ax').
include('incl/reg_allocProof.ax').
include('incl/bviProps.ax').
include('incl/bvpProps.ax').
include('incl/bvp_simpProof.ax').
include('incl/bvp_spaceProof.ax').
include('incl/bvl_jumpProof.ax').
include('incl/wellorder.ax').
include('incl/cardinal.ax').
include('incl/hrat.ax').
include('incl/hreal.ax').
include('incl/realax.ax').
include('incl/real.ax').
include('incl/topology.ax').
include('incl/nets.ax').
include('incl/seq.ax').
include('incl/lim.ax').
include('incl/powser.ax').
include('incl/transc.ax').
include('incl/intreal.ax').
include('incl/binary_ieee.ax').
include('incl/tailrec.ax').
include('incl/prog.ax').
include('incl/temporal.ax').
include('incl/address.ax').
include('incl/state.ax').
include('incl/temporal_state.ax').
include('incl/machine_ieee.ax').
include('incl/bitstring.ax').
include('incl/arm.ax').
include('incl/blast.ax').
include('incl/update.ax').
include('incl/arm_step.ax').
include('incl/arm6_target.ax').
include('incl/arm6_eval_encode.ax').
include('incl/mlstring.ax').
include('incl/patternMatches.ax').
include('incl/ml_translator.ax').
include('incl/ml_optimise.ax').
include('incl/ml_pmatch.ax').
include('incl/mini_prelude.ax').
include('incl/bag.ax').
include('incl/benchmark.ax').
include('incl/arm8.ax').
include('incl/arm8_step.ax').
include('incl/clos_relation.ax').
include('incl/clos_relationProps.ax').
include('incl/clos_removeProof.ax').
include('incl/simpleSexp.ax').
include('incl/fromSexp.ax').
include('incl/word_inst.ax').
include('incl/word_alloc.ax').
include('incl/word_remove.ax').
include('incl/word_to_word.ax').
include('incl/stackLang.ax').
include('incl/bvp_to_word.ax').
include('incl/stack_alloc.ax').
include('incl/riscv.ax').
include('incl/riscv_step.ax').
include('incl/std_prelude.ax').
include('incl/holSyntaxLib.ax').
include('incl/holSyntax.ax').
include('incl/holSyntaxExtra.ax').
include('incl/ml_module_demo.ax').
include('incl/bvp_liveProof.ax').
include('incl/PhysicistsQueue.ax').
include('incl/holBoolSyntax.ax').
include('incl/holAxiomsSyntax.ax').
include('incl/setSpec.ax').
include('incl/holSemantics.ax').
include('incl/holSemanticsExtra.ax').
include('incl/holBool.ax').
include('incl/commonUnif.ax').
include('incl/term.ax').
include('incl/subst.ax').
include('incl/walk.ax').
include('incl/walkstar.ax').
include('incl/unifDef.ax').
include('incl/unifProps.ax').
include('incl/redUnif.ax').
include('incl/parmove.ax').
include('incl/word_to_stack.ax').
include('incl/bvl_inlineProof.ax').
include('incl/clos_known.ax').
include('incl/clos_knownProof.ax').
include('incl/okasaki_misc.ax').
include('incl/UnbalancedSet.ax').
include('incl/mips.ax').
include('incl/mips_step.ax').
include('incl/mips_target.ax').
include('incl/mips_target_correct.ax').
include('incl/bvl_constProof.ax').
include('incl/int_bitwise.ax').
include('incl/copying_gc.ax').
include('incl/bvp_to_wordProps.ax').
include('incl/jrhSet.ax').
include('incl/BankersQueue.ax').
include('incl/cmlPEG.ax').
include('incl/clos_numberProof.ax').
include('incl/cmlParse.ax').
include('incl/holKernel.ax').
include('incl/reader.ax').
include('incl/x64.ax').
include('incl/source_to_modProof.ax').
include('incl/collapse.ax').
include('incl/infer_t.ax').
include('incl/unify.ax').
include('incl/infer.ax').
include('incl/inferProps.ax').
include('incl/infer_eComplete.ax').
include('incl/bvl_handleProof.ax').
include('incl/dec_to_exhProof.ax').
include('incl/regexpMatch.ax').
include('incl/ninetyOne.ax').
include('incl/example_91.ax').
include('incl/arm8_target.ax').
include('incl/BatchedQueue.ax').
include('incl/stack_remove.ax').
include('incl/stack_names.ax').
include('incl/stack_to_lab.ax').
include('incl/backend.ax').
include('incl/compiler.ax').
include('incl/ImplicitQueue.ax').
include('incl/stackSem.ax').
include('incl/gramProps.ax').
include('incl/pegSound.ax').
include('incl/holKernelProof.ax').
include('incl/pegComplete.ax').
include('incl/cmlPtreeConversionProps.ax').
include('incl/simpleIO.ax').
include('incl/LazyPairingHeap.ax').
include('incl/stackProps.ax').
include('incl/stack_removeProof.ax').
include('incl/holSoundness.ax').
include('incl/holExtension.ax').
include('incl/lexer_impl.ax').
include('incl/SplayHeap.ax').
include('incl/infer_eSound.ax').
include('incl/wordProps.ax').
include('incl/type_eDeterm.ax').
include('incl/inferComplete.ax').
include('incl/BinaryRandomAccessLists.ax').
fof('thm.BinomialHeap.tree_TY_DEF', axiom, ![V_27A_27]: ?[V_27rep_27]: p(s('bool','const.bool.TYPE_DEFINITION_2'(s('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'_dst_x0x1_2'(s('fun'('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'bool'),'bool'),'!_0'),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'bool'),'bool'),'!_0'),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'bool'))),'_dst_x000x011x110_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'bool')),'_dst_x00x11x11_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'bool'),'!_0'),s('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'))),'_dst_x000x011x101_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.num.num','bool'),'bool'),'?_0'),s('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'fun'('type.num.num','bool'))),'_dst_x000x111_2'(s('fun'('fun'(V_27A_27,'bool'),'bool'),'?_0'),s('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'fun'('type.num.num','fun'(V_27A_27,'bool')))),'_dst_x0000x1111_2'(s('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'bool'),'?_0'),s('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'fun'('type.num.num','fun'(V_27A_27,'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'))))),'_dst_x00000x01111x10001_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'fun'('type.num.num','fun'(V_27A_27,'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool')))),'_dst_x0000x1000x0111_3'(s('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool')),'=_0'),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27))),'_i_0_0'),s('fun'('type.num.num','fun'(V_27A_27,'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27))))),'_dst_x000x110x001_3'(s('fun'('type.pair.prod'('type.num.num',V_27A_27),'fun'('fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27))),'type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s('fun'('type.num.num','fun'(V_27A_27,'type.pair.prod'('type.num.num',V_27A_27))),'const.pair.,_0'),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)))),'_dst_x1x0_2'(s('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'fun'('fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27))),'fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27))))),'const.ind_type.FCONS_0'),s('fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27))),'_dst_x0_1'(s('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'const.ind_type.BOTTOM_0'))))))))),s('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool')),'_i_0_0'))))))))),s('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool')),'_i_0_0'))))),s('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'bool'),'!_0'),s('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'))),'_dst_x000x111x011_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'))),'_dst_x000x001x111_3'(s('fun'('bool','fun'('bool','bool')),'|bslash||slash|_0'),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'_dst_x1x0_2'(s('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool')),'=_0'),s('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'happ'(s('fun'('fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27))),'type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27))),'happ'(s('fun'('type.pair.prod'('type.num.num',V_27A_27),'fun'('fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27))),'type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.pair.prod'('type.num.num',V_27A_27),'happ'(s('fun'(V_27A_27,'type.pair.prod'('type.num.num',V_27A_27)),'happ'(s('fun'('type.num.num','fun'(V_27A_27,'type.pair.prod'('type.num.num',V_27A_27))),'const.pair.,_0'),s('type.num.num','const.bool.ARB_0'))),s(V_27A_27,'const.bool.ARB_0'))))),s('fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27))),'_dst_x0_1'(s('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'const.ind_type.BOTTOM_0'))))))),s('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'))),'_dst_x000x111_2'(s('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'bool'),'?_0'),s('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool')))),'_dst_x0000x1111_2'(s('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'bool'),'?_0'),s('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'))))),'_dst_x00000x00111x11011_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'))),'_dst_x000x100x011_3'(s('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool')),'=_0'),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27))),'_i_0_0'),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)))),'_dst_x00x11_2'(s('fun'('fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27))),'type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27))),'happ'(s('fun'('type.pair.prod'('type.num.num',V_27A_27),'fun'('fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27))),'type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.pair.prod'('type.num.num',V_27A_27),'happ'(s('fun'(V_27A_27,'type.pair.prod'('type.num.num',V_27A_27)),'happ'(s('fun'('type.num.num','fun'(V_27A_27,'type.pair.prod'('type.num.num',V_27A_27))),'const.pair.,_0'),s('type.num.num','const.bool.ARB_0'))),s(V_27A_27,'const.bool.ARB_0'))))),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27))))),'_dst_x00x10x01_3'(s('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'fun'('fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27))),'fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27))))),'const.ind_type.FCONS_0'),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27))),'_i_0_0'),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)))),'_dst_x1x0_2'(s('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'fun'('fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27))),'fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27))))),'const.ind_type.FCONS_0'),s('fun'('type.num.num','type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27))),'_dst_x0_1'(s('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'const.ind_type.BOTTOM_0'))))))))))),s('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool')))),'_dst_x0000x1010x0101_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool')),'_i_0_0'),s('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool')),'_i_0_0'))))))))))),s('fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool')),'_i_0_0'))))))),s('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'fun'('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'bool'),'bool')),'_dstsel_1_x10_1'(s('fun'('type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27)),'type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27))),'_i_0_0'))))))))),s('fun'('type.BinomialHeap.tree'(V_27A_27),'type.ind_type.recspace'('type.pair.prod'('type.num.num',V_27A_27))),V_27rep_27))))).
fof('ARITY_0_2_const.BinomialHeap.tree_CASE', axiom, ![V_27A_27,V_27B_27]: ![VV0, VV1]: s(V_27B_27,'happ'(s('fun'('fun'('type.num.num','fun'(V_27A_27,'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27B_27))),V_27B_27),'happ'(s('fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('fun'('type.num.num','fun'(V_27A_27,'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27B_27))),V_27B_27)),'const.BinomialHeap.tree_CASE_0'),s('type.BinomialHeap.tree'(V_27A_27),VV0))),s('fun'('type.num.num','fun'(V_27A_27,'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27B_27))),VV1))) = s(V_27B_27,'const.BinomialHeap.tree_CASE_2'(s('type.BinomialHeap.tree'(V_27A_27),VV0),s('fun'('type.num.num','fun'(V_27A_27,'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27B_27))),VV1)))).
fof('thm.BinomialHeap.tree_case_def', axiom, ![V_27B_27,V_27A_27]: ![V_27a_7c48_7c_27, V_27a_7c49_7c_27, V_27a2_27, V_27f_27]: s(V_27B_27,'const.BinomialHeap.tree_CASE_2'(s('type.BinomialHeap.tree'(V_27A_27),'const.BinomialHeap.Node_3'(s('type.num.num',V_27a_7c48_7c_27),s(V_27A_27,V_27a_7c49_7c_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27a2_27))),s('fun'('type.num.num','fun'(V_27A_27,'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27B_27))),V_27f_27))) = s(V_27B_27,'happ'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27B_27),'happ'(s('fun'(V_27A_27,'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27B_27)),'happ'(s('fun'('type.num.num','fun'(V_27A_27,'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27B_27))),V_27f_27),s('type.num.num',V_27a_7c48_7c_27))),s(V_27A_27,V_27a_7c49_7c_27))),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27a2_27)))).
fof('thm.BinomialHeap.tree_size_def|split|0', axiom, ![V_27A_27]: ![V_27f_27, V_27a_7c48_7c_27, V_27a_7c49_7c_27, V_27a2_27]: s('type.num.num','const.BinomialHeap.tree_size_2'(s('fun'(V_27A_27,'type.num.num'),V_27f_27),s('type.BinomialHeap.tree'(V_27A_27),'const.BinomialHeap.Node_3'(s('type.num.num',V_27a_7c48_7c_27),s(V_27A_27,V_27a_7c49_7c_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27a2_27))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27a_7c48_7c_27),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','happ'(s('fun'(V_27A_27,'type.num.num'),V_27f_27),s(V_27A_27,V_27a_7c49_7c_27))),s('type.num.num','const.BinomialHeap.tree|49|_size_2'(s('fun'(V_27A_27,'type.num.num'),V_27f_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27a2_27)))))))))).
fof('thm.BinomialHeap.tree_size_def|split|1', axiom, ![V_27A_27]: ![V_27f_27]: s('type.num.num','const.BinomialHeap.tree|49|_size_2'(s('fun'(V_27A_27,'type.num.num'),V_27f_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'const.list.NIL_0'))) = s('type.num.num','const.num.|48|_0')).
fof('thm.BinomialHeap.tree_size_def|split|2', axiom, ![V_27A_27]: ![V_27f_27, V_27a_7c48_7c_27, V_27a_7c49_7c_27]: s('type.num.num','const.BinomialHeap.tree|49|_size_2'(s('fun'(V_27A_27,'type.num.num'),V_27f_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(V_27A_27),V_27a_7c48_7c_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27a_7c49_7c_27))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.BinomialHeap.tree_size_2'(s('fun'(V_27A_27,'type.num.num'),V_27f_27),s('type.BinomialHeap.tree'(V_27A_27),V_27a_7c48_7c_27))),s('type.num.num','const.BinomialHeap.tree|49|_size_2'(s('fun'(V_27A_27,'type.num.num'),V_27f_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27a_7c49_7c_27)))))))).
fof('ARITY_0_3_const.BinomialHeap.Node', axiom, ![V_27A_27]: ![VV0, VV1, VV2]: s('type.BinomialHeap.tree'(V_27A_27),'happ'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'happ'(s('fun'(V_27A_27,'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27))),'happ'(s('fun'('type.num.num','fun'(V_27A_27,'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)))),'const.BinomialHeap.Node_0'),s('type.num.num',VV0))),s(V_27A_27,VV1))),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),VV2))) = s('type.BinomialHeap.tree'(V_27A_27),'const.BinomialHeap.Node_3'(s('type.num.num',VV0),s(V_27A_27,VV1),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),VV2)))).
fof('thm.BinomialHeap.datatype_tree', axiom, ![V_27A_27]: ![V_27tree_27]: p(s('bool','const.bool.DATATYPE_1'(s('bool','happ'(s('fun'('fun'('type.num.num','fun'(V_27A_27,'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)))),'bool'),V_27tree_27),s('fun'('type.num.num','fun'(V_27A_27,'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)))),'const.BinomialHeap.Node_0'))))))).
fof('thm.BinomialHeap.tree_|49||49|', axiom, ![V_27A_27]: ![V_27a_7c48_7c_27, V_27a_7c49_7c_27, V_27a2_27, V_27a_7c48_7c_7c39_7c_27, V_27a_7c49_7c_7c39_7c_27, V_27a2_7c39_7c_27]: (s('type.BinomialHeap.tree'(V_27A_27),'const.BinomialHeap.Node_3'(s('type.num.num',V_27a_7c48_7c_27),s(V_27A_27,V_27a_7c49_7c_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27a2_27))) = s('type.BinomialHeap.tree'(V_27A_27),'const.BinomialHeap.Node_3'(s('type.num.num',V_27a_7c48_7c_7c39_7c_27),s(V_27A_27,V_27a_7c49_7c_7c39_7c_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27a2_7c39_7c_27))) <=> (s('type.num.num',V_27a_7c48_7c_27) = s('type.num.num',V_27a_7c48_7c_7c39_7c_27) & (s(V_27A_27,V_27a_7c49_7c_27) = s(V_27A_27,V_27a_7c49_7c_7c39_7c_27) & s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27a2_27) = s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27a2_7c39_7c_27))))).
fof('thm.BinomialHeap.tree_case_cong', axiom, ![V_27A_27,V_27B_27]: ![V_27f_7c39_7c_27, V_27M_27, V_27M_7c39_7c_27, V_27f_27]: ((s('type.BinomialHeap.tree'(V_27A_27),V_27M_27) = s('type.BinomialHeap.tree'(V_27A_27),V_27M_7c39_7c_27) & ![V_27a_7c48_7c_27, V_27a_7c49_7c_27, V_27a2_27]: (s('type.BinomialHeap.tree'(V_27A_27),V_27M_7c39_7c_27) = s('type.BinomialHeap.tree'(V_27A_27),'const.BinomialHeap.Node_3'(s('type.num.num',V_27a_7c48_7c_27),s(V_27A_27,V_27a_7c49_7c_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27a2_27))) => s(V_27B_27,'happ'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27B_27),'happ'(s('fun'(V_27A_27,'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27B_27)),'happ'(s('fun'('type.num.num','fun'(V_27A_27,'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27B_27))),V_27f_27),s('type.num.num',V_27a_7c48_7c_27))),s(V_27A_27,V_27a_7c49_7c_27))),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27a2_27))) = s(V_27B_27,'happ'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27B_27),'happ'(s('fun'(V_27A_27,'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27B_27)),'happ'(s('fun'('type.num.num','fun'(V_27A_27,'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27B_27))),V_27f_7c39_7c_27),s('type.num.num',V_27a_7c48_7c_27))),s(V_27A_27,V_27a_7c49_7c_27))),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27a2_27))))) => s(V_27B_27,'const.BinomialHeap.tree_CASE_2'(s('type.BinomialHeap.tree'(V_27A_27),V_27M_27),s('fun'('type.num.num','fun'(V_27A_27,'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27B_27))),V_27f_27))) = s(V_27B_27,'const.BinomialHeap.tree_CASE_2'(s('type.BinomialHeap.tree'(V_27A_27),V_27M_7c39_7c_27),s('fun'('type.num.num','fun'(V_27A_27,'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27B_27))),V_27f_7c39_7c_27))))).
fof('thm.BinomialHeap.tree_nchotomy', axiom, ![V_27A_27]: ![V_27tt_27]: ?[V_27n_27, V_27a_27, V_27l_27]: s('type.BinomialHeap.tree'(V_27A_27),V_27tt_27) = s('type.BinomialHeap.tree'(V_27A_27),'const.BinomialHeap.Node_3'(s('type.num.num',V_27n_27),s(V_27A_27,V_27a_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27l_27)))).
fof('thm.BinomialHeap.tree_Axiom', axiom, ![V_27B_27,V_27C_27,V_27A_27]: ![V_27f_7c48_7c_27, V_27f_7c49_7c_27, V_27f2_27]: ?[V_27fn_7c48_7c_27, V_27fn_7c49_7c_27]: (![V_27a_7c48_7c_27, V_27a_7c49_7c_27, V_27a2_27]: s(V_27B_27,'happ'(s('fun'('type.BinomialHeap.tree'(V_27A_27),V_27B_27),V_27fn_7c48_7c_27),s('type.BinomialHeap.tree'(V_27A_27),'const.BinomialHeap.Node_3'(s('type.num.num',V_27a_7c48_7c_27),s(V_27A_27,V_27a_7c49_7c_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27a2_27))))) = s(V_27B_27,'happ'(s('fun'(V_27C_27,V_27B_27),'happ'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27C_27,V_27B_27)),'happ'(s('fun'(V_27A_27,'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27C_27,V_27B_27))),'happ'(s('fun'('type.num.num','fun'(V_27A_27,'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27C_27,V_27B_27)))),V_27f_7c48_7c_27),s('type.num.num',V_27a_7c48_7c_27))),s(V_27A_27,V_27a_7c49_7c_27))),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27a2_27))),s(V_27C_27,'happ'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27C_27),V_27fn_7c49_7c_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27a2_27))))) & (s(V_27C_27,'happ'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27C_27),V_27fn_7c49_7c_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'const.list.NIL_0'))) = s(V_27C_27,V_27f_7c49_7c_27) & ![V_27a_7c48_7c_27, V_27a_7c49_7c_27]: s(V_27C_27,'happ'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27C_27),V_27fn_7c49_7c_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(V_27A_27),V_27a_7c48_7c_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27a_7c49_7c_27))))) = s(V_27C_27,'happ'(s('fun'(V_27C_27,V_27C_27),'happ'(s('fun'(V_27B_27,'fun'(V_27C_27,V_27C_27)),'happ'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27B_27,'fun'(V_27C_27,V_27C_27))),'happ'(s('fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27B_27,'fun'(V_27C_27,V_27C_27)))),V_27f2_27),s('type.BinomialHeap.tree'(V_27A_27),V_27a_7c48_7c_27))),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27a_7c49_7c_27))),s(V_27B_27,'happ'(s('fun'('type.BinomialHeap.tree'(V_27A_27),V_27B_27),V_27fn_7c48_7c_27),s('type.BinomialHeap.tree'(V_27A_27),V_27a_7c48_7c_27))))),s(V_27C_27,'happ'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27C_27),V_27fn_7c49_7c_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27a_7c49_7c_27)))))))).
fof('thm.BinomialHeap.tree_induction', axiom, ![V_27A_27]: ![V_27P_7c48_7c_27, V_27P_7c49_7c_27]: ((![V_27l_27]: (p(s('bool','happ'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'),V_27P_7c49_7c_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27l_27)))) => ![V_27a_27, V_27n_27]: p(s('bool','happ'(s('fun'('type.BinomialHeap.tree'(V_27A_27),'bool'),V_27P_7c48_7c_27),s('type.BinomialHeap.tree'(V_27A_27),'const.BinomialHeap.Node_3'(s('type.num.num',V_27n_27),s(V_27A_27,V_27a_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27l_27))))))) & (p(s('bool','happ'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'),V_27P_7c49_7c_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'const.list.NIL_0')))) & ![V_27t_27, V_27l_27]: ((p(s('bool','happ'(s('fun'('type.BinomialHeap.tree'(V_27A_27),'bool'),V_27P_7c48_7c_27),s('type.BinomialHeap.tree'(V_27A_27),V_27t_27)))) & p(s('bool','happ'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'),V_27P_7c49_7c_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27l_27))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'),V_27P_7c49_7c_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(V_27A_27),V_27t_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27l_27))))))))) => (![V_27t_27]: p(s('bool','happ'(s('fun'('type.BinomialHeap.tree'(V_27A_27),'bool'),V_27P_7c48_7c_27),s('type.BinomialHeap.tree'(V_27A_27),V_27t_27)))) & ![V_27l_27]: p(s('bool','happ'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'),V_27P_7c49_7c_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27l_27))))))).
fof('ARITY_0_1_const.BinomialHeap.heap_to_bag_UNION', axiom, ![V_27A_27]: ![VV0]: s('fun'(V_27A_27,'type.num.num'),'happ'(s('fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27A_27,'type.num.num')),'const.BinomialHeap.heap_to_bag_UNION_0'),s('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),VV0))) = s('fun'(V_27A_27,'type.num.num'),'const.BinomialHeap.heap_to_bag_UNION_1'(s('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),VV0)))).
fof('thm.BinomialHeap.heap_to_bag_UNION_primitive_def', axiom, ![V_27A_27]: s('fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27A_27,'type.num.num')),'const.BinomialHeap.heap_to_bag_UNION_0') = s('fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27A_27,'type.num.num')),'const.relation.WFREC_2'(s('fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'bool')),'const.min.@_1'(s('fun'('fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'bool')),'bool'),'const.relation.WF_0'),s('fun'('fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.BinomialHeap.tree'(V_27A_27),'bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'('type.BinomialHeap.tree'(V_27A_27),'bool'))),'_dstsel_0_x001x011_2'(s('fun'('type.BinomialHeap.tree'(V_27A_27),'type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27))),'const.sum.INR_0'),s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'('type.BinomialHeap.tree'(V_27A_27),'type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27))),'const.sum.INL_0'),s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'('type.BinomialHeap.tree'(V_27A_27),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'_dst_x01x10_2'(s('fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'const.list.CONS_0'),s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))),'_i_0_0'))))))))))),s('fun'('fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.BinomialHeap.tree'(V_27A_27),'bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'bool')),'fun'('type.BinomialHeap.tree'(V_27A_27),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'bool')),'fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'))),'_dstsel_0_x001x011_2'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27))),'const.sum.INL_0'),s('fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27))),'const.sum.INL_0'),s('fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'const.list.CONS_0'))))))))),s('fun'('fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'(V_27A_27,'bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'bool')),'fun'(V_27A_27,'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.num.num','bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'bool')),'fun'(V_27A_27,'fun'('type.num.num','bool'))),'_dst_x000x111_2'(s('fun'('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'bool')),'fun'(V_27A_27,'fun'('type.num.num','fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool')))),'_dstsel_0_x0001x0111_2'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27))),'const.sum.INL_0'),s('fun'(V_27A_27,'fun'('type.num.num','fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27))))),'_dst_x000x111_2'(s('fun'('type.BinomialHeap.tree'(V_27A_27),'type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27))),'const.sum.INR_0'),s('fun'(V_27A_27,'fun'('type.num.num','fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)))),'_dst_x01x10_2'(s('fun'('type.num.num','fun'(V_27A_27,'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)))),'const.BinomialHeap.Node_0'),s('fun'(V_27A_27,V_27A_27),'_i_0_0'))))))))))))))))))))),s('fun'('fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27A_27,'type.num.num')),'fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27A_27,'type.num.num'))),'_dst_x01x10x10_3'(s('fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27A_27,'type.num.num')),'fun'('fun'('type.BinomialHeap.tree'(V_27A_27),'fun'(V_27A_27,'type.num.num')),'fun'(V_27A_27,'type.num.num')))),'const.sum.sum_CASE_0'),s('fun'('fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27A_27,'type.num.num')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27A_27,'type.num.num'))),'_dst_x01x00x10_3'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'('fun'(V_27A_27,'type.num.num'),'fun'('fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27A_27,'type.num.num'))),'fun'(V_27A_27,'type.num.num')))),'const.list.list_CASE_0'),s('fun'(V_27A_27,'type.num.num'),'happ'(s('fun'('fun'(V_27A_27,'type.num.num'),'fun'(V_27A_27,'type.num.num')),'const.combin.I_0'),s('fun'(V_27A_27,'type.num.num'),'const.bag.EMPTY_BAG_0'))),s('fun'('fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27A_27,'type.num.num')),'fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27A_27,'type.num.num')))),'_dst_x000x111_2'(s('fun'('fun'(V_27A_27,'type.num.num'),'fun'(V_27A_27,'type.num.num')),'const.combin.I_0'),s('fun'('fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27A_27,'type.num.num')),'fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27A_27,'type.num.num')))),'_dst_x000x110x101_3'(s('fun'('fun'(V_27A_27,'type.num.num'),'fun'('fun'(V_27A_27,'type.num.num'),'fun'(V_27A_27,'type.num.num'))),'const.bag.BAG_UNION_0'),s('fun'('fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27A_27,'type.num.num')),'fun'('type.BinomialHeap.tree'(V_27A_27),'fun'(V_27A_27,'type.num.num'))),'_dstsel_0_x01_1'(s('fun'('type.BinomialHeap.tree'(V_27A_27),'type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27))),'const.sum.INR_0'))),s('fun'('fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27A_27,'type.num.num')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27A_27,'type.num.num'))),'_dstsel_0_x01_1'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27))),'const.sum.INL_0'))))))))),s('fun'('fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27A_27,'type.num.num')),'fun'('type.BinomialHeap.tree'(V_27A_27),'fun'(V_27A_27,'type.num.num'))),'_dst_x01x10_2'(s('fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('fun'('type.num.num','fun'(V_27A_27,'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27A_27,'type.num.num')))),'fun'(V_27A_27,'type.num.num'))),'const.BinomialHeap.tree_CASE_0'),s('fun'('fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27A_27,'type.num.num')),'fun'('type.num.num','fun'(V_27A_27,'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27A_27,'type.num.num'))))),'_dst_x0000x1011_2'(s('fun'('fun'(V_27A_27,'type.num.num'),'fun'(V_27A_27,'type.num.num')),'const.combin.I_0'),s('fun'('fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27A_27,'type.num.num')),'fun'(V_27A_27,'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27A_27,'type.num.num')))),'_dst_x000x010x101_3'(s('fun'(V_27A_27,'fun'('fun'(V_27A_27,'type.num.num'),'fun'(V_27A_27,'type.num.num'))),'const.bag.BAG_INSERT_0'),s('fun'(V_27A_27,V_27A_27),'_i_0_0'),s('fun'('fun'('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27A_27,'type.num.num')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27A_27,'type.num.num'))),'_dstsel_0_x01_1'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27))),'const.sum.INL_0')))))))))))))).
fof('thm.BinomialHeap.BinomialHeap_|49|8_prove_ltb', axiom, ![V_27A_27]: ![V_27a_27]: (((s('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),V_27a_27) = s('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'const.sum.INL_1'(s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'const.list.NIL_0'))) | ?[V_27h_27, V_27hs_27]: s('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),V_27a_27) = s('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'const.sum.INL_1'(s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(V_27A_27),V_27h_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27hs_27)))))) | ?[V_27v_7c48_7c_27, V_27x_27, V_27hs_27]: s('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),V_27a_27) = s('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'const.sum.INR_1'(s('type.BinomialHeap.tree'(V_27A_27),'const.BinomialHeap.Node_3'(s('type.num.num',V_27v_7c48_7c_27),s(V_27A_27,V_27x_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27hs_27)))))) => (s('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),V_27a_27) = s('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'const.sum.INL_1'(s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'const.list.NIL_0'))) | (?[V_27h_27, V_27hs_27]: s('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),V_27a_27) = s('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'const.sum.INL_1'(s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(V_27A_27),V_27h_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27hs_27))))) | ?[V_27v_7c48_7c_27, V_27x_27, V_27hs_27]: s('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),V_27a_27) = s('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'const.sum.INR_1'(s('type.BinomialHeap.tree'(V_27A_27),'const.BinomialHeap.Node_3'(s('type.num.num',V_27v_7c48_7c_27),s(V_27A_27,V_27x_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27hs_27))))))))).
fof('thm.BinomialHeap.heap_to_bag_UNION_extract|49|_def', axiom, ![V_27A_27]: ![V_27x_27]: s('fun'(V_27A_27,'type.num.num'),'const.BinomialHeap.tree_to_bag_1'(s('type.BinomialHeap.tree'(V_27A_27),V_27x_27))) = s('fun'(V_27A_27,'type.num.num'),'const.BinomialHeap.heap_to_bag_UNION_1'(s('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'const.sum.INR_1'(s('type.BinomialHeap.tree'(V_27A_27),V_27x_27)))))).
fof('thm.BinomialHeap.heap_to_bag_UNION_extract|48|_def', axiom, ![V_27A_27]: ![V_27x_27]: s('fun'(V_27A_27,'type.num.num'),'const.BinomialHeap.heap_to_bag_1'(s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27x_27))) = s('fun'(V_27A_27,'type.num.num'),'const.BinomialHeap.heap_to_bag_UNION_1'(s('type.sum.sum'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)),'const.sum.INL_1'(s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27x_27)))))).
fof('thm.BinomialHeap.heap_to_bag_ind', axiom, ![V_27A_27]: ![V_27P_7c48_7c_27, V_27P_7c49_7c_27]: ((p(s('bool','happ'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'),V_27P_7c48_7c_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'const.list.NIL_0')))) & (![V_27h_27, V_27hs_27]: ((p(s('bool','happ'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'),V_27P_7c48_7c_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27hs_27)))) & p(s('bool','happ'(s('fun'('type.BinomialHeap.tree'(V_27A_27),'bool'),V_27P_7c49_7c_27),s('type.BinomialHeap.tree'(V_27A_27),V_27h_27))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'),V_27P_7c48_7c_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(V_27A_27),V_27h_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27hs_27))))))) & ![V_27v_7c48_7c_27, V_27x_27, V_27hs_27]: (p(s('bool','happ'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'),V_27P_7c48_7c_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27hs_27)))) => p(s('bool','happ'(s('fun'('type.BinomialHeap.tree'(V_27A_27),'bool'),V_27P_7c49_7c_27),s('type.BinomialHeap.tree'(V_27A_27),'const.BinomialHeap.Node_3'(s('type.num.num',V_27v_7c48_7c_27),s(V_27A_27,V_27x_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27hs_27))))))))) => (![V_27v_7c48_7c_27]: p(s('bool','happ'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'),V_27P_7c48_7c_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27v_7c48_7c_27)))) & ![V_27v_7c48_7c_27]: p(s('bool','happ'(s('fun'('type.BinomialHeap.tree'(V_27A_27),'bool'),V_27P_7c49_7c_27),s('type.BinomialHeap.tree'(V_27A_27),V_27v_7c48_7c_27))))))).
fof('thm.BinomialHeap.heap_to_bag_def|split|0', axiom, ![V_27A_27]: s('fun'(V_27A_27,'type.num.num'),'const.BinomialHeap.heap_to_bag_1'(s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'const.list.NIL_0'))) = s('fun'(V_27A_27,'type.num.num'),'const.bag.EMPTY_BAG_0')).
fof('thm.BinomialHeap.heap_to_bag_def|split|1', axiom, ![V_27A_27]: ![V_27hs_27, V_27h_27]: s('fun'(V_27A_27,'type.num.num'),'const.BinomialHeap.heap_to_bag_1'(s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(V_27A_27),V_27h_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27hs_27))))) = s('fun'(V_27A_27,'type.num.num'),'const.bag.BAG_UNION_2'(s('fun'(V_27A_27,'type.num.num'),'const.BinomialHeap.tree_to_bag_1'(s('type.BinomialHeap.tree'(V_27A_27),V_27h_27))),s('fun'(V_27A_27,'type.num.num'),'const.BinomialHeap.heap_to_bag_1'(s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27hs_27)))))).
fof('thm.BinomialHeap.heap_to_bag_def|split|2', axiom, ![V_27A_27]: ![V_27x_27, V_27v_7c48_7c_27, V_27hs_27]: s('fun'(V_27A_27,'type.num.num'),'const.BinomialHeap.tree_to_bag_1'(s('type.BinomialHeap.tree'(V_27A_27),'const.BinomialHeap.Node_3'(s('type.num.num',V_27v_7c48_7c_27),s(V_27A_27,V_27x_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27hs_27))))) = s('fun'(V_27A_27,'type.num.num'),'const.bag.BAG_INSERT_2'(s(V_27A_27,V_27x_27),s('fun'(V_27A_27,'type.num.num'),'const.BinomialHeap.heap_to_bag_1'(s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27hs_27)))))).
fof('ARITY_0_1_const.BinomialHeap.is_heap_ordered_UNION', axiom, ![V_27B_27,V_27A_27]: ![VV0]: s('bool','happ'(s('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool'),'const.BinomialHeap.is_heap_ordered_UNION_0'),s('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),VV0))) = s('bool','const.BinomialHeap.is_heap_ordered_UNION_1'(s('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),VV0)))).
fof('ARITY_0_2_const.bag.BAG_EVERY', axiom, ![V_27A_27]: ![VV0, VV1]: s('bool','happ'(s('fun'('fun'(V_27A_27,'type.num.num'),'bool'),'happ'(s('fun'('fun'(V_27A_27,'bool'),'fun'('fun'(V_27A_27,'type.num.num'),'bool')),'const.bag.BAG_EVERY_0'),s('fun'(V_27A_27,'bool'),VV0))),s('fun'(V_27A_27,'type.num.num'),VV1))) = s('bool','const.bag.BAG_EVERY_2'(s('fun'(V_27A_27,'bool'),VV0),s('fun'(V_27A_27,'type.num.num'),VV1)))).
fof('ARITY_0_1_const.BinomialHeap.heap_to_bag', axiom, ![V_27A_27]: ![VV0]: s('fun'(V_27A_27,'type.num.num'),'happ'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27A_27,'type.num.num')),'const.BinomialHeap.heap_to_bag_0'),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),VV0))) = s('fun'(V_27A_27,'type.num.num'),'const.BinomialHeap.heap_to_bag_1'(s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),VV0)))).
fof('_dstsel_1_x1010x1001_ax', axiom, ![VA,VA4,VA2,VA5,VA3,VA1]: ![V__0, V__1, V__z]: s('fun'('fun'(VA2,'fun'(VA3,VA)),'fun'(VA4,'fun'(VA5,VA))),'happ'(s('fun'(VA1,'fun'('fun'(VA2,'fun'(VA3,VA)),'fun'(VA4,'fun'(VA5,VA)))),'_dstsel_1_x1010x1001_2'(s('fun'(VA1,'fun'(VA4,VA2)),V__0),s('fun'(VA1,'fun'(VA5,VA3)),V__1))),s(VA1,V__z))) = s('fun'('fun'(VA2,'fun'(VA3,VA)),'fun'(VA4,'fun'(VA5,VA))),'_dstsel_0_x010x001_2'(s('fun'(VA4,VA2),'happ'(s('fun'(VA1,'fun'(VA4,VA2)),V__0),s(VA1,V__z))),s('fun'(VA5,VA3),'happ'(s('fun'(VA1,'fun'(VA5,VA3)),V__1),s(VA1,V__z)))))).
fof('_dstsel_0_x010x001_ax', axiom, ![VA,VA3,VA1,VA4,VA2]: ![V__0, V__1, V__z]: s('fun'(VA3,'fun'(VA4,VA)),'happ'(s('fun'('fun'(VA1,'fun'(VA2,VA)),'fun'(VA3,'fun'(VA4,VA))),'_dstsel_0_x010x001_2'(s('fun'(VA3,VA1),V__0),s('fun'(VA4,VA2),V__1))),s('fun'(VA1,'fun'(VA2,VA)),V__z))) = s('fun'(VA3,'fun'(VA4,VA)),'_dst_x00x10x01_3'(s('fun'(VA1,'fun'(VA2,VA)),V__z),s('fun'(VA3,VA1),V__0),s('fun'(VA4,VA2),V__1)))).
fof('thm.BinomialHeap.is_heap_ordered_UNION_primitive_def', axiom, ![V_27B_27,V_27A_27]: s('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool'),'const.BinomialHeap.is_heap_ordered_UNION_0') = s('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool'),'const.relation.WFREC_2'(s('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool')),'const.min.@_1'(s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool')),'bool'),'const.relation.WF_0'),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.BinomialHeap.tree'(V_27A_27),'bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'('type.BinomialHeap.tree'(V_27A_27),'bool'))),'_dst_x000x111_2'(s('fun'('fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'bool')))),'_dst_x0000x1111_2'(s('fun'('fun'('fun'(V_27A_27,V_27B_27),'bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('fun'(V_27A_27,V_27B_27),'bool'))))),'_dstsel_0_x00111x01111_2'(s('fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('fun'(V_27A_27,V_27B_27),'type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27))))))),'_dst_x000x111_2'(s('fun'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27))),'type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27))))),'const.sum.INR_0'),s('fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))))),'_dst_x001x110_2'(s('fun'('fun'(V_27A_27,V_27B_27),'fun'('type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27))))),'const.pair.,_0'),s('fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'_dst_x01x10_2'(s('fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.BinomialHeap.tree'(V_27A_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'const.pair.,_0'),s('fun'('type.BinomialHeap.tree'(V_27A_27),'type.BinomialHeap.tree'(V_27A_27)),'_i_0_0'))))))),s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('fun'(V_27A_27,V_27B_27),'type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))))))),'_dst_x0000x1111_2'(s('fun'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27))))),'const.sum.INL_0'),s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))))))),'_dst_x0001x1110_2'(s('fun'('fun'(V_27A_27,V_27B_27),'fun'('type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))))),'const.pair.,_0'),s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))))),'_dst_x001x110_2'(s('fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))))),'const.pair.,_0'),s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'('type.BinomialHeap.tree'(V_27A_27),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'_dst_x01x10_2'(s('fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'const.list.CONS_0'),s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))),'_i_0_0'))))))))))))))))))),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.BinomialHeap.tree'(V_27A_27),'bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool')),'fun'('type.BinomialHeap.tree'(V_27A_27),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool')),'fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'))),'_dst_x000x111_2'(s('fun'('fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool')),'fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'bool')))),'_dst_x0000x1111_2'(s('fun'('fun'('fun'(V_27A_27,V_27B_27),'bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool')),'fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('fun'(V_27A_27,V_27B_27),'bool'))))),'_dstsel_0_x00111x01111_2'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('fun'(V_27A_27,V_27B_27),'type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27))))))),'_dst_x000x111_2'(s('fun'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27))))),'const.sum.INL_0'),s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))))))),'_dst_x001x110_2'(s('fun'('fun'(V_27A_27,V_27B_27),'fun'('type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))))),'const.pair.,_0'),s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))))),'_dst_x01x10_2'(s('fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))))),'const.pair.,_0'),s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))),'_i_0_0'))))))),s('fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('fun'(V_27A_27,V_27B_27),'type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))))))),'_dst_x0000x1111_2'(s('fun'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27))))),'const.sum.INL_0'),s('fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))))))),'_dst_x0001x1110_2'(s('fun'('fun'(V_27A_27,V_27B_27),'fun'('type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))))),'const.pair.,_0'),s('fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))))),'_dst_x001x110_2'(s('fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))))),'const.pair.,_0'),s('fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'const.list.CONS_0'))))))))))))))))),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'(V_27A_27,'bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool')),'fun'(V_27A_27,'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.num.num','bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool')),'fun'(V_27A_27,'fun'('type.num.num','bool'))),'_dst_x000x111_2'(s('fun'('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool')),'fun'(V_27A_27,'fun'('type.num.num','fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool')))),'_dst_x0000x1111_2'(s('fun'('fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool')),'fun'(V_27A_27,'fun'('type.num.num','fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'bool'))))),'_dst_x00000x11111_2'(s('fun'('fun'('fun'(V_27A_27,V_27B_27),'bool'),'bool'),'!_0'),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool')),'fun'(V_27A_27,'fun'('type.num.num','fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('fun'(V_27A_27,V_27B_27),'bool')))))),'_dstsel_0_x000111x011111_2'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('fun'(V_27A_27,V_27B_27),'type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27))))))),'_dst_x000x111_2'(s('fun'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27))))),'const.sum.INL_0'),s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))))))),'_dst_x001x110_2'(s('fun'('fun'(V_27A_27,V_27B_27),'fun'('type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))))),'const.pair.,_0'),s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))))),'_dst_x01x10_2'(s('fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))))),'const.pair.,_0'),s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))),'_i_0_0'))))))),s('fun'(V_27A_27,'fun'('type.num.num','fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('fun'(V_27A_27,V_27B_27),'type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27))))))))),'_dst_x00000x11111_2'(s('fun'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27))),'type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27))))),'const.sum.INR_0'),s('fun'(V_27A_27,'fun'('type.num.num','fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))))))),'_dst_x00001x11110_2'(s('fun'('fun'(V_27A_27,V_27B_27),'fun'('type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27))))),'const.pair.,_0'),s('fun'(V_27A_27,'fun'('type.num.num','fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))))),'_dst_x0001x1110_2'(s('fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.BinomialHeap.tree'(V_27A_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'const.pair.,_0'),s('fun'(V_27A_27,'fun'('type.num.num','fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)))),'_dst_x01x10_2'(s('fun'('type.num.num','fun'(V_27A_27,'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.BinomialHeap.tree'(V_27A_27)))),'const.BinomialHeap.Node_0'),s('fun'(V_27A_27,V_27A_27),'_i_0_0'))))))))))))))))))))))))))))),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool'),'fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool')),'_dst_x01x10x10_3'(s('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'fun'('fun'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'bool'),'fun'('fun'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27))),'bool'),'bool'))),'const.sum.sum_CASE_0'),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool'),'fun'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'bool')),'_dst_x01x10_2'(s('fun'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'fun'('fun'('fun'(V_27A_27,V_27B_27),'fun'('type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))),'bool')),'bool')),'const.pair.pair_CASE_0'),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool'),'fun'('fun'(V_27A_27,V_27B_27),'fun'('type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))),'bool'))),'_dst_x001x110_2'(s('fun'('type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))),'fun'('fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool')),'bool')),'const.pair.pair_CASE_0'),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool'),'fun'('fun'(V_27A_27,V_27B_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool')))),'_dst_x0001x0000x1110_3'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'('bool','fun'('fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool')),'bool'))),'const.list.list_CASE_0'),s('bool','happ'(s('fun'('bool','bool'),'const.combin.I_0'),s('bool','T_0'))),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool'),'fun'('fun'(V_27A_27,V_27B_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'))))),'_dst_x00000x11111_2'(s('fun'('bool','bool'),'const.combin.I_0'),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool'),'fun'('fun'(V_27A_27,V_27B_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'))))),'_dst_x00000x11110x11101_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool'),'fun'('fun'(V_27A_27,V_27B_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.BinomialHeap.tree'(V_27A_27),'bool')))),'_dstsel_0_x0111_1'(s('fun'('fun'(V_27A_27,V_27B_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.BinomialHeap.tree'(V_27A_27),'type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27))))))),'_dst_x000x111_2'(s('fun'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27))),'type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27))))),'const.sum.INR_0'),s('fun'('fun'(V_27A_27,V_27B_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.BinomialHeap.tree'(V_27A_27),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))))),'_dst_x000x100x011_3'(s('fun'('fun'(V_27A_27,V_27B_27),'fun'('type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27))))),'const.pair.,_0'),s('fun'('fun'(V_27A_27,V_27B_27),'fun'(V_27A_27,V_27B_27)),'_i_0_0'),s('fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.BinomialHeap.tree'(V_27A_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'const.pair.,_0'))))))),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool'),'fun'('fun'(V_27A_27,V_27B_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool')))),'_dstsel_0_x0111_1'(s('fun'('fun'(V_27A_27,V_27B_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27))))))),'_dst_x000x111_2'(s('fun'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27))))),'const.sum.INL_0'),s('fun'('fun'(V_27A_27,V_27B_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))))))),'_dst_x000x100x011_3'(s('fun'('fun'(V_27A_27,V_27B_27),'fun'('type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))))),'const.pair.,_0'),s('fun'('fun'(V_27A_27,V_27B_27),'fun'(V_27A_27,V_27B_27)),'_i_0_0'),s('fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))))),'const.pair.,_0'))))))))))))))))),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool'),'fun'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27))),'bool')),'_dst_x01x10_2'(s('fun'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27))),'fun'('fun'('fun'(V_27A_27,V_27B_27),'fun'('type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)),'bool')),'bool')),'const.pair.pair_CASE_0'),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool'),'fun'('fun'(V_27A_27,V_27B_27),'fun'('type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)),'bool'))),'_dst_x001x110_2'(s('fun'('type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)),'fun'('fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.BinomialHeap.tree'(V_27A_27),'bool')),'bool')),'const.pair.pair_CASE_0'),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool'),'fun'('fun'(V_27A_27,V_27B_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.BinomialHeap.tree'(V_27A_27),'bool')))),'_dst_x0001x1110_2'(s('fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('fun'('type.num.num','fun'(V_27A_27,'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'))),'bool')),'const.BinomialHeap.tree_CASE_0'),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool'),'fun'('fun'(V_27A_27,V_27B_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.num.num','fun'(V_27A_27,'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool')))))),'_dst_x000000x111011_2'(s('fun'('bool','bool'),'const.combin.I_0'),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool'),'fun'('fun'(V_27A_27,V_27B_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'(V_27A_27,'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'))))),'_dst_x00000x11101x01111_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'bool'),'fun'('fun'(V_27A_27,V_27B_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool')))),'_dstsel_0_x0111_1'(s('fun'('fun'(V_27A_27,V_27B_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27))))))),'_dst_x000x111_2'(s('fun'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27))))),'const.sum.INL_0'),s('fun'('fun'(V_27A_27,V_27B_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))))))),'_dst_x000x100x011_3'(s('fun'('fun'(V_27A_27,V_27B_27),'fun'('type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))))),'const.pair.,_0'),s('fun'('fun'(V_27A_27,V_27B_27),'fun'(V_27A_27,V_27B_27)),'_i_0_0'),s('fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))))),'const.pair.,_0'))))))),s('fun'('fun'(V_27A_27,V_27B_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'(V_27A_27,'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool')))),'_dst_x0000x1110x0001_3'(s('fun'('fun'(V_27A_27,'bool'),'fun'('fun'(V_27A_27,'type.num.num'),'bool')),'const.bag.BAG_EVERY_0'),s('fun'('fun'(V_27A_27,V_27B_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'(V_27A_27,'fun'(V_27A_27,'bool')))),'_dstsel_1_x1010x1001_2'(s('fun'('fun'(V_27A_27,V_27B_27),'fun'(V_27A_27,V_27B_27)),'_i_0_0'),s('fun'('fun'(V_27A_27,V_27B_27),'fun'(V_27A_27,V_27B_27)),'_i_0_0'))),s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'fun'(V_27A_27,'type.num.num')),'const.BinomialHeap.heap_to_bag_0')))))))))))))))))).
fof('thm.BinomialHeap.BinomialHeap_24_prove_ltb', axiom, ![V_27B_27,V_27A_27]: ![V_27a_27]: (((?[V_27get__key_27, V_27leq_27]: s('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),V_27a_27) = s('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'const.sum.INL_1'(s('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'const.pair.,_2'(s('fun'(V_27A_27,V_27B_27),V_27get__key_27),s('type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))),'const.pair.,_2'(s('fun'(V_27B_27,'fun'(V_27B_27,'bool')),V_27leq_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'const.list.NIL_0'))))))) | ?[V_27get__key_27, V_27leq_27, V_27t_27, V_27ts_27]: s('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),V_27a_27) = s('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'const.sum.INL_1'(s('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'const.pair.,_2'(s('fun'(V_27A_27,V_27B_27),V_27get__key_27),s('type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))),'const.pair.,_2'(s('fun'(V_27B_27,'fun'(V_27B_27,'bool')),V_27leq_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(V_27A_27),V_27t_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27ts_27)))))))))) | ?[V_27get__key_27, V_27leq_27, V_27v_7c48_7c_27, V_27x_27, V_27hs_27]: s('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),V_27a_27) = s('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'const.sum.INR_1'(s('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27))),'const.pair.,_2'(s('fun'(V_27A_27,V_27B_27),V_27get__key_27),s('type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)),'const.pair.,_2'(s('fun'(V_27B_27,'fun'(V_27B_27,'bool')),V_27leq_27),s('type.BinomialHeap.tree'(V_27A_27),'const.BinomialHeap.Node_3'(s('type.num.num',V_27v_7c48_7c_27),s(V_27A_27,V_27x_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27hs_27)))))))))) => (?[V_27get__key_27, V_27leq_27]: s('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),V_27a_27) = s('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'const.sum.INL_1'(s('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'const.pair.,_2'(s('fun'(V_27A_27,V_27B_27),V_27get__key_27),s('type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))),'const.pair.,_2'(s('fun'(V_27B_27,'fun'(V_27B_27,'bool')),V_27leq_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'const.list.NIL_0'))))))) | (?[V_27get__key_27, V_27leq_27, V_27t_27, V_27ts_27]: s('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),V_27a_27) = s('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'const.sum.INL_1'(s('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'const.pair.,_2'(s('fun'(V_27A_27,V_27B_27),V_27get__key_27),s('type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))),'const.pair.,_2'(s('fun'(V_27B_27,'fun'(V_27B_27,'bool')),V_27leq_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(V_27A_27),V_27t_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27ts_27))))))))) | ?[V_27get__key_27, V_27leq_27, V_27v_7c48_7c_27, V_27x_27, V_27hs_27]: s('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),V_27a_27) = s('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'const.sum.INR_1'(s('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27))),'const.pair.,_2'(s('fun'(V_27A_27,V_27B_27),V_27get__key_27),s('type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)),'const.pair.,_2'(s('fun'(V_27B_27,'fun'(V_27B_27,'bool')),V_27leq_27),s('type.BinomialHeap.tree'(V_27A_27),'const.BinomialHeap.Node_3'(s('type.num.num',V_27v_7c48_7c_27),s(V_27A_27,V_27x_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27hs_27))))))))))))).
fof('thm.BinomialHeap.is_heap_ordered_UNION_extract|49|_def', axiom, ![V_27B_27,V_27A_27]: ![V_27x_27, V_27x_7c49_7c_27, V_27x2_27]: s('bool','const.BinomialHeap.is_heap_ordered_tree_3'(s('fun'(V_27A_27,V_27B_27),V_27x_27),s('fun'(V_27B_27,'fun'(V_27B_27,'bool')),V_27x_7c49_7c_27),s('type.BinomialHeap.tree'(V_27A_27),V_27x2_27))) = s('bool','const.BinomialHeap.is_heap_ordered_UNION_1'(s('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'const.sum.INR_1'(s('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27))),'const.pair.,_2'(s('fun'(V_27A_27,V_27B_27),V_27x_27),s('type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)),'const.pair.,_2'(s('fun'(V_27B_27,'fun'(V_27B_27,'bool')),V_27x_7c49_7c_27),s('type.BinomialHeap.tree'(V_27A_27),V_27x2_27)))))))))).
fof('thm.BinomialHeap.is_heap_ordered_UNION_extract|48|_def', axiom, ![V_27B_27,V_27A_27]: ![V_27x_27, V_27x_7c49_7c_27, V_27x2_27]: s('bool','const.BinomialHeap.is_heap_ordered_3'(s('fun'(V_27A_27,V_27B_27),V_27x_27),s('fun'(V_27B_27,'fun'(V_27B_27,'bool')),V_27x_7c49_7c_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27x2_27))) = s('bool','const.BinomialHeap.is_heap_ordered_UNION_1'(s('type.sum.sum'('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.BinomialHeap.tree'(V_27A_27)))),'const.sum.INL_1'(s('type.pair.prod'('fun'(V_27A_27,V_27B_27),'type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27)))),'const.pair.,_2'(s('fun'(V_27A_27,V_27B_27),V_27x_27),s('type.pair.prod'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'type.list.list'('type.BinomialHeap.tree'(V_27A_27))),'const.pair.,_2'(s('fun'(V_27B_27,'fun'(V_27B_27,'bool')),V_27x_7c49_7c_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27x2_27)))))))))).
fof('thm.BinomialHeap.is_heap_ordered_ind', axiom, ![V_27B_27,V_27A_27]: ![V_27P_7c48_7c_27, V_27P_7c49_7c_27]: ((![V_27get__key_27, V_27leq_27]: p(s('bool','happ'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'),'happ'(s('fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool')),'happ'(s('fun'('fun'(V_27A_27,V_27B_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'))),V_27P_7c48_7c_27),s('fun'(V_27A_27,V_27B_27),V_27get__key_27))),s('fun'(V_27B_27,'fun'(V_27B_27,'bool')),V_27leq_27))),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'const.list.NIL_0')))) & (![V_27get__key_27, V_27leq_27, V_27t_27, V_27ts_27]: ((p(s('bool','happ'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'),'happ'(s('fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool')),'happ'(s('fun'('fun'(V_27A_27,V_27B_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'))),V_27P_7c48_7c_27),s('fun'(V_27A_27,V_27B_27),V_27get__key_27))),s('fun'(V_27B_27,'fun'(V_27B_27,'bool')),V_27leq_27))),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27ts_27)))) & p(s('bool','happ'(s('fun'('type.BinomialHeap.tree'(V_27A_27),'bool'),'happ'(s('fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.BinomialHeap.tree'(V_27A_27),'bool')),'happ'(s('fun'('fun'(V_27A_27,V_27B_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.BinomialHeap.tree'(V_27A_27),'bool'))),V_27P_7c49_7c_27),s('fun'(V_27A_27,V_27B_27),V_27get__key_27))),s('fun'(V_27B_27,'fun'(V_27B_27,'bool')),V_27leq_27))),s('type.BinomialHeap.tree'(V_27A_27),V_27t_27))))) => p(s('bool','happ'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'),'happ'(s('fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool')),'happ'(s('fun'('fun'(V_27A_27,V_27B_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'))),V_27P_7c48_7c_27),s('fun'(V_27A_27,V_27B_27),V_27get__key_27))),s('fun'(V_27B_27,'fun'(V_27B_27,'bool')),V_27leq_27))),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(V_27A_27),V_27t_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27ts_27))))))) & ![V_27get__key_27, V_27leq_27, V_27v_7c48_7c_27, V_27x_27, V_27hs_27]: (p(s('bool','happ'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'),'happ'(s('fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool')),'happ'(s('fun'('fun'(V_27A_27,V_27B_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'))),V_27P_7c48_7c_27),s('fun'(V_27A_27,V_27B_27),V_27get__key_27))),s('fun'(V_27B_27,'fun'(V_27B_27,'bool')),V_27leq_27))),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27hs_27)))) => p(s('bool','happ'(s('fun'('type.BinomialHeap.tree'(V_27A_27),'bool'),'happ'(s('fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.BinomialHeap.tree'(V_27A_27),'bool')),'happ'(s('fun'('fun'(V_27A_27,V_27B_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.BinomialHeap.tree'(V_27A_27),'bool'))),V_27P_7c49_7c_27),s('fun'(V_27A_27,V_27B_27),V_27get__key_27))),s('fun'(V_27B_27,'fun'(V_27B_27,'bool')),V_27leq_27))),s('type.BinomialHeap.tree'(V_27A_27),'const.BinomialHeap.Node_3'(s('type.num.num',V_27v_7c48_7c_27),s(V_27A_27,V_27x_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27hs_27))))))))) => (![V_27v_7c48_7c_27, V_27v_7c49_7c_27, V_27v2_27]: p(s('bool','happ'(s('fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'),'happ'(s('fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool')),'happ'(s('fun'('fun'(V_27A_27,V_27B_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'bool'))),V_27P_7c48_7c_27),s('fun'(V_27A_27,V_27B_27),V_27v_7c48_7c_27))),s('fun'(V_27B_27,'fun'(V_27B_27,'bool')),V_27v_7c49_7c_27))),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27v2_27)))) & ![V_27v_7c48_7c_27, V_27v_7c49_7c_27, V_27v2_27]: p(s('bool','happ'(s('fun'('type.BinomialHeap.tree'(V_27A_27),'bool'),'happ'(s('fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.BinomialHeap.tree'(V_27A_27),'bool')),'happ'(s('fun'('fun'(V_27A_27,V_27B_27),'fun'('fun'(V_27B_27,'fun'(V_27B_27,'bool')),'fun'('type.BinomialHeap.tree'(V_27A_27),'bool'))),V_27P_7c49_7c_27),s('fun'(V_27A_27,V_27B_27),V_27v_7c48_7c_27))),s('fun'(V_27B_27,'fun'(V_27B_27,'bool')),V_27v_7c49_7c_27))),s('type.BinomialHeap.tree'(V_27A_27),V_27v2_27))))))).
fof('thm.BinomialHeap.is_heap_ordered_def|split|0', axiom, ![V_27B_27,V_27A_27]: ![V_27leq_27, V_27get__key_27]: s('bool','const.BinomialHeap.is_heap_ordered_3'(s('fun'(V_27A_27,V_27B_27),V_27get__key_27),s('fun'(V_27B_27,'fun'(V_27B_27,'bool')),V_27leq_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'const.list.NIL_0'))) = s('bool','T_0')).
fof('thm.BinomialHeap.is_heap_ordered_def|split|1', axiom, ![V_27B_27,V_27A_27]: ![V_27ts_27, V_27t_27, V_27leq_27, V_27get__key_27]: (p(s('bool','const.BinomialHeap.is_heap_ordered_3'(s('fun'(V_27A_27,V_27B_27),V_27get__key_27),s('fun'(V_27B_27,'fun'(V_27B_27,'bool')),V_27leq_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(V_27A_27),V_27t_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27ts_27)))))) <=> (p(s('bool','const.BinomialHeap.is_heap_ordered_tree_3'(s('fun'(V_27A_27,V_27B_27),V_27get__key_27),s('fun'(V_27B_27,'fun'(V_27B_27,'bool')),V_27leq_27),s('type.BinomialHeap.tree'(V_27A_27),V_27t_27)))) & p(s('bool','const.BinomialHeap.is_heap_ordered_3'(s('fun'(V_27A_27,V_27B_27),V_27get__key_27),s('fun'(V_27B_27,'fun'(V_27B_27,'bool')),V_27leq_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27ts_27))))))).
fof('thm.BinomialHeap.is_heap_ordered_def|split|2', axiom, ![V_27B_27,V_27A_27]: ![V_27x_27, V_27v_7c48_7c_27, V_27leq_27, V_27hs_27, V_27get__key_27]: (p(s('bool','const.BinomialHeap.is_heap_ordered_tree_3'(s('fun'(V_27A_27,V_27B_27),V_27get__key_27),s('fun'(V_27B_27,'fun'(V_27B_27,'bool')),V_27leq_27),s('type.BinomialHeap.tree'(V_27A_27),'const.BinomialHeap.Node_3'(s('type.num.num',V_27v_7c48_7c_27),s(V_27A_27,V_27x_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27hs_27)))))) <=> (p(s('bool','const.BinomialHeap.is_heap_ordered_3'(s('fun'(V_27A_27,V_27B_27),V_27get__key_27),s('fun'(V_27B_27,'fun'(V_27B_27,'bool')),V_27leq_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27hs_27)))) & p(s('bool','const.bag.BAG_EVERY_2'(s('fun'(V_27A_27,'bool'),'_dst_x0x1_2'(s('fun'(V_27B_27,'bool'),'happ'(s('fun'(V_27B_27,'fun'(V_27B_27,'bool')),V_27leq_27),s(V_27B_27,'happ'(s('fun'(V_27A_27,V_27B_27),V_27get__key_27),s(V_27A_27,V_27x_27))))),s('fun'(V_27A_27,V_27B_27),V_27get__key_27))),s('fun'(V_27A_27,'type.num.num'),'const.BinomialHeap.heap_to_bag_1'(s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27hs_27))))))))).
fof('thm.BinomialHeap.empty_def', axiom, ![V_27A_27]: s('type.list.list'(V_27A_27),'const.BinomialHeap.empty_0') = s('type.list.list'(V_27A_27),'const.list.NIL_0')).
fof('thm.BinomialHeap.is_empty_primitive_def', axiom, ![V_27A_27]: s('fun'('type.list.list'(V_27A_27),'bool'),'const.BinomialHeap.is_empty_0') = s('fun'('type.list.list'(V_27A_27),'bool'),'const.relation.WFREC_2'(s('fun'('type.list.list'(V_27A_27),'fun'('type.list.list'(V_27A_27),'bool')),'const.min.@_1'(s('fun'('fun'('type.list.list'(V_27A_27),'fun'('type.list.list'(V_27A_27),'bool')),'bool'),'const.relation.WF_0'))),s('fun'('fun'('type.list.list'(V_27A_27),'bool'),'fun'('type.list.list'(V_27A_27),'bool')),'_dst_x0_1'(s('fun'('type.list.list'(V_27A_27),'bool'),'_dst_x1x0x0_3'(s('fun'('type.list.list'(V_27A_27),'fun'('bool','fun'('fun'(V_27A_27,'fun'('type.list.list'(V_27A_27),'bool')),'bool'))),'const.list.list_CASE_0'),s('bool','const.combin.I_1'(s('bool','T_0'))),s('fun'(V_27A_27,'fun'('type.list.list'(V_27A_27),'bool')),'_dst_x0_1'(s('fun'('type.list.list'(V_27A_27),'bool'),'_dst_x0_1'(s('bool','const.combin.I_1'(s('bool','F_0')))))))))))))).
fof('ARITY_0_1_const.BinomialHeap.is_empty', axiom, ![V_27A_27]: ![VV0]: s('bool','happ'(s('fun'('type.list.list'(V_27A_27),'bool'),'const.BinomialHeap.is_empty_0'),s('type.list.list'(V_27A_27),VV0))) = s('bool','const.BinomialHeap.is_empty_1'(s('type.list.list'(V_27A_27),VV0)))).
fof('thm.BinomialHeap.is_empty_def|split|0', axiom, ![V_27A_27]: s('bool','const.BinomialHeap.is_empty_1'(s('type.list.list'(V_27A_27),'const.list.NIL_0'))) = s('bool','T_0')).
fof('thm.BinomialHeap.is_empty_def|split|1', axiom, ![V_27A_27]: ![V_27v_7c49_7c_27, V_27v_27]: s('bool','const.BinomialHeap.is_empty_1'(s('type.list.list'(V_27A_27),'const.list.CONS_2'(s(V_27A_27,V_27v_27),s('type.list.list'(V_27A_27),V_27v_7c49_7c_27))))) = s('bool','F_0')).
fof('thm.BinomialHeap.rank_def', axiom, ![V_27A_27]: ![V_27r_27, V_27x_27, V_27c_27]: s('type.num.num','const.BinomialHeap.rank_1'(s('type.BinomialHeap.tree'(V_27A_27),'const.BinomialHeap.Node_3'(s('type.num.num',V_27r_27),s(V_27A_27,V_27x_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27c_27))))) = s('type.num.num',V_27r_27)).
fof('thm.BinomialHeap.BinomialHeap_4|48|_prove_ltb', axiom, ![V_27A_27]: ![V_27a_7c39_7c_27]: (?[V_27a_27, V_27x__3_27, V_27x__2_27, V_27x___7c49_7c_27, V_27v_27]: s('type.pair.prod'('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),'type.pair.prod'('type.BinomialHeap.tree'(V_27A_27),'type.semanticPrimitives.v')),V_27a_7c39_7c_27) = s('type.pair.prod'('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),'type.pair.prod'('type.BinomialHeap.tree'(V_27A_27),'type.semanticPrimitives.v')),'const.pair.,_2'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),V_27a_27),s('type.pair.prod'('type.BinomialHeap.tree'(V_27A_27),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.BinomialHeap.tree'(V_27A_27),'const.BinomialHeap.Node_3'(s('type.num.num',V_27x__3_27),s(V_27A_27,V_27x__2_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27x___7c49_7c_27))),s('type.semanticPrimitives.v',V_27v_27))))) => ?[V_27a_27, V_27x__3_27, V_27x__2_27, V_27x___7c49_7c_27, V_27v_27]: s('type.pair.prod'('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),'type.pair.prod'('type.BinomialHeap.tree'(V_27A_27),'type.semanticPrimitives.v')),V_27a_7c39_7c_27) = s('type.pair.prod'('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),'type.pair.prod'('type.BinomialHeap.tree'(V_27A_27),'type.semanticPrimitives.v')),'const.pair.,_2'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),V_27a_27),s('type.pair.prod'('type.BinomialHeap.tree'(V_27A_27),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.BinomialHeap.tree'(V_27A_27),'const.BinomialHeap.Node_3'(s('type.num.num',V_27x__3_27),s(V_27A_27,V_27x__2_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27x___7c49_7c_27))),s('type.semanticPrimitives.v',V_27v_27))))))).
fof('thm.BinomialHeap.BinomialHeap_42_prove_ltb', axiom, ?[V_27_7c37_7c_7c37_7cgenvar_7c37_7c_7c37_7c32_7c49_7c6_27]: ~ (p(s('bool',V_27_7c37_7c_7c37_7cgenvar_7c37_7c_7c37_7c32_7c49_7c6_27)))).
fof('thm.BinomialHeap.BINOMIALHEAP_TREE_TYPE_ind', conjecture, ![V_27A_27]: ![V_27P_27]: (![V_27a_27, V_27x__3_27, V_27x__2_27, V_27x___7c49_7c_27, V_27v_27]: (![V_27x_27, V_27v_7c39_7c_27]: (p(s('bool','const.bool.IN_2'(s('type.BinomialHeap.tree'(V_27A_27),V_27x_27),s('fun'('type.BinomialHeap.tree'(V_27A_27),'bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27x___7c49_7c_27)))))) => p(s('bool','happ'(s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('type.semanticPrimitives.v','bool')),'happ'(s('fun'('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),'fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('type.semanticPrimitives.v','bool'))),V_27P_27),s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),V_27a_27))),s('type.BinomialHeap.tree'(V_27A_27),V_27x_27))),s('type.semanticPrimitives.v',V_27v_7c39_7c_27))))) => p(s('bool','happ'(s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('type.semanticPrimitives.v','bool')),'happ'(s('fun'('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),'fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('type.semanticPrimitives.v','bool'))),V_27P_27),s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),V_27a_27))),s('type.BinomialHeap.tree'(V_27A_27),'const.BinomialHeap.Node_3'(s('type.num.num',V_27x__3_27),s(V_27A_27,V_27x__2_27),s('type.list.list'('type.BinomialHeap.tree'(V_27A_27)),V_27x___7c49_7c_27))))),s('type.semanticPrimitives.v',V_27v_27))))) => ![V_27v_27, V_27v_7c49_7c_27, V_27v2_27]: p(s('bool','happ'(s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('type.semanticPrimitives.v','bool')),'happ'(s('fun'('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),'fun'('type.BinomialHeap.tree'(V_27A_27),'fun'('type.semanticPrimitives.v','bool'))),V_27P_27),s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),V_27v_27))),s('type.BinomialHeap.tree'(V_27A_27),V_27v_7c49_7c_27))),s('type.semanticPrimitives.v',V_27v2_27)))))).
